var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/modules/ApiModule.html",[0,0.892,1,2.327]],["body/modules/ApiModule.html",[0,1.412,1,4.777,2,1.674,3,2.495,4,3.913,5,3.913,6,4.482,7,0.02,8,4.482,9,4.154,10,4.482,11,4.482,12,2.803,13,2.213,14,2.085,15,0.218,16,0.163,17,0.163,18,4.564,19,2.983,20,0.293,21,0.647,22,4.564,23,4.564,24,4.564,25,4.564,26,4.564,27,0.218,28,0.245,29,0.015,30,0.015]],["title/controllers/AppController.html",[31,1.038,32,2.532]],["body/controllers/AppController.html",[7,0.02,15,0.246,16,0.184,17,0.184,20,0.26,21,0.73,27,0.246,28,0.276,29,0.016,30,0.016,31,1.771,32,4.32,33,1.992,34,4.416,35,0.775,36,2.17,37,5.968,38,1.539,39,6.23,40,0.869,41,5.15,42,1.89,43,1.374,44,3.957,45,4.416,46,2.103,47,2.497,48,1.258,49,5.15]],["title/modules/AppModule.html",[0,0.892,50,2.532]],["body/modules/AppModule.html",[0,1.444,1,4.522,2,1.735,3,2.551,7,0.02,12,2.866,13,2.292,14,2.16,15,0.226,16,0.169,17,0.169,19,3.05,20,0.29,21,0.67,27,0.226,28,0.253,29,0.015,30,0.015,32,4.472,33,2.287,44,4.191,45,4.053,50,5.125,51,4.053,52,4.053,53,4.053,54,4.191,55,4.727,56,3.256,57,4.727,58,4.727,59,4.727]],["title/injectables/AppService.html",[44,2.157,60,1.34]],["body/injectables/AppService.html",[7,0.019,15,0.255,16,0.191,17,0.191,20,0.223,21,0.757,27,0.255,28,0.286,29,0.017,30,0.017,35,0.804,36,2.219,37,6.042,40,0.902,42,1.961,43,1.405,44,3.763,48,1.306,60,2.337,61,3.157,62,4.582,63,5.344,64,5.344,65,5.344]],["title/controllers/AuthController.html",[31,1.038,66,2.157]],["body/controllers/AuthController.html",[7,0.02,15,0.21,16,0.157,17,0.157,20,0.26,21,0.623,27,0.21,28,0.334,29,0.015,30,0.015,31,1.251,33,1.702,35,0.662,36,1.967,38,1.315,40,0.742,42,1.614,43,1.451,46,1.797,48,1.075,66,3.337,67,3.051,68,2.805,69,3.773,70,1.961,71,5.648,72,4.4,73,4.195,74,4.4,75,4.4,76,4.4,77,1.797,78,1.022,79,1.007,80,1.533,81,2.851,82,2.424,83,1.702,84,3.191,85,4.313,86,1.899,87,1.797,88,2.289,89,2.424,90,1.797,91,1.614,92,3.6,93,2.438,94,3.36,95,3.36,96,3.36,97,3.36,98,3.36,99,3.36,100,1.315,101,3.051,102,1.456,103,3.36,104,3.36,105,3.36,106,1.384,107,3.36]],["title/modules/AuthModule.html",[0,0.892,6,2.327]],["body/modules/AuthModule.html",[0,1.415,2,1.679,3,2.499,6,4.555,7,0.02,12,2.808,13,2.218,14,2.091,15,0.219,16,0.164,17,0.164,19,2.36,20,0.298,21,0.648,27,0.219,28,0.245,29,0.015,30,0.015,33,2.24,56,3.19,66,3.753,88,2.728,89,2.52,108,3.923,109,3.923,110,3.923,111,4.575,112,4.015,113,4.421,114,2.703,115,2.091,116,1.15,117,1.593,118,4.575,119,2.903,120,3.923,121,3.19,122,3.923,123,4.575]],["title/injectables/AuthService.html",[60,1.34,88,1.34]],["body/injectables/AuthService.html",[7,0.02,15,0.126,16,0.094,17,0.094,20,0.263,21,0.373,27,0.126,28,0.141,29,0.01,30,0.01,35,0.396,36,1.374,40,1.035,42,2.067,43,1.605,48,1.376,60,1.447,61,1.554,70,2.188,77,2.415,78,1.373,79,1.094,80,2.06,82,1.449,88,1.447,90,1.611,91,2.448,93,1.702,100,1.929,101,3.282,102,2.174,106,1.984,115,1.202,116,0.522,117,0.916,119,1.803,120,2.255,121,2.173,122,2.255,124,2.255,125,1.374,126,4.733,127,4.733,128,3.945,129,4.733,130,3.945,131,3.329,132,4.733,133,3.945,134,2.33,135,2.255,136,3.352,137,4.733,138,3.165,139,4.733,140,2.63,141,3.382,142,3.945,143,2.63,144,2.63,145,2.63,146,2.907,147,2.315,148,3.945,149,2.63,150,2.63,151,5.633,152,2.63,153,3.945,154,2.63,155,1.677,156,1.677,157,2.255,158,3.382,159,2.63,160,1.554,161,2.735,162,2.008,163,2.63,164,2.255,165,2.63,166,0.827,167,2.255,168,2.63,169,2.63,170,2.008,171,3.945,172,3.945,173,2.574,174,1.52,175,2.255,176,2.63,177,2.63,178,2.63,179,2.63,180,2.63,181,2.63,182,2.255,183,2.63,184,2.63,185,2.008,186,2.008,187,3.945,188,2.63,189,2.63,190,2.63,191,2.63,192,2.63,193,2.63,194,3.945,195,2.63,196,2.63,197,0.87,198,2.63,199,2.035,200,2.63,201,2.63,202,2.63,203,2.63,204,2.63,205,1.135]],["title/controllers/HashtagsController.html",[31,1.038,206,2.532]],["body/controllers/HashtagsController.html",[7,0.02,15,0.222,16,0.166,17,0.166,20,0.267,21,0.828,27,0.222,28,0.249,29,0.015,30,0.015,31,1.32,33,1.797,35,0.699,36,2.036,38,1.747,40,0.986,42,2.145,43,1.48,48,1.428,68,2.96,77,1.896,78,1.078,80,1.618,86,2.004,87,1.896,206,4.053,207,3.982,208,3.016,209,6.713,210,5.845,211,4.644,212,4.644,213,5.845,214,4.644,215,6.396,216,2.558,217,4.644,218,4.644,219,4.463,220,5.012,221,5.012,222,5.845,223,4.644,224,4.644,225,3.982,226,3.22,227,3.982]],["title/modules/HashtagsModule.html",[0,0.892,8,2.327]],["body/modules/HashtagsModule.html",[0,1.581,2,2.013,7,0.019,8,4.125,15,0.262,16,0.196,17,0.196,20,0.27,21,0.777,27,0.262,28,0.294,29,0.017,30,0.017,33,2.503,206,4.772,228,5.487,229,5.487]],["title/controllers/LikesController.html",[31,1.038,230,2.532]],["body/controllers/LikesController.html",[7,0.02,15,0.255,16,0.191,17,0.191,20,0.284,21,0.757,27,0.255,28,0.286,29,0.017,30,0.017,31,1.519,33,2.067,46,2.182,47,2.591,68,3.406,86,2.306,87,2.182,230,4.417,231,4.582,232,5.344,233,3.3,234,4.582,235,5.344,236,5.344]],["title/classes/LikesEntity.html",[28,0.196,237,1.884]],["body/classes/LikesEntity.html",[7,0.02,15,0.205,16,0.154,17,0.154,20,0.272,27,0.205,28,0.23,29,0.014,30,0.014,35,0.646,38,2.02,40,1.14,43,0.948,78,1.292,79,1.205,83,2.386,116,1.296,117,1.497,125,1.938,166,1.351,174,1.585,197,1.84,237,2.87,238,1.05,239,3.685,240,1.84,241,3.163,242,2.87,243,2.87,244,2.272,245,4.77,246,5.563,247,4.298,248,5.563,249,4.298,250,2.87,251,2.367,252,2.367,253,3.644,254,2.539,255,2.367,256,2.539,257,2.367,258,2.367,259,2.539,260,2.367,261,2.739,262,2.084,263,3.644,264,3.932,265,4.298]],["title/modules/LikesModule.html",[0,0.892,9,2.157]],["body/modules/LikesModule.html",[0,1.458,2,1.762,3,2.576,7,0.02,9,4.266,12,2.894,13,2.328,14,2.194,15,0.229,16,0.172,17,0.172,19,2.477,20,0.292,21,0.68,27,0.229,28,0.257,29,0.015,30,0.015,33,2.309,56,3.288,112,4.138,114,2.837,115,2.194,230,4.503,233,3.629,234,4.117,266,4.117,267,4.117,268,4.117,269,4.801,270,4.801,271,3.06,272,4.117,273,4.801]],["title/classes/LikesRepository.html",[28,0.196,271,2.327]],["body/classes/LikesRepository.html",[7,0.019,15,0.262,16,0.196,17,0.196,20,0.27,27,0.262,28,0.294,29,0.017,30,0.017,138,3.551,166,1.725,237,2.831,238,1.34,240,2.141,271,4.125,274,4.705,275,4.19,276,4.705,277,5.487]],["title/injectables/LikesService.html",[60,1.34,233,1.77]],["body/injectables/LikesService.html",[7,0.02,15,0.155,16,0.116,17,0.116,20,0.256,21,0.458,27,0.155,28,0.173,29,0.012,30,0.012,35,0.487,36,1.598,40,0.979,42,1.956,43,1.553,46,1.321,48,1.496,60,1.683,61,1.911,70,2.138,77,2.368,78,1.347,79,1.034,80,2.02,83,2.585,100,1.83,102,2.026,106,1.442,116,1.152,117,1.127,131,2.75,134,1.911,146,3.556,147,2.334,173,1.478,174,1.635,186,2.47,197,1.518,233,2.224,237,2.367,244,2.02,261,2.062,271,4.054,272,2.774,276,2.774,278,2.774,279,5.33,280,3.503,281,4.07,282,3.235,283,3.235,284,3.235,285,3.235,286,4.054,287,4.587,288,3.235,289,3.933,290,3.235,291,3.503,292,3.149,293,4.587,294,3.235,295,3.503,296,3.235,297,3.235,298,3.235,299,4.587,300,3.235,301,2.47,302,2.774,303,3.181,304,3.235,305,3.235,306,3.235,307,1.669,308,2.774,309,2.774,310,2.243,311,3.235,312,2.774,313,2.774,314,3.235,315,3.235,316,3.235,317,3.235,318,3.235,319,3.235,320,3.235]],["title/classes/LoginRequestBody.html",[28,0.196,73,2.327]],["body/classes/LoginRequestBody.html",[7,0.02,15,0.212,16,0.159,17,0.159,20,0.261,21,0.629,27,0.212,28,0.336,29,0.015,30,0.015,31,1.263,35,0.668,38,1.699,40,0.959,43,1.54,46,1.814,48,1.085,66,2.625,67,3.081,70,1.397,73,3.994,79,1.117,81,2.597,83,1.719,84,3.386,85,4.339,86,1.917,87,1.814,88,2.299,89,2.447,90,2.559,91,2.299,92,3.622,93,2.453,94,3.392,95,3.392,96,3.392,97,3.392,98,3.392,99,3.392,100,1.328,101,3.081,102,1.47,103,3.392,104,3.392,105,3.392,106,1.397,107,3.392,125,1.979,238,1.085,321,4.443,322,4.443]],["title/classes/LoginResponseBody.html",[28,0.196,92,2.327]],["body/classes/LoginResponseBody.html",[7,0.02,15,0.211,16,0.158,17,0.158,20,0.261,21,0.626,27,0.211,28,0.335,29,0.015,30,0.015,31,1.257,35,0.665,38,1.322,40,0.956,43,1.564,46,1.805,48,1.08,66,2.612,67,3.066,70,1.39,73,3.611,77,1.805,78,1.026,79,1.115,80,1.54,81,2.589,83,1.71,84,3.305,85,4.326,86,1.908,87,1.805,88,2.294,89,2.436,90,1.805,91,1.622,92,3.985,93,2.942,94,4.326,95,3.376,96,3.376,97,3.376,98,3.376,99,3.376,100,1.322,101,3.066,102,1.463,103,3.376,104,3.376,105,3.376,106,1.39,107,3.376,125,1.973,134,2.612,238,1.08,323,5.665]],["title/classes/Mention.html",[28,0.196,324,2.532]],["body/classes/Mention.html",[7,0.02,15,0.2,16,0.15,17,0.15,20,0.254,27,0.2,28,0.293,29,0.014,30,0.014,35,0.63,40,0.923,43,1.478,78,1.649,79,0.976,116,1.21,117,1.459,125,1.906,155,3.488,156,3.488,166,1.318,197,2.016,205,2.788,208,2.162,238,1.024,240,1.386,241,2.501,244,2.334,260,2.308,262,2.032,263,3.817,264,3.488,324,3.794,325,3.199,326,4.19,327,4.19,328,4.118,329,4.225,330,3.593,331,3.199,332,3.199,333,4.48,334,2.308,335,5.225,336,3.593,337,5.225,338,3.593,339,2.162,340,3.593,341,3.233,342,3.593,343,3.593,344,3.593,345,2.906,346,3.593,347,3.199,348,3.593,349,2.906]],["title/modules/MockLikesModule.html",[0,0.892,350,2.532]],["body/modules/MockLikesModule.html",[0,1.492,2,1.828,3,2.635,7,0.02,12,2.961,13,2.416,14,2.277,15,0.238,16,0.178,17,0.178,20,0.276,21,0.706,27,0.238,28,0.267,29,0.016,30,0.016,56,3.364,112,4.234,233,3.646,350,5.047,351,4.273,352,4.983,353,4.983,354,4.983,355,4.578,356,4.273,357,3.805]],["title/classes/MockLikesRepository.html",[28,0.196,358,2.532]],["body/classes/MockLikesRepository.html",[7,0.019,15,0.264,16,0.198,17,0.198,20,0.271,27,0.264,28,0.296,29,0.017,30,0.017,138,3.559,166,1.736,237,2.848,238,1.349,240,2.148,358,4.503,359,4.733,360,4.215]],["title/modules/MockPostsModule.html",[0,0.892,361,2.532]],["body/modules/MockPostsModule.html",[0,1.376,2,1.607,3,2.43,7,0.02,12,2.73,13,2.124,14,2.001,15,0.209,16,0.157,17,0.157,20,0.284,21,0.621,27,0.209,28,0.235,29,0.015,30,0.015,56,3.102,88,2.712,112,3.905,233,3.584,355,4.316,356,3.755,357,3.344,361,5.096,362,3.755,363,4.379,364,3.755,365,2.773,366,4.379,367,2.412,368,3.344,369,4.752,370,4.752,371,4.752,372,4.752]],["title/classes/MockPostsRepository.html",[28,0.196,373,2.532]],["body/classes/MockPostsRepository.html",[7,0.019,15,0.264,16,0.198,17,0.198,20,0.271,27,0.264,28,0.296,29,0.017,30,0.017,138,3.559,166,1.736,238,1.349,240,2.148,244,1.923,261,3.518,373,4.503,374,4.733]],["title/classes/MockUsersRepository.html",[28,0.196,375,2.532]],["body/classes/MockUsersRepository.html",[7,0.02,15,0.225,16,0.168,17,0.168,20,0.268,27,0.225,28,0.252,29,0.015,30,0.015,35,0.707,36,2.052,40,0.794,42,1.726,48,1.149,70,2.023,78,1.092,82,2.591,90,1.92,100,1.406,106,2.023,116,1.17,117,1.638,119,2.692,138,3.319,166,1.479,185,3.591,197,1.556,205,2.03,238,1.149,240,1.949,242,2.427,243,2.427,307,3.04,375,4.085,376,4.033,377,6.744,378,4.703,379,2.998,380,5.892,381,4.033,382,4.703,383,4.703,384,4.703,385,4.033,386,4.033,387,5.892,388,6.744,389,4.703,390,4.033]],["title/guards/OptionalAuthGuard.html",[391,2.788,392,2.327]],["body/guards/OptionalAuthGuard.html",[7,0.02,15,0.192,16,0.144,17,0.144,20,0.222,21,0.57,27,0.255,28,0.32,29,0.014,30,0.014,35,0.605,36,1.856,40,0.679,42,1.477,47,1.952,48,1.554,60,2.192,70,2.08,77,1.644,78,0.935,79,0.718,80,1.402,88,2.192,89,2.218,93,2.579,100,1.786,102,1.332,106,1.879,131,2.077,147,2.334,161,2.791,173,2.73,174,1.37,205,2.3,240,1.977,307,2.077,365,1.557,392,3.397,393,3.074,394,2.791,395,4.054,396,5.051,397,4.562,398,4.714,399,4.026,400,2.791,401,3.074,402,3.074,403,3.074,404,3.074,405,2.791,406,3.074,407,3.074,408,4.07,409,3.696,410,4.07,411,3.074,412,3.074,413,3.074,414,2.791,415,2.791,416,4.07,417,3.074,418,4.07,419,3.074,420,2.791]],["title/classes/PasswordEntity.html",[28,0.196,119,1.668]],["body/classes/PasswordEntity.html",[7,0.02,15,0.203,16,0.152,17,0.152,20,0.256,27,0.203,28,0.227,29,0.014,30,0.014,35,0.637,38,2.061,40,1.163,43,1.484,78,0.984,79,1.23,91,2.248,116,1.289,117,1.476,119,2.519,125,1.92,146,3.348,166,1.333,174,1.575,197,1.824,238,1.035,240,1.824,241,3.151,242,2.844,243,2.844,250,2.844,251,2.335,252,2.335,253,3.62,254,2.504,255,2.335,256,2.504,257,2.335,258,2.335,259,2.504,260,2.335,262,2.055,263,3.257,295,4.209,328,4.136,329,3.823,333,2.939,421,3.634,422,3.634,423,4.238,424,3.236,425,4.238,426,4.238,427,4.238,428,4.238]],["title/classes/PostCreateRequestBody.html",[28,0.196,429,2.327]],["body/classes/PostCreateRequestBody.html",[7,0.02,15,0.155,16,0.116,17,0.116,20,0.279,21,0.652,27,0.155,28,0.286,29,0.012,30,0.012,31,0.924,35,0.489,38,1.598,40,0.902,43,1.554,46,1.328,47,1.577,48,1.557,70,2.003,79,0.953,81,2.104,83,2.249,84,2.592,86,1.403,87,1.328,93,1.987,100,1.905,102,2.108,116,0.915,117,1.133,125,1.604,147,1.961,174,1.183,197,1.076,208,1.678,216,1.791,238,0.794,244,1.133,286,4.449,303,3.193,310,2.255,334,2.945,339,2.376,365,1.258,367,1.791,429,3.407,430,2.255,431,3.707,432,3.707,433,3.87,434,3.252,435,3.252,436,3.252,437,1.577,438,1.791,439,4.082,440,4.685,441,1.921,442,3.625,443,1.921,444,1.921,445,2.758,446,2.255,447,2.935,448,2.255,449,2.483,450,2.483,451,1.921,452,2.255,453,2.483,454,2.483,455,2.483,456,2.483,457,3.435,458,2.483,459,3.516,460,2.483,461,2.483,462,2.483,463,2.483,464,2.483,465,3.516,466,2.483,467,2.483,468,2.483,469,2.483,470,3.516,471,3.516,472,2.483,473,2.483,474,2.483,475,3.516,476,2.483,477,2.483]],["title/classes/PostDetailsQueryParams.html",[28,0.196,447,2.327]],["body/classes/PostDetailsQueryParams.html",[7,0.02,15,0.158,16,0.118,17,0.118,20,0.281,21,0.661,27,0.158,28,0.289,29,0.012,30,0.012,31,0.941,35,0.498,38,1.394,40,0.787,43,1.545,46,1.352,47,1.605,48,1.566,70,2.015,79,0.832,81,2.131,83,2.267,84,2.261,86,1.429,87,1.352,93,2.012,100,1.916,102,2.12,116,0.926,117,1.153,125,1.624,147,1.981,174,1.198,197,1.095,208,2.785,216,1.824,238,0.809,244,1.153,286,4.465,303,3.233,310,2.295,334,1.824,339,2.406,365,1.281,367,1.824,429,2.972,430,2.295,431,2.295,432,2.295,433,3.89,437,1.605,438,1.824,439,4.122,440,4.716,441,1.956,442,3.649,443,1.956,444,1.956,445,2.785,446,2.295,447,3.441,448,3.743,449,2.528,450,2.528,451,1.956,452,2.295,453,2.528,454,2.528,455,2.528,456,2.528,457,3.462,458,2.528,459,3.56,460,2.528,461,2.528,462,2.528,463,2.528,464,2.528,465,3.56,466,2.528,467,2.528,468,2.528,469,2.528,470,3.56,471,3.56,472,2.528,473,2.528,474,2.528,475,3.56,476,2.528,477,2.528,478,3.31,479,3.31]],["title/classes/PostEntity.html",[28,0.196,244,1.272]],["body/classes/PostEntity.html",[7,0.02,15,0.154,16,0.115,17,0.115,20,0.222,27,0.154,28,0.245,29,0.012,30,0.012,35,0.483,38,2.102,40,1.186,43,1.347,78,1.473,79,1.254,116,1.148,117,1.119,125,1.59,155,3.685,156,3.685,166,1.01,197,1.757,205,2.879,208,2.74,238,0.785,240,1.51,241,2.9,242,2.355,243,2.355,244,2.324,245,2.754,250,2.355,251,1.77,252,1.77,253,3.137,254,1.898,255,1.77,256,1.898,257,1.77,258,1.77,259,1.898,260,1.77,262,1.558,263,3.416,264,2.91,324,2.227,325,2.453,328,3.685,329,3.682,330,2.754,331,2.453,332,3.485,333,4.626,334,2.925,335,5.441,336,4.553,337,5.441,338,3.914,339,2.74,340,3.914,341,3.416,342,4.553,343,3.914,344,4.553,345,3.682,346,3.914,347,4.054,348,3.914,349,3.682,480,3.212,481,3.212,482,3.212,483,3.914,484,3.212,485,3.212,486,4.565,487,3.212,488,3.212,489,3.212,490,2.754,491,3.212]],["title/controllers/PostsController.html",[31,1.038,451,2.157]],["body/controllers/PostsController.html",[7,0.02,15,0.131,16,0.098,17,0.098,20,0.267,21,0.577,27,0.131,28,0.26,29,0.011,30,0.011,31,0.78,33,1.061,35,0.413,36,1.418,38,1.796,40,1.014,42,2.204,43,1.566,46,1.12,47,1.33,48,1.468,68,1.749,70,2.245,77,2.453,78,1.395,79,1.071,80,2.093,81,1.86,82,2.674,83,2.324,84,1.974,86,1.184,87,1.12,93,1.757,100,1.796,102,1.988,116,1.067,117,0.956,147,2.204,174,1.046,197,0.908,208,1.416,216,1.511,226,1.903,244,0.956,280,3.108,281,3.108,286,4.467,289,2.353,303,2.823,310,1.903,334,1.511,339,2.504,365,1.061,367,1.511,429,3.422,430,1.903,431,1.903,432,1.903,433,3.388,437,1.33,438,1.511,439,4.1,440,4.983,441,1.621,442,3.388,443,1.621,444,1.621,445,2.504,446,1.903,447,3.422,448,1.903,449,2.095,450,2.095,451,2.405,452,3.365,453,2.095,454,3.108,455,2.095,456,2.095,457,3.172,458,3.706,459,3.108,460,2.095,461,2.095,462,2.095,463,2.095,464,2.095,465,3.108,466,2.095,467,2.095,468,2.095,469,2.095,470,3.108,471,3.108,472,2.095,473,2.095,474,2.095,475,3.108,476,2.095,477,2.095,492,3.491,493,4.071,494,2.744,495,2.744,496,2.744,497,2.744,498,2.744,499,2.744,500,2.744,501,2.744,502,2.744,503,2.744,504,2.744,505,2.744,506,2.744,507,2.744,508,2.744]],["title/modules/PostsModule.html",[0,0.892,10,2.327]],["body/modules/PostsModule.html",[0,1.449,2,1.743,3,2.559,7,0.02,9,4.197,10,4.643,12,2.875,13,2.304,14,2.171,15,0.227,16,0.17,17,0.17,19,3.059,20,0.296,21,0.673,27,0.227,28,0.255,29,0.015,30,0.015,33,2.294,56,3.266,114,2.807,115,2.171,244,1.655,444,2.807,445,3.665,446,3.295,451,3.819,509,4.074,510,4.752,511,4.074,512,4.752,513,4.752,514,4.752,515,4.752]],["title/classes/PostsRepository.html",[28,0.196,516,2.532]],["body/classes/PostsRepository.html",[7,0.019,15,0.262,16,0.196,17,0.196,20,0.27,27,0.262,28,0.294,29,0.017,30,0.017,138,3.551,166,1.725,238,1.34,240,2.141,244,1.911,275,4.19,444,3.242,516,4.487,517,4.705,518,5.487]],["title/injectables/PostsService.html",[60,1.34,445,1.884]],["body/injectables/PostsService.html",[7,0.02,15,0.1,16,0.075,17,0.075,20,0.235,21,0.295,27,0.1,28,0.112,29,0.009,30,0.009,35,0.313,36,1.148,40,0.987,42,2.07,43,1.614,47,1.598,48,1.378,60,1.209,61,1.231,70,2.189,77,2.388,78,1.358,79,1.141,80,2.037,82,1.148,83,2.544,88,2.07,93,2.006,100,1.748,102,2.04,106,1.693,115,0.952,116,0.923,117,0.726,131,2.778,134,1.947,147,2.348,160,1.231,162,1.591,173,2.314,174,1.051,186,1.591,197,1.935,199,2.11,208,2.613,219,3.867,226,1.445,227,2.826,233,2.611,244,1.148,280,2.517,281,2.517,286,4.01,291,1.591,292,3.332,301,3.122,302,4.342,307,1.075,308,1.786,309,1.786,334,1.148,339,2.778,341,1.231,345,1.445,347,3.867,349,3.512,357,1.591,368,1.591,414,1.445,431,3.734,432,3.512,437,1.01,444,1.231,445,1.701,448,3.512,452,2.835,492,2.826,516,3.911,519,1.786,520,4.089,521,3.296,522,4.089,523,2.083,524,2.083,525,2.083,526,3.506,527,2.083,528,3.296,529,2.083,530,2.083,531,2.083,532,3.296,533,3.296,534,2.083,535,3.296,536,2.083,537,2.083,538,2.083,539,3.296,540,2.083,541,2.083,542,2.083,543,2.517,544,1.786,545,2.083,546,2.083,547,1.786,548,1.786,549,1.786,550,3.296,551,2.083,552,2.083,553,2.083,554,2.083,555,2.083,556,2.083,557,2.083,558,2.083,559,2.083,560,2.083,561,2.083,562,2.083,563,2.083,564,2.083,565,2.083,566,2.083,567,2.083,568,2.083,569,2.083,570,2.083,571,2.083,572,2.083,573,2.083,574,2.083,575,2.083,576,2.517,577,2.083,578,1.445,579,2.083,580,3.296,581,3.296,582,1.786,583,2.826,584,1.786,585,2.083,586,2.083,587,2.083,588,2.083,589,3.296,590,2.083,591,2.083,592,2.083,593,3.296,594,2.083,595,3.296,596,2.083,597,2.083,598,2.083,599,2.083,600,2.083]],["title/modules/ProdDbModule.html",[0,0.892,54,2.157]],["body/modules/ProdDbModule.html",[0,1.672,2,1.513,7,0.02,15,0.197,16,0.148,17,0.148,19,2.794,20,0.295,21,0.584,27,0.259,28,0.29,29,0.014,30,0.014,54,3.2,79,0.966,90,2.211,91,1.987,113,4.617,114,2.437,115,1.885,116,1.201,117,1.437,119,2.763,121,3.331,205,2.61,237,3.12,244,2.106,261,2.629,292,2.437,360,3.149,379,2.629,578,3.755,601,3.537,602,5.092,603,4.135,604,3.537,605,3.331,606,2.86,607,2.86,608,4.644,609,4.644,610,4.135,611,4.135,612,3.149,613,4.644,614,4.644,615,4.644,616,4.644,617,4.644,618,3.537,619,3.149,620,3.537,621,3.537,622,2.86]],["title/guards/RequiredAuthGuard.html",[365,1.412,391,2.788]],["body/guards/RequiredAuthGuard.html",[7,0.02,15,0.192,16,0.144,17,0.144,20,0.222,21,0.57,27,0.255,28,0.32,29,0.014,30,0.014,35,0.605,36,1.856,40,0.679,42,1.477,47,1.952,48,1.554,60,2.192,70,2.08,77,1.644,78,0.935,79,0.718,80,1.402,88,2.192,89,2.218,93,2.579,100,1.786,102,1.332,106,1.879,131,2.077,147,2.334,161,2.791,173,2.73,174,1.37,205,2.3,240,1.977,307,2.077,365,2.062,392,2.566,393,3.074,394,2.791,395,4.054,396,5.051,397,4.562,398,4.714,400,2.791,401,3.074,402,3.074,403,3.074,404,3.074,405,2.791,406,3.074,407,3.074,408,4.07,409,3.696,410,4.07,411,3.074,412,3.074,413,3.074,414,2.791,415,2.791,416,4.07,417,3.074,418,4.07,419,3.074,420,2.791,623,4.026]],["title/classes/SessionsEntity.html",[28,0.196,121,2.011]],["body/classes/SessionsEntity.html",[7,0.02,15,0.208,16,0.156,17,0.156,20,0.259,27,0.208,28,0.233,29,0.015,30,0.015,35,0.654,38,2.027,40,1.144,43,1.368,78,1.01,79,1.209,116,1.113,117,1.515,121,3.088,125,1.952,146,3.38,147,2.057,166,1.367,174,1.594,197,1.854,205,2.419,238,1.062,240,1.854,241,3.173,242,2.892,243,2.892,250,2.892,251,2.395,252,2.395,253,3.665,254,2.569,255,2.395,256,2.569,257,2.395,258,2.395,259,2.569,260,2.395,262,2.109,263,3.312,264,3.573,328,3.954,424,3.32,624,3.729,625,4.348,626,4.806,627,4.348,628,4.348,629,4.348]],["title/modules/TestDbModule.html",[0,0.892,622,2.532]],["body/modules/TestDbModule.html",[0,1.671,2,1.51,7,0.02,15,0.197,16,0.147,17,0.147,19,2.79,20,0.295,21,0.583,27,0.258,28,0.29,29,0.014,30,0.014,54,2.431,79,0.964,90,2.208,91,1.984,113,4.612,114,2.431,115,1.881,116,1.2,117,1.433,119,2.76,121,3.327,205,2.607,237,3.116,244,2.104,261,2.623,292,2.431,360,3.142,379,2.623,578,3.75,601,3.529,602,5.088,603,3.142,604,3.529,605,3.327,606,2.854,607,2.854,608,4.637,609,4.637,610,4.129,611,4.129,612,3.142,613,4.637,614,4.637,615,4.637,616,4.637,617,4.637,618,4.637,619,4.129,620,3.529,621,3.529,622,3.75]],["title/classes/TokenAuthorizer.html",[28,0.196,395,2.327]],["body/classes/TokenAuthorizer.html",[7,0.02,15,0.187,16,0.14,17,0.14,20,0.219,21,0.556,27,0.25,28,0.316,29,0.014,30,0.014,35,0.59,36,1.825,40,0.884,42,1.439,47,1.902,48,1.538,60,2.164,70,2.062,77,2.139,78,1.216,79,0.934,80,1.825,88,2.476,89,2.161,93,2.546,100,1.763,102,1.298,106,1.855,131,2.024,134,2.318,147,2.31,161,2.72,173,2.696,174,1.346,205,2.261,238,0.958,240,1.733,307,2.024,365,1.518,392,2.501,394,2.72,395,4.012,396,4.504,397,4,398,4.679,400,2.72,401,2.995,402,2.995,403,4.504,404,4,405,2.72,406,2.995,407,2.995,408,4,409,3.633,410,4,411,2.995,412,2.995,413,2.995,414,2.72,415,2.72,416,4,417,2.995,418,4,419,2.995,420,2.72,630,5.239,631,3.923,632,3.923,633,3.923]],["title/classes/UserCreateRequestBody.html",[28,0.196,634,2.327]],["body/classes/UserCreateRequestBody.html",[7,0.02,15,0.138,16,0.103,17,0.103,20,0.264,21,0.599,27,0.138,28,0.268,29,0.011,30,0.011,31,0.82,35,0.434,38,1.75,40,0.988,43,1.593,46,1.178,48,1.583,70,2.038,78,1.277,79,1.044,80,2.131,81,2.284,83,1.634,84,2.839,86,1.245,87,1.178,90,2.246,91,2.019,100,1.829,102,2.024,106,1.572,116,1.093,125,1.471,146,2.579,147,2.378,160,1.705,173,2.284,174,1.816,199,2.18,216,1.59,238,0.705,365,1.116,367,1.59,433,4.024,437,1.399,438,1.59,441,1.705,442,3.614,443,1.705,457,3.459,634,3.186,635,2.001,636,3.815,637,3.815,638,2.885,639,2.885,640,2.885,641,2.885,642,2.885,643,2.203,644,2.001,645,2.203,646,1.59,647,2.18,648,2.001,649,2.693,650,2.203,651,2.203,652,1.705,653,2.203,654,2.203,655,2.203,656,2.203,657,2.929,658,2.203,659,2.203,660,2.203,661,2.203,662,3.226,663,2.203,664,2.203,665,2.203,666,2.203,667,2.203,668,3.816,669,3.226,670,2.203,671,2.203,672,2.203,673,1.839,674,2.203,675,2.203,676,2.203,677,3.507,678,3.815,679,3.226,680,2.203,681,2.203,682,2.203,683,3.226,684,2.203,685,2.203,686,2.203,687,2.203,688,2.203]],["title/classes/UserEntity.html",[28,0.196,116,0.725]],["body/classes/UserEntity.html",[7,0.02,15,0.157,16,0.117,17,0.117,20,0.224,27,0.157,28,0.176,29,0.012,30,0.012,35,0.493,38,2.09,40,1.18,43,1.504,78,1.429,79,1.247,80,2.033,90,2.193,91,1.204,116,0.92,119,2.667,125,1.614,155,3.72,156,4.073,166,1.032,185,4.101,197,1.533,205,3.046,238,0.801,240,1.533,241,2.92,242,2.391,243,2.391,250,2.391,251,1.807,252,1.807,253,3.174,254,1.938,255,1.807,256,1.938,257,1.807,258,1.807,259,1.938,260,1.807,262,1.591,295,4.457,328,4.186,329,2.275,331,4.701,332,3.538,333,4.269,341,3.448,379,2.091,385,4.606,386,4.606,390,4.606,422,4.606,483,3.973,490,2.813,626,3.973,636,3.725,637,3.725,689,2.813,690,3.281,691,3.281,692,4.633,693,3.281,694,4.633,695,3.281,696,4.633,697,3.281,698,3.973,699,3.973,700,3.281,701,3.281,702,3.281,703,4.633,704,3.281,705,4.633,706,4.633,707,3.281,708,3.281,709,3.281,710,3.281]],["title/classes/UserFollowingEntity.html",[28,0.196,605,2.011]],["body/classes/UserFollowingEntity.html",[7,0.02,15,0.202,16,0.151,17,0.151,20,0.255,27,0.202,28,0.227,29,0.014,30,0.014,35,0.636,38,2.009,40,1.134,43,0.933,78,1.278,79,1.199,116,1.394,125,1.917,166,1.33,197,1.821,238,1.033,240,1.821,241,3.149,242,2.84,243,2.84,250,2.84,251,2.329,252,2.329,253,3.616,254,2.498,255,2.329,256,2.498,257,2.329,258,2.329,259,2.498,260,2.329,262,2.051,263,3.616,264,3.901,307,2.182,424,4.203,605,3.032,606,4.244,646,2.329,677,4.132,699,3.626,711,3.626,712,5.559,713,4.229,714,4.229,715,4.229,716,4.229,717,4.229,718,3.626,719,4.229,720,4.229,721,4.229,722,4.229,723,4.229]],["title/classes/UserUpdateRequestBody.html",[28,0.196,649,2.327]],["body/classes/UserUpdateRequestBody.html",[7,0.02,15,0.14,16,0.105,17,0.105,20,0.265,21,0.604,27,0.14,28,0.27,29,0.011,30,0.011,31,0.831,35,0.44,38,1.654,40,0.934,43,1.589,46,1.193,48,1.589,70,2.045,78,1.285,79,0.987,80,2.265,81,2.301,83,1.649,84,2.441,86,1.261,87,1.193,90,1.741,91,2.031,100,1.837,102,2.033,106,1.583,116,1.099,125,1.485,146,2.597,147,2.386,160,1.726,173,2.301,174,1.82,199,2.2,216,1.61,238,0.714,365,1.13,367,1.61,433,4.08,437,1.417,438,1.61,441,1.726,442,3.63,443,1.726,457,3.477,634,2.718,635,2.026,636,3.838,637,3.838,643,2.231,644,2.026,645,2.231,646,1.61,647,2.2,648,2.026,649,3.209,650,2.231,651,2.231,652,1.726,653,2.231,654,2.231,655,2.231,656,2.231,657,2.957,658,2.231,659,2.231,660,2.231,661,2.231,662,3.256,663,2.231,664,2.231,665,2.231,666,2.231,667,2.231,668,3.844,669,3.256,670,2.231,671,2.231,672,2.231,673,1.863,674,2.231,675,2.231,676,2.231,677,3.528,678,3.838,679,3.256,680,2.231,681,2.231,682,2.231,683,3.256,684,2.231,685,2.231,686,2.231,687,2.231,688,2.231,724,2.922,725,2.922,726,2.922,727,2.922]],["title/controllers/UsersController.html",[31,1.038,652,2.157]],["body/controllers/UsersController.html",[7,0.02,15,0.117,16,0.088,17,0.088,20,0.25,21,0.529,27,0.117,28,0.243,29,0.01,30,0.01,31,0.696,33,0.947,35,0.368,36,1.301,38,1.845,40,1.041,42,2.264,43,1.591,46,1,48,1.508,68,1.561,70,2.269,77,2.35,78,1.433,79,1.026,80,2.004,81,2.071,83,1.753,84,2.197,86,1.057,87,1,90,1.85,91,1.371,100,1.72,102,1.904,106,1.425,116,1.282,146,2.969,147,2.54,160,1.447,173,2.071,174,1.765,199,1.928,216,1.349,365,0.947,367,1.349,433,3.646,437,1.187,438,1.349,441,1.447,442,3.4,443,1.447,457,3.226,634,3.232,635,1.698,636,2.591,637,2.591,643,1.87,644,1.698,645,1.87,646,1.349,647,1.928,648,1.698,649,3.232,650,1.87,651,1.87,652,2.208,653,1.87,654,2.853,655,1.87,656,1.87,657,2.591,658,2.853,659,1.87,660,1.87,661,3.46,662,3.46,663,1.87,664,1.87,665,1.87,666,3.46,667,2.853,668,3.46,669,3.871,670,1.87,671,1.87,672,1.87,673,1.561,674,1.87,675,1.87,676,3.46,677,3.668,678,4.279,679,2.853,680,1.87,681,1.87,682,3.46,683,2.853,684,1.87,685,1.87,686,3.871,687,1.87,688,3.871,728,1.87,729,3.204,730,3.204,731,2.449,732,2.449,733,2.449,734,2.449,735,2.449,736,2.449,737,2.449,738,2.449,739,2.449,740,2.1,741,2.449,742,2.1,743,2.449,744,2.449,745,2.449,746,2.449,747,2.449,748,2.449,749,2.449]],["title/modules/UsersModule.html",[0,0.892,11,2.327]],["body/modules/UsersModule.html",[0,1.449,2,1.743,3,2.559,7,0.02,11,4.528,12,2.875,13,2.304,14,2.171,15,0.227,16,0.17,17,0.17,19,2.452,20,0.301,21,0.673,27,0.227,28,0.255,29,0.015,30,0.015,33,2.294,56,3.266,114,2.807,115,2.171,116,0.944,119,2.71,174,1.221,379,3.029,605,3.266,607,3.295,646,2.618,647,3.665,648,3.295,652,3.819,750,4.074,751,4.074,752,4.752,753,4.752,754,4.752]],["title/classes/UsersRepository.html",[28,0.196,136,2.327]],["body/classes/UsersRepository.html",[7,0.019,15,0.262,16,0.196,17,0.196,20,0.27,27,0.262,28,0.294,29,0.017,30,0.017,116,1.09,136,4.125,138,3.551,166,1.725,238,1.34,240,2.141,275,4.19,646,3.023,755,4.705,756,5.487]],["title/injectables/UsersService.html",[60,1.34,647,1.884]],["body/injectables/UsersService.html",[7,0.02,15,0.113,16,0.085,17,0.085,20,0.247,21,0.335,27,0.113,28,0.127,29,0.009,30,0.009,35,0.356,36,1.267,40,0.997,42,2.297,43,1.539,48,1.386,60,1.335,61,1.397,70,2.194,77,2.414,78,1.373,79,1.054,80,2.059,82,2.004,88,2.169,90,1.81,91,1.627,100,1.606,102,2.071,106,1.565,115,1.08,116,1.174,131,2.287,134,2.149,135,2.027,136,3.173,138,2.568,141,3.119,146,2.928,147,2.386,160,1.397,162,1.805,166,0.743,167,2.027,170,5.328,173,2.026,174,1.832,182,3.801,197,1.203,199,3.05,219,1.805,225,3.119,291,1.805,292,2.619,301,1.805,368,1.805,437,1.764,526,4.866,543,2.777,576,3.385,605,1.302,607,1.639,646,1.302,647,1.877,657,2.522,673,1.507,677,3.617,678,3.935,712,5.069,729,3.119,730,3.119,740,3.119,742,3.119,757,2.027,758,4.433,759,4.433,760,4.433,761,4.433,762,4.433,763,2.364,764,2.364,765,2.364,766,3.637,767,2.364,768,2.364,769,5.233,770,4.978,771,2.364,772,2.364,773,2.364,774,2.364,775,2.364,776,4.433,777,2.364,778,3.637,779,2.364,780,2.364,781,2.364,782,3.801,783,2.364,784,3.637,785,3.637,786,2.364,787,3.637,788,2.364,789,3.637,790,2.364,791,2.364,792,3.637,793,2.364,794,2.364,795,2.364,796,2.364,797,2.364,798,2.027,799,2.364,800,2.364,801,2.364,802,2.027]],["title/classes/YooBaseEntity.html",[28,0.196,241,1.668]],["body/classes/YooBaseEntity.html",[7,0.02,15,0.224,16,0.168,17,0.168,20,0.196,27,0.224,28,0.251,29,0.015,30,0.015,35,0.706,38,1.921,40,1.084,43,1.297,78,1.366,79,1.146,125,2.049,166,1.475,197,2.126,238,1.146,241,2.688,242,3.316,243,3.316,250,3.476,251,2.584,252,3.24,255,3.24,257,2.584,258,3.24,262,2.852,292,2.772,578,4.079,803,4.023,804,5.882,805,5.044,806,5.044,807,4.691,808,4.691,809,4.691,810,5.882,811,4.691,812,5.882,813,4.691]],["title/coverage.html",[814,3.461]],["body/coverage.html",[7,0.02,17,0.115,28,0.395,29,0.012,30,0.012,31,1.806,32,2.235,34,2.764,44,1.904,60,2.244,62,2.764,66,1.904,67,3.689,73,2.055,79,0.575,88,1.183,92,2.055,106,1.014,116,0.64,119,1.473,121,1.776,124,2.764,136,2.055,174,0.828,206,2.235,207,2.764,230,2.235,231,2.764,233,1.563,237,1.663,239,2.764,241,1.473,244,1.123,271,2.055,274,2.764,278,2.764,324,2.235,325,3.494,341,4.495,355,2.235,358,2.235,359,2.764,365,1.247,369,2.461,370,2.461,371,2.461,372,2.461,373,2.235,374,2.764,375,2.235,376,2.764,391,3.494,392,2.055,394,3.689,395,2.055,421,2.764,429,2.055,430,3.689,445,1.663,447,2.055,451,1.904,516,2.235,517,2.764,519,2.764,605,1.776,606,2.235,624,2.764,634,2.055,635,3.689,647,1.663,649,2.055,652,1.904,689,2.764,711,2.764,755,2.764,757,2.764,803,2.764,814,2.235,815,3.223,816,3.223,817,3.223,818,6.353,819,6.353,820,2.764,821,6.534,822,7.146,823,3.223,824,4.576,825,5.791,826,4.576,827,3.223,828,5.447,829,2.764,830,4.576,831,2.764,832,3.223,833,2.764,834,3.223,835,3.223,836,4.576,837,3.223,838,3.223,839,3.223,840,3.223]],["title/dependencies.html",[3,1.896,841,3.045]],["body/dependencies.html",[3,2.204,7,0.02,21,0.724,29,0.016,30,0.016,87,2.085,115,2.334,164,4.379,166,1.606,842,6.674,843,5.107,844,5.107,845,6.674,846,5.107,847,5.107,848,5.107,849,5.107,850,5.107,851,5.107,852,5.107,853,5.107,854,5.107,855,6.199,856,5.107,857,5.107,858,5.107,859,5.107,860,5.107,861,5.107,862,5.107,863,5.107,864,5.107,865,5.107,866,5.107]],["title/miscellaneous/functions.html",[867,2.111,868,3.767]],["body/miscellaneous/functions.html",[7,0.017,29,0.017,30,0.017,35,0.872,831,4.971,833,6.036,867,4.02,868,4.971,869,5.797]],["title/index.html",[35,0.458,870,2.611,871,2.611]],["body/index.html",[7,0.02,16,0.13,29,0.013,30,0.013,69,3.106,83,2.55,91,1.329,174,0.931,199,1.869,208,2.922,226,4.224,334,1.995,339,1.869,345,2.512,349,2.512,381,4.256,437,2.746,438,2.734,549,4.856,576,3.79,583,3.106,584,3.106,602,4.324,603,2.766,610,2.766,611,2.766,612,3.79,644,2.512,728,4.324,814,2.512,872,5.663,873,5.663,874,4.964,875,3.622,876,3.622,877,3.106,878,3.622,879,3.622,880,3.622,881,3.622,882,3.622,883,3.622,884,3.622,885,3.106,886,3.106,887,3.622,888,3.622,889,3.622,890,3.106,891,4.964,892,4.964,893,3.622,894,3.622,895,5.663,896,3.622,897,3.106,898,3.106,899,5.663,900,4.964,901,3.106,902,3.622,903,3.622,904,3.622,905,3.106,906,3.622,907,5.663,908,3.622,909,3.622,910,4.964,911,3.106,912,3.622,913,3.622,914,3.622,915,3.622,916,4.256,917,3.622,918,3.106,919,6.749,920,3.622,921,3.622,922,3.622,923,5.652,924,3.106,925,4.256,926,3.622,927,3.622,928,3.622,929,4.964,930,3.622,931,3.622,932,3.622,933,3.106,934,3.622,935,3.622,936,3.622,937,3.622,938,4.964,939,4.964,940,3.622,941,3.622,942,3.622,943,3.106,944,3.622,945,3.106,946,4.964,947,3.622,948,3.622,949,4.964,950,3.622,951,3.79,952,3.106,953,3.106,954,3.106,955,3.622]],["title/license.html",[870,2.611,871,2.611,951,2.325]],["body/license.html",[7,0.004,14,0.258,16,0.226,17,0.038,20,0.024,28,0.03,29,0.004,30,0.003,36,0.196,40,0.095,48,0.138,81,0.258,91,0.207,106,0.945,131,0.291,155,0.671,158,1.592,170,4.201,174,1.086,175,0.483,199,0.291,220,1.592,221,0.483,250,0.291,262,0.51,307,1.286,312,0.483,313,3.382,339,0.543,341,0.333,400,0.391,409,0.391,420,0.73,543,0.803,544,0.902,547,0.902,548,0.483,582,0.483,619,1.13,673,0.359,698,0.483,718,1.592,728,2.761,769,1.269,782,1.269,798,0.483,802,0.483,805,0.483,806,0.483,814,0.73,877,1.592,885,2.577,886,2.577,890,1.879,897,0.902,898,2.368,901,0.483,905,1.592,911,1.592,916,0.483,918,1.592,923,2.368,924,0.483,925,0.483,933,1.879,943,0.483,945,0.483,951,5.352,952,5.22,953,3.833,954,0.483,956,4.352,957,5.039,958,5.75,959,3.005,960,0.564,961,0.564,962,1.48,963,5.445,964,4.352,965,5.116,966,2.192,967,0.564,968,0.564,969,1.052,970,2.192,971,5.189,972,1.48,973,1.48,974,3.786,975,1.48,976,0.564,977,1.48,978,0.564,979,0.564,980,1.052,981,3.786,982,2.192,983,1.857,984,1.052,985,1.052,986,1.857,987,4.09,988,3.616,989,3.005,990,0.564,991,0.564,992,0.564,993,2.492,994,1.052,995,1.857,996,0.564,997,0.564,998,0.564,999,3.616,1000,6.055,1001,3.786,1002,1.48,1003,1.48,1004,0.564,1005,0.564,1006,1.857,1007,3.227,1008,0.564,1009,3.227,1010,5.876,1011,1.052,1012,4.872,1013,0.564,1014,2.192,1015,0.564,1016,0.564,1017,1.857,1018,0.564,1019,4.226,1020,0.564,1021,0.564,1022,0.564,1023,2.136,1024,3.43,1025,1.48,1026,3.616,1027,3.43,1028,2.192,1029,3.786,1030,0.564,1031,1.052,1032,0.564,1033,0.564,1034,1.48,1035,0.564,1036,0.564,1037,0.564,1038,3.1,1039,0.564,1040,1.052,1041,0.564,1042,0.564,1043,1.857,1044,3.786,1045,0.564,1046,1.052,1047,0.564,1048,0.564,1049,1.48,1050,3.227,1051,4.47,1052,0.564,1053,3.005,1054,3.005,1055,0.564,1056,4.683,1057,1.48,1058,0.564,1059,0.564,1060,0.564,1061,2.136,1062,1.857,1063,1.48,1064,1.48,1065,1.052,1066,0.564,1067,1.857,1068,1.857,1069,0.564,1070,1.48,1071,0.564,1072,2.492,1073,1.052,1074,1.052,1075,1.48,1076,0.564,1077,5.556,1078,3.944,1079,2.192,1080,2.192,1081,2.492,1082,0.564,1083,1.48,1084,4.683,1085,1.052,1086,3.786,1087,0.564,1088,0.564,1089,0.564,1090,6.944,1091,1.48,1092,3.43,1093,0.564,1094,0.564,1095,1.052,1096,2.492,1097,0.564,1098,1.052,1099,0.564,1100,3.43,1101,0.564,1102,1.857,1103,0.564,1104,1.052,1105,2.492,1106,6.022,1107,1.48,1108,3.227,1109,1.857,1110,1.052,1111,0.564,1112,1.052,1113,1.48,1114,3.227,1115,3.43,1116,1.857,1117,0.564,1118,1.857,1119,1.052,1120,1.857,1121,1.857,1122,0.564,1123,1.48,1124,0.564,1125,5.258,1126,1.052,1127,0.564,1128,3.005,1129,0.564,1130,1.48,1131,2.492,1132,0.564,1133,4.226,1134,1.48,1135,2.761,1136,1.052,1137,2.761,1138,3.616,1139,2.492,1140,0.564,1141,1.052,1142,0.564,1143,0.564,1144,2.761,1145,0.564,1146,3.944,1147,1.052,1148,0.564,1149,1.052,1150,0.564,1151,0.564,1152,0.564,1153,1.48,1154,0.564,1155,0.564,1156,0.564,1157,0.564,1158,3.616,1159,1.48,1160,4.177,1161,3.005,1162,1.857,1163,0.564,1164,0.564,1165,0.564,1166,1.48,1167,1.052,1168,3.43,1169,0.564,1170,1.052,1171,2.492,1172,0.564,1173,0.564,1174,2.192,1175,1.48,1176,1.48,1177,2.761,1178,1.48,1179,1.48,1180,0.564,1181,0.564,1182,2.192,1183,2.192,1184,2.492,1185,0.564,1186,0.564,1187,1.48,1188,0.564,1189,0.564,1190,1.857,1191,0.564,1192,0.564,1193,0.564,1194,1.052,1195,0.564,1196,5.324,1197,1.052,1198,0.564,1199,1.48,1200,3.005,1201,0.564,1202,2.492,1203,3.616,1204,1.052,1205,1.857,1206,0.564,1207,0.564,1208,1.052,1209,2.192,1210,1.052,1211,1.857,1212,0.564,1213,0.564,1214,0.564,1215,0.564,1216,1.052,1217,2.192,1218,0.564,1219,1.269,1220,1.052,1221,0.564,1222,0.564,1223,2.192,1224,1.857,1225,0.564,1226,1.857,1227,0.564,1228,3.43,1229,2.761,1230,1.857,1231,0.564,1232,2.192,1233,0.564,1234,1.052,1235,0.564,1236,0.564,1237,1.052,1238,0.564,1239,0.564,1240,0.564,1241,1.48,1242,1.48,1243,2.492,1244,0.564,1245,1.052,1246,0.564,1247,1.052,1248,1.052,1249,1.052,1250,0.564,1251,3.944,1252,1.052,1253,0.564,1254,0.564,1255,0.564,1256,0.564,1257,0.564,1258,0.564,1259,1.48,1260,0.564,1261,0.564,1262,4.226,1263,0.564,1264,0.564,1265,0.564,1266,0.564,1267,2.192,1268,2.492,1269,0.564,1270,0.564,1271,1.48,1272,0.564,1273,0.564,1274,1.857,1275,0.564,1276,1.269,1277,0.564,1278,0.564,1279,0.564,1280,0.564,1281,0.564,1282,0.564,1283,1.052,1284,0.564,1285,1.48,1286,0.564,1287,0.564,1288,1.052,1289,0.564,1290,0.564,1291,0.564,1292,0.564,1293,0.564,1294,1.052,1295,1.052,1296,1.052,1297,3.227,1298,1.857,1299,0.564,1300,2.492,1301,0.564,1302,0.564,1303,1.052,1304,1.48,1305,1.48,1306,1.857,1307,1.857,1308,1.48,1309,1.857,1310,1.857,1311,0.564,1312,2.192,1313,2.192,1314,1.269,1315,0.564,1316,1.48,1317,0.902,1318,0.564,1319,1.052,1320,0.564,1321,1.052,1322,2.192,1323,1.052,1324,1.857,1325,1.857,1326,1.857,1327,0.564,1328,1.48,1329,4.09,1330,2.192,1331,0.564,1332,2.761,1333,0.564,1334,1.48,1335,2.761,1336,1.48,1337,1.48,1338,1.052,1339,0.564,1340,0.564,1341,0.564,1342,0.564,1343,1.48,1344,0.564,1345,0.564,1346,0.564,1347,1.48,1348,0.564,1349,0.564,1350,1.052,1351,0.564,1352,0.564,1353,1.052,1354,0.483,1355,0.564,1356,1.48,1357,0.564,1358,0.564,1359,1.48,1360,1.052,1361,2.492,1362,4.872,1363,1.48,1364,1.052,1365,1.052,1366,1.052,1367,1.052,1368,1.857,1369,1.857,1370,1.052,1371,0.564,1372,0.564,1373,0.564,1374,0.564,1375,0.564,1376,2.492,1377,2.492,1378,1.052,1379,0.564,1380,0.564,1381,0.564,1382,0.564,1383,1.052,1384,0.564,1385,1.052,1386,0.564,1387,2.192,1388,0.564,1389,0.564,1390,3.616,1391,1.052,1392,0.564,1393,0.564,1394,0.564,1395,0.564,1396,0.564,1397,0.564,1398,1.052,1399,0.564,1400,1.48,1401,1.857,1402,1.052,1403,0.564,1404,0.564,1405,0.564,1406,0.564,1407,0.564,1408,1.052,1409,0.564,1410,0.564,1411,0.564,1412,1.857,1413,0.564,1414,1.052,1415,0.564,1416,1.052,1417,0.564,1418,0.564,1419,0.564,1420,0.564,1421,0.564,1422,0.564,1423,1.857,1424,0.564,1425,0.564,1426,0.564,1427,0.564,1428,0.564,1429,0.564,1430,0.564,1431,1.48,1432,0.564,1433,0.564,1434,0.564,1435,0.564,1436,0.564,1437,2.192,1438,0.564,1439,0.564,1440,0.564,1441,0.564,1442,1.857,1443,0.564,1444,0.564,1445,0.564,1446,0.564,1447,0.564,1448,0.564,1449,0.564,1450,2.761,1451,1.48,1452,0.564,1453,1.857,1454,0.564,1455,0.564,1456,1.48,1457,0.564,1458,0.564,1459,1.48,1460,0.564,1461,1.052,1462,1.052,1463,0.564,1464,0.564,1465,0.564,1466,0.564,1467,0.564,1468,0.564,1469,0.564,1470,0.564,1471,0.564,1472,0.564,1473,0.564,1474,1.052,1475,0.564,1476,0.564,1477,0.564,1478,1.052,1479,1.052,1480,0.564,1481,0.564,1482,1.857,1483,0.564,1484,1.48,1485,1.052,1486,0.564,1487,1.052,1488,1.48,1489,1.48,1490,0.564,1491,1.052,1492,0.564,1493,1.48,1494,2.761,1495,0.564,1496,1.48,1497,1.48,1498,0.564,1499,0.564,1500,0.564,1501,0.564,1502,0.564,1503,0.564,1504,0.564,1505,1.052,1506,0.564,1507,1.052,1508,1.857,1509,1.48,1510,0.564,1511,0.564,1512,0.564,1513,0.564,1514,0.564,1515,0.564,1516,0.564,1517,1.052,1518,1.052,1519,1.052,1520,1.48,1521,0.564,1522,1.052,1523,1.052,1524,0.564,1525,1.052,1526,1.48,1527,0.564,1528,1.052,1529,0.564,1530,1.48,1531,0.564,1532,1.052,1533,0.564,1534,0.564,1535,0.564,1536,1.052,1537,5.039,1538,1.48,1539,0.564,1540,2.192,1541,3.43,1542,1.48,1543,0.564,1544,0.564,1545,0.564,1546,0.564,1547,1.857,1548,0.564,1549,0.564,1550,1.48,1551,0.564,1552,1.052,1553,0.564,1554,0.564,1555,0.564,1556,0.564,1557,1.857,1558,0.564,1559,0.564,1560,0.564,1561,0.564,1562,0.564,1563,1.857,1564,1.052,1565,1.052,1566,0.564,1567,0.564,1568,1.48,1569,0.564,1570,1.052,1571,1.48,1572,0.564,1573,1.052,1574,0.564,1575,0.564,1576,0.564,1577,0.564,1578,1.052,1579,1.48,1580,0.564,1581,0.564,1582,0.564,1583,0.564,1584,1.052,1585,0.564,1586,0.564,1587,0.564,1588,0.564,1589,0.564,1590,0.564,1591,1.48,1592,1.052,1593,0.564,1594,0.564,1595,0.564,1596,1.857,1597,0.564,1598,1.48,1599,0.564,1600,0.564,1601,0.564,1602,1.052,1603,0.564,1604,0.564,1605,0.564,1606,1.48,1607,1.052,1608,1.052,1609,0.564,1610,1.052,1611,2.761,1612,1.052,1613,1.48,1614,1.857,1615,0.564,1616,0.564,1617,1.052,1618,0.564,1619,1.48,1620,0.564,1621,1.052,1622,0.564,1623,0.564,1624,0.564,1625,0.564,1626,0.564,1627,1.052,1628,1.48,1629,1.052,1630,0.564,1631,1.052,1632,0.564,1633,0.564,1634,0.564,1635,1.052,1636,1.052,1637,0.564,1638,1.052,1639,0.564,1640,0.564,1641,0.564,1642,0.564,1643,1.48,1644,0.564,1645,0.564,1646,0.564,1647,0.564,1648,1.052,1649,1.857,1650,1.052,1651,1.48,1652,0.564,1653,0.564,1654,0.564,1655,0.564,1656,1.052,1657,0.564,1658,0.564,1659,0.564,1660,0.564,1661,0.564,1662,0.564,1663,0.564,1664,0.564,1665,0.564,1666,0.564,1667,0.564,1668,0.564,1669,0.564,1670,0.564,1671,0.564,1672,1.857,1673,0.564,1674,0.564,1675,0.564,1676,1.052,1677,0.564,1678,0.564,1679,0.564,1680,0.564,1681,0.564,1682,0.564,1683,0.564,1684,0.564,1685,0.564,1686,0.564,1687,1.052,1688,0.564,1689,0.564,1690,1.052,1691,0.564,1692,0.564,1693,0.564,1694,0.564,1695,0.564,1696,1.052,1697,0.564,1698,0.564,1699,1.052,1700,0.564,1701,0.564,1702,0.564,1703,0.564,1704,0.564,1705,0.564,1706,0.564,1707,0.564,1708,1.052,1709,1.052,1710,2.192,1711,0.564,1712,0.564,1713,1.052,1714,0.564,1715,0.564,1716,0.564,1717,0.564,1718,1.48,1719,1.052,1720,0.564,1721,1.052,1722,1.052,1723,1.052,1724,0.564,1725,0.564,1726,0.564,1727,0.564,1728,0.564,1729,0.564,1730,1.052,1731,0.564,1732,0.564,1733,0.564,1734,1.052,1735,0.564,1736,0.564,1737,1.48,1738,0.564,1739,0.564,1740,0.564,1741,0.564,1742,0.564,1743,0.564,1744,0.564,1745,0.564,1746,0.564,1747,0.564,1748,0.564,1749,1.052,1750,0.564,1751,0.564,1752,0.564,1753,0.564,1754,1.052,1755,0.564,1756,0.564,1757,0.564,1758,0.564,1759,0.564,1760,0.564,1761,0.564,1762,0.564,1763,0.564,1764,0.564,1765,0.564,1766,0.564,1767,0.564,1768,0.564,1769,0.564,1770,0.564,1771,1.052,1772,1.052,1773,0.564,1774,0.564,1775,0.564,1776,0.564,1777,0.564,1778,0.564,1779,0.564,1780,0.564,1781,0.564,1782,0.564,1783,0.564,1784,0.564,1785,0.564,1786,0.564,1787,0.564,1788,0.564,1789,0.564,1790,0.564,1791,0.564,1792,0.564,1793,0.564,1794,0.564,1795,0.564,1796,0.564,1797,0.564]],["title/modules.html",[2,1.831]],["body/modules.html",[1,3.237,2,1.864,6,3.237,7,0.016,8,3.237,9,3.001,10,3.237,11,3.237,29,0.016,30,0.016,50,3.522,54,3.001,350,3.522,361,3.522,622,3.522,1038,5.709,1314,6.323,1798,7.375,1799,7.375,1800,7.507,1801,6.658]],["title/overview.html",[1802,4.279]],["body/overview.html",[1,4.665,2,1.442,3,2.264,4,3.371,5,3.371,6,4.304,7,0.02,8,3.764,9,4.073,10,4.394,11,4.184,12,2.544,13,1.906,14,1.796,29,0.014,30,0.014,33,1.521,44,3.489,50,4.856,51,3.371,52,3.371,53,3.371,54,3.489,61,2.323,88,2.628,108,3.371,109,3.371,110,3.371,233,3.548,238,0.96,266,3.371,267,3.371,268,3.371,350,4.552,351,3.371,361,4.917,362,3.371,364,3.371,365,2.437,393,3.002,445,3.047,509,3.371,511,3.371,647,3.047,750,3.371,751,3.371,1023,3.371,1276,3.371,1317,3.371,1354,3.371,1802,3.371,1803,3.931]],["title/miscellaneous/variables.html",[867,2.111,1804,3.767]],["body/miscellaneous/variables.html",[7,0.02,29,0.014,30,0.014,35,0.646,48,1.05,79,1.234,82,2.367,100,1.285,106,1.749,116,0.854,156,4.49,157,6.04,174,1.43,355,3.857,358,2.98,369,4.248,370,4.248,371,4.248,372,4.248,373,2.98,375,2.98,398,2.98,405,2.98,415,2.98,820,3.685,828,3.685,829,4.77,867,2.98,1061,5.935,1160,5.935,1219,3.685,1804,3.685,1805,6.921,1806,4.298,1807,4.298,1808,4.298,1809,4.298,1810,6.756,1811,4.298,1812,4.298,1813,4.298,1814,4.298,1815,4.298,1816,4.298,1817,4.298]]],"invertedIndex":[["",{"_index":7,"title":{},"body":{"modules/ApiModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/HashtagsController.html":{},"modules/HashtagsModule.html":{},"controllers/LikesController.html":{},"classes/LikesEntity.html":{},"modules/LikesModule.html":{},"classes/LikesRepository.html":{},"injectables/LikesService.html":{},"classes/LoginRequestBody.html":{},"classes/LoginResponseBody.html":{},"classes/Mention.html":{},"modules/MockLikesModule.html":{},"classes/MockLikesRepository.html":{},"modules/MockPostsModule.html":{},"classes/MockPostsRepository.html":{},"classes/MockUsersRepository.html":{},"guards/OptionalAuthGuard.html":{},"classes/PasswordEntity.html":{},"classes/PostCreateRequestBody.html":{},"classes/PostDetailsQueryParams.html":{},"classes/PostEntity.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"classes/PostsRepository.html":{},"injectables/PostsService.html":{},"modules/ProdDbModule.html":{},"guards/RequiredAuthGuard.html":{},"classes/SessionsEntity.html":{},"modules/TestDbModule.html":{},"classes/TokenAuthorizer.html":{},"classes/UserCreateRequestBody.html":{},"classes/UserEntity.html":{},"classes/UserFollowingEntity.html":{},"classes/UserUpdateRequestBody.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"classes/UsersRepository.html":{},"injectables/UsersService.html":{},"classes/YooBaseEntity.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":341,"title":{},"body":{"classes/Mention.html":{},"classes/PostEntity.html":{},"injectables/PostsService.html":{},"classes/UserEntity.html":{},"coverage.html":{},"license.html":{}}}],["0.1.13",{"_index":861,"title":{},"body":{"dependencies.html":{}}}],["0.2.34",{"_index":866,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":822,"title":{},"body":{"coverage.html":{}}}],["0/12",{"_index":837,"title":{},"body":{"coverage.html":{}}}],["0/13",{"_index":835,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":818,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":819,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":834,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":830,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":825,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":824,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":823,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":836,"title":{},"body":{"coverage.html":{}}}],["01",{"_index":388,"title":{},"body":{"classes/MockUsersRepository.html":{}}}],["1",{"_index":307,"title":{},"body":{"injectables/LikesService.html":{},"classes/MockUsersRepository.html":{},"guards/OptionalAuthGuard.html":{},"injectables/PostsService.html":{},"guards/RequiredAuthGuard.html":{},"classes/TokenAuthorizer.html":{},"classes/UserFollowingEntity.html":{},"license.html":{}}}],["1/4",{"_index":827,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":158,"title":{},"body":{"injectables/AuthService.html":{},"license.html":{}}}],["11",{"_index":1276,"title":{},"body":{"license.html":{},"overview.html":{}}}],["12",{"_index":1674,"title":{},"body":{"license.html":{}}}],["13",{"_index":1687,"title":{},"body":{"license.html":{}}}],["14",{"_index":1698,"title":{},"body":{"license.html":{}}}],["15",{"_index":1496,"title":{},"body":{"license.html":{}}}],["16",{"_index":1497,"title":{},"body":{"license.html":{}}}],["17",{"_index":1752,"title":{},"body":{"license.html":{}}}],["19",{"_index":960,"title":{},"body":{"license.html":{}}}],["1996",{"_index":1282,"title":{},"body":{"license.html":{}}}],["2",{"_index":1023,"title":{},"body":{"license.html":{},"overview.html":{}}}],["2.3.4",{"_index":858,"title":{},"body":{"dependencies.html":{}}}],["2/8",{"_index":838,"title":{},"body":{"coverage.html":{}}}],["20",{"_index":1280,"title":{},"body":{"license.html":{}}}],["2007",{"_index":962,"title":{},"body":{"license.html":{}}}],["21",{"_index":1803,"title":{},"body":{"overview.html":{}}}],["240",{"_index":332,"title":{},"body":{"classes/Mention.html":{},"classes/PostEntity.html":{},"classes/UserEntity.html":{}}}],["25",{"_index":826,"title":{},"body":{"coverage.html":{}}}],["28",{"_index":1668,"title":{},"body":{"license.html":{}}}],["3",{"_index":959,"title":{},"body":{"license.html":{}}}],["3.0.2",{"_index":863,"title":{},"body":{"dependencies.html":{}}}],["3.14.1",{"_index":854,"title":{},"body":{"dependencies.html":{}}}],["3.6.0",{"_index":850,"title":{},"body":{"dependencies.html":{}}}],["30",{"_index":698,"title":{},"body":{"classes/UserEntity.html":{},"license.html":{}}}],["4",{"_index":1298,"title":{},"body":{"license.html":{}}}],["4.8.0",{"_index":852,"title":{},"body":{"dependencies.html":{}}}],["5",{"_index":1317,"title":{},"body":{"license.html":{},"overview.html":{}}}],["5.0.1",{"_index":848,"title":{},"body":{"dependencies.html":{}}}],["5.1.5",{"_index":846,"title":{},"body":{"dependencies.html":{}}}],["50",{"_index":696,"title":{},"body":{"classes/UserEntity.html":{}}}],["6",{"_index":1354,"title":{},"body":{"license.html":{},"overview.html":{}}}],["60",{"_index":1551,"title":{},"body":{"license.html":{}}}],["6b",{"_index":1384,"title":{},"body":{"license.html":{}}}],["6d",{"_index":1406,"title":{},"body":{"license.html":{}}}],["7",{"_index":1310,"title":{},"body":{"license.html":{}}}],["7.4.0",{"_index":865,"title":{},"body":{"dependencies.html":{}}}],["8",{"_index":1531,"title":{},"body":{"license.html":{}}}],["8.0.2",{"_index":847,"title":{},"body":{"dependencies.html":{}}}],["8.2.3",{"_index":842,"title":{},"body":{"dependencies.html":{}}}],["8.6.0",{"_index":856,"title":{},"body":{"dependencies.html":{}}}],["9",{"_index":1562,"title":{},"body":{"license.html":{}}}],["ability",{"_index":1458,"title":{},"body":{"license.html":{}}}],["above",{"_index":1530,"title":{},"body":{"license.html":{}}}],["absence",{"_index":1311,"title":{},"body":{"license.html":{}}}],["absolute",{"_index":1761,"title":{},"body":{"license.html":{}}}],["abstract",{"_index":813,"title":{},"body":{"classes/YooBaseEntity.html":{}}}],["accept",{"_index":1564,"title":{},"body":{"license.html":{}}}],["acceptance",{"_index":1563,"title":{},"body":{"license.html":{}}}],["access",{"_index":1053,"title":{},"body":{"license.html":{}}}],["accessible",{"_index":1065,"title":{},"body":{"license.html":{}}}],["accompanied",{"_index":1363,"title":{},"body":{"license.html":{}}}],["accompanies",{"_index":1765,"title":{},"body":{"license.html":{}}}],["accomplish",{"_index":1069,"title":{},"body":{"license.html":{}}}],["accord",{"_index":1309,"title":{},"body":{"license.html":{}}}],["according",{"_index":1756,"title":{},"body":{"license.html":{}}}],["achieve",{"_index":1770,"title":{},"body":{"license.html":{}}}],["acknowledges",{"_index":1239,"title":{},"body":{"license.html":{}}}],["acquired",{"_index":1617,"title":{},"body":{"license.html":{}}}],["actions",{"_index":1572,"title":{},"body":{"license.html":{}}}],["activities",{"_index":1123,"title":{},"body":{"license.html":{}}}],["activity",{"_index":1663,"title":{},"body":{"license.html":{}}}],["actual",{"_index":221,"title":{},"body":{"controllers/HashtagsController.html":{},"license.html":{}}}],["actually",{"_index":1430,"title":{},"body":{"license.html":{}}}],["adapt",{"_index":1099,"title":{},"body":{"license.html":{}}}],["add",{"_index":220,"title":{},"body":{"controllers/HashtagsController.html":{},"license.html":{}}}],["added",{"_index":1308,"title":{},"body":{"license.html":{}}}],["additional",{"_index":1329,"title":{},"body":{"license.html":{}}}],["address",{"_index":1704,"title":{},"body":{"license.html":{}}}],["addressed",{"_index":1094,"title":{},"body":{"license.html":{}}}],["addselect('origpost.author",{"_index":555,"title":{},"body":{"injectables/PostsService.html":{}}}],["addselect('posts.created_at",{"_index":564,"title":{},"body":{"injectables/PostsService.html":{}}}],["addselect('replyto.author",{"_index":559,"title":{},"body":{"injectables/PostsService.html":{}}}],["adopted",{"_index":1279,"title":{},"body":{"license.html":{}}}],["advanced",{"_index":615,"title":{},"body":{"modules/ProdDbModule.html":{},"modules/TestDbModule.html":{}}}],["adversely",{"_index":1467,"title":{},"body":{"license.html":{}}}],["advised",{"_index":1750,"title":{},"body":{"license.html":{}}}],["affects",{"_index":1468,"title":{},"body":{"license.html":{}}}],["affero",{"_index":956,"title":{},"body":{"license.html":{}}}],["affirmed",{"_index":1597,"title":{},"body":{"license.html":{}}}],["affirms",{"_index":1235,"title":{},"body":{"license.html":{}}}],["against",{"_index":1296,"title":{},"body":{"license.html":{}}}],["aggregate",{"_index":1347,"title":{},"body":{"license.html":{}}}],["agpl",{"_index":954,"title":{},"body":{"index.html":{},"license.html":{}}}],["agree",{"_index":1682,"title":{},"body":{"license.html":{}}}],["agreed",{"_index":1736,"title":{},"body":{"license.html":{}}}],["agreement",{"_index":1628,"title":{},"body":{"license.html":{}}}],["alleging",{"_index":1605,"title":{},"body":{"license.html":{}}}],["allowed",{"_index":977,"title":{},"body":{"license.html":{}}}],["along",{"_index":1313,"title":{},"body":{"license.html":{}}}],["already",{"_index":175,"title":{},"body":{"injectables/AuthService.html":{},"license.html":{}}}],["alreadyliked",{"_index":293,"title":{},"body":{"injectables/LikesService.html":{}}}],["alternate",{"_index":1035,"title":{},"body":{"license.html":{}}}],["alternative",{"_index":1380,"title":{},"body":{"license.html":{}}}],["ancillary",{"_index":1566,"title":{},"body":{"license.html":{}}}],["and/or",{"_index":1028,"title":{},"body":{"license.html":{}}}],["anti",{"_index":1266,"title":{},"body":{"license.html":{}}}],["anymore",{"_index":799,"title":{},"body":{"injectables/UsersService.html":{}}}],["anyone",{"_index":1326,"title":{},"body":{"license.html":{}}}],["anything",{"_index":1109,"title":{},"body":{"license.html":{}}}],["api",{"_index":876,"title":{},"body":{"index.html":{}}}],["api.module",{"_index":59,"title":{},"body":{"modules/AppModule.html":{}}}],["apibearerauth",{"_index":442,"title":{},"body":{"classes/PostCreateRequestBody.html":{},"classes/PostDetailsQueryParams.html":{},"controllers/PostsController.html":{},"classes/UserCreateRequestBody.html":{},"classes/UserUpdateRequestBody.html":{},"controllers/UsersController.html":{}}}],["apibearerauth()@useguards(requiredauthguard)@delete('/:postid",{"_index":498,"title":{},"body":{"controllers/PostsController.html":{}}}],["apibearerauth()@useguards(requiredauthguard)@delete('/:postid/like",{"_index":507,"title":{},"body":{"controllers/PostsController.html":{}}}],["apibearerauth()@useguards(requiredauthguard)@delete('/:userid/follow",{"_index":745,"title":{},"body":{"controllers/UsersController.html":{}}}],["apibearerauth()@useguards(requiredauthguard)@get('/:userid/followers",{"_index":738,"title":{},"body":{"controllers/UsersController.html":{}}}],["apibearerauth()@useguards(requiredauthguard)@patch('/:userid",{"_index":748,"title":{},"body":{"controllers/UsersController.html":{}}}],["apibearerauth()@useguards(requiredauthguard)@post",{"_index":495,"title":{},"body":{"controllers/PostsController.html":{}}}],["apibearerauth()@useguards(requiredauthguard)@put('/:postid/like",{"_index":505,"title":{},"body":{"controllers/PostsController.html":{}}}],["apibearerauth()@useguards(requiredauthguard)@put('/:userid/follow",{"_index":734,"title":{},"body":{"controllers/UsersController.html":{}}}],["apibearerauth()@useguards(requiredauthguard)@put('/:userid/followees",{"_index":736,"title":{},"body":{"controllers/UsersController.html":{}}}],["apimodule",{"_index":1,"title":{"modules/ApiModule.html":{}},"body":{"modules/ApiModule.html":{},"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["apiparam",{"_index":645,"title":{},"body":{"classes/UserCreateRequestBody.html":{},"classes/UserUpdateRequestBody.html":{},"controllers/UsersController.html":{}}}],["apiproperty",{"_index":84,"title":{},"body":{"controllers/AuthController.html":{},"classes/LoginRequestBody.html":{},"classes/LoginResponseBody.html":{},"classes/PostCreateRequestBody.html":{},"classes/PostDetailsQueryParams.html":{},"controllers/PostsController.html":{},"classes/UserCreateRequestBody.html":{},"classes/UserUpdateRequestBody.html":{},"controllers/UsersController.html":{}}}],["apipropertyoptional",{"_index":433,"title":{},"body":{"classes/PostCreateRequestBody.html":{},"classes/PostDetailsQueryParams.html":{},"controllers/PostsController.html":{},"classes/UserCreateRequestBody.html":{},"classes/UserUpdateRequestBody.html":{},"controllers/UsersController.html":{}}}],["apiresponse",{"_index":85,"title":{},"body":{"controllers/AuthController.html":{},"classes/LoginRequestBody.html":{},"classes/LoginResponseBody.html":{}}}],["apiresponse({type",{"_index":74,"title":{},"body":{"controllers/AuthController.html":{}}}],["apitags",{"_index":86,"title":{},"body":{"controllers/AuthController.html":{},"controllers/HashtagsController.html":{},"controllers/LikesController.html":{},"classes/LoginRequestBody.html":{},"classes/LoginResponseBody.html":{},"classes/PostCreateRequestBody.html":{},"classes/PostDetailsQueryParams.html":{},"controllers/PostsController.html":{},"classes/UserCreateRequestBody.html":{},"classes/UserUpdateRequestBody.html":{},"controllers/UsersController.html":{}}}],["apitags('auth",{"_index":96,"title":{},"body":{"controllers/AuthController.html":{},"classes/LoginRequestBody.html":{},"classes/LoginResponseBody.html":{}}}],["apitags('hashtags",{"_index":217,"title":{},"body":{"controllers/HashtagsController.html":{}}}],["apitags('likes",{"_index":235,"title":{},"body":{"controllers/LikesController.html":{}}}],["apitags('posts",{"_index":449,"title":{},"body":{"classes/PostCreateRequestBody.html":{},"classes/PostDetailsQueryParams.html":{},"controllers/PostsController.html":{}}}],["apitags('users",{"_index":650,"title":{},"body":{"classes/UserCreateRequestBody.html":{},"classes/UserUpdateRequestBody.html":{},"controllers/UsersController.html":{}}}],["app",{"_index":921,"title":{},"body":{"index.html":{}}}],["app.controller",{"_index":57,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":45,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["appcontroller",{"_index":32,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["applicable",{"_index":1114,"title":{},"body":{"license.html":{}}}],["application",{"_index":806,"title":{},"body":{"classes/YooBaseEntity.html":{},"license.html":{}}}],["applies",{"_index":1711,"title":{},"body":{"license.html":{}}}],["apply",{"_index":1086,"title":{},"body":{"license.html":{}}}],["appmodule",{"_index":50,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appropriate",{"_index":1137,"title":{},"body":{"license.html":{}}}],["appropriately",{"_index":1302,"title":{},"body":{"license.html":{}}}],["approximates",{"_index":1760,"title":{},"body":{"license.html":{}}}],["appservice",{"_index":44,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["archive",{"_index":1790,"title":{},"body":{"license.html":{}}}],["arising",{"_index":1740,"title":{},"body":{"license.html":{}}}],["arrange",{"_index":1638,"title":{},"body":{"license.html":{}}}],["arrangement",{"_index":1651,"title":{},"body":{"license.html":{}}}],["array",{"_index":337,"title":{},"body":{"classes/Mention.html":{},"classes/PostEntity.html":{}}}],["article",{"_index":1275,"title":{},"body":{"license.html":{}}}],["assert",{"_index":1022,"title":{},"body":{"license.html":{}}}],["assets",{"_index":1586,"title":{},"body":{"license.html":{}}}],["associated",{"_index":1212,"title":{},"body":{"license.html":{}}}],["assume",{"_index":1729,"title":{},"body":{"license.html":{}}}],["assumption",{"_index":1764,"title":{},"body":{"license.html":{}}}],["assumptions",{"_index":1519,"title":{},"body":{"license.html":{}}}],["async",{"_index":70,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/LikesService.html":{},"classes/LoginRequestBody.html":{},"classes/LoginResponseBody.html":{},"classes/MockUsersRepository.html":{},"guards/OptionalAuthGuard.html":{},"classes/PostCreateRequestBody.html":{},"classes/PostDetailsQueryParams.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"guards/RequiredAuthGuard.html":{},"classes/TokenAuthorizer.html":{},"classes/UserCreateRequestBody.html":{},"classes/UserUpdateRequestBody.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["attach",{"_index":1772,"title":{},"body":{"license.html":{}}}],["attempt",{"_index":1534,"title":{},"body":{"license.html":{}}}],["attributions",{"_index":1499,"title":{},"body":{"license.html":{}}}],["auth",{"_index":69,"title":{},"body":{"controllers/AuthController.html":{},"index.html":{}}}],["auth.controller",{"_index":118,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.service",{"_index":89,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/LoginRequestBody.html":{},"classes/LoginResponseBody.html":{},"guards/OptionalAuthGuard.html":{},"guards/RequiredAuthGuard.html":{},"classes/TokenAuthorizer.html":{}}}],["auth/auth.module",{"_index":22,"title":{},"body":{"modules/ApiModule.html":{}}}],["auth/login",{"_index":936,"title":{},"body":{"index.html":{}}}],["authcontroller",{"_index":66,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/LoginRequestBody.html":{},"classes/LoginResponseBody.html":{},"coverage.html":{}}}],["authduser",{"_index":667,"title":{},"body":{"classes/UserCreateRequestBody.html":{},"classes/UserUpdateRequestBody.html":{},"controllers/UsersController.html":{}}}],["authduser.id",{"_index":670,"title":{},"body":{"classes/UserCreateRequestBody.html":{},"classes/UserUpdateRequestBody.html":{},"controllers/UsersController.html":{}}}],["authmodule",{"_index":6,"title":{"modules/AuthModule.html":{}},"body":{"modules/ApiModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":339,"title":{},"body":{"classes/Mention.html":{},"classes/PostCreateRequestBody.html":{},"classes/PostDetailsQueryParams.html":{},"classes/PostEntity.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"index.html":{},"license.html":{}}}],["author_id",{"_index":338,"title":{},"body":{"classes/Mention.html":{},"classes/PostEntity.html":{}}}],["authorid",{"_index":448,"title":{},"body":{"classes/PostCreateRequestBody.html":{},"classes/PostDetailsQueryParams.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["authorization",{"_index":409,"title":{},"body":{"guards/OptionalAuthGuard.html":{},"guards/RequiredAuthGuard.html":{},"classes/TokenAuthorizer.html":{},"license.html":{}}}],["authorized",{"_index":1490,"title":{},"body":{"license.html":{}}}],["authorizes",{"_index":1612,"title":{},"body":{"license.html":{}}}],["authorizetoken",{"_index":630,"title":{},"body":{"classes/TokenAuthorizer.html":{}}}],["authorizetoken(context",{"_index":404,"title":{},"body":{"guards/OptionalAuthGuard.html":{},"guards/RequiredAuthGuard.html":{},"classes/TokenAuthorizer.html":{}}}],["authorizing",{"_index":1655,"title":{},"body":{"license.html":{}}}],["authors",{"_index":1509,"title":{},"body":{"license.html":{}}}],["authservice",{"_index":88,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/LoginRequestBody.html":{},"classes/LoginResponseBody.html":{},"modules/MockPostsModule.html":{},"guards/OptionalAuthGuard.html":{},"injectables/PostsService.html":{},"guards/RequiredAuthGuard.html":{},"classes/TokenAuthorizer.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["authservice.password_salt_rounds",{"_index":203,"title":{},"body":{"injectables/AuthService.html":{}}}],["automatic",{"_index":1576,"title":{},"body":{"license.html":{}}}],["automatically",{"_index":1226,"title":{},"body":{"license.html":{}}}],["available",{"_index":1038,"title":{},"body":{"license.html":{},"modules.html":{}}}],["avatar",{"_index":636,"title":{},"body":{"classes/UserCreateRequestBody.html":{},"classes/UserEntity.html":{},"classes/UserUpdateRequestBody.html":{},"controllers/UsersController.html":{}}}],["await",{"_index":102,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/LikesService.html":{},"classes/LoginRequestBody.html":{},"classes/LoginResponseBody.html":{},"guards/OptionalAuthGuard.html":{},"classes/PostCreateRequestBody.html":{},"classes/PostDetailsQueryParams.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"guards/RequiredAuthGuard.html":{},"classes/TokenAuthorizer.html":{},"classes/UserCreateRequestBody.html":{},"classes/UserUpdateRequestBody.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["away",{"_index":992,"title":{},"body":{"license.html":{}}}],["b",{"_index":1184,"title":{},"body":{"license.html":{}}}],["backend",{"_index":875,"title":{},"body":{"index.html":{}}}],["badrequestexception",{"_index":291,"title":{},"body":{"injectables/LikesService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["badrequestexception('post",{"_index":581,"title":{},"body":{"injectables/PostsService.html":{}}}],["base",{"_index":804,"title":{},"body":{"classes/YooBaseEntity.html":{}}}],["based",{"_index":1105,"title":{},"body":{"license.html":{}}}],["basic",{"_index":1227,"title":{},"body":{"license.html":{}}}],["bcrypt",{"_index":164,"title":{},"body":{"injectables/AuthService.html":{},"dependencies.html":{}}}],["become",{"_index":1037,"title":{},"body":{"license.html":{}}}],["becomes",{"_index":1058,"title":{},"body":{"license.html":{}}}],["behalf",{"_index":1253,"title":{},"body":{"license.html":{}}}],["being",{"_index":897,"title":{},"body":{"index.html":{},"license.html":{}}}],["believe",{"_index":1647,"title":{},"body":{"license.html":{}}}],["below",{"_index":1260,"title":{},"body":{"license.html":{}}}],["benefit",{"_index":1031,"title":{},"body":{"license.html":{}}}],["best",{"_index":1769,"title":{},"body":{"license.html":{}}}],["better",{"_index":1792,"title":{},"body":{"license.html":{}}}],["between",{"_index":1222,"title":{},"body":{"license.html":{}}}],["beyond",{"_index":1349,"title":{},"body":{"license.html":{}}}],["bio",{"_index":637,"title":{},"body":{"classes/UserCreateRequestBody.html":{},"classes/UserEntity.html":{},"classes/UserUpdateRequestBody.html":{},"controllers/UsersController.html":{}}}],["board",{"_index":892,"title":{},"body":{"index.html":{}}}],["body",{"_index":81,"title":{},"body":{"controllers/AuthController.html":{},"classes/LoginRequestBody.html":{},"classes/LoginResponseBody.html":{},"classes/PostCreateRequestBody.html":{},"classes/PostDetailsQueryParams.html":{},"controllers/PostsController.html":{},"classes/UserCreateRequestBody.html":{},"classes/UserUpdateRequestBody.html":{},"controllers/UsersController.html":{},"license.html":{}}}],["body.password",{"_index":105,"title":{},"body":{"controllers/AuthController.html":{},"classes/LoginRequestBody.html":{},"classes/LoginResponseBody.html":{}}}],["body.username",{"_index":104,"title":{},"body":{"controllers/AuthController.html":{},"classes/LoginRequestBody.html":{},"classes/LoginResponseBody.html":{}}}],["boolean",{"_index":705,"title":{},"body":{"classes/UserEntity.html":{}}}],["bootstrap",{"_index":833,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["both",{"_index":312,"title":{},"body":{"injectables/LikesService.html":{},"license.html":{}}}],["browse",{"_index":1800,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1798,"title":{},"body":{"modules.html":{}}}],["building",{"_index":914,"title":{},"body":{"index.html":{}}}],["built",{"_index":908,"title":{},"body":{"index.html":{}}}],["business",{"_index":1660,"title":{},"body":{"license.html":{}}}],["c",{"_index":1324,"title":{},"body":{"license.html":{}}}],["called",{"_index":1067,"title":{},"body":{"license.html":{}}}],["canactivate",{"_index":396,"title":{},"body":{"guards/OptionalAuthGuard.html":{},"guards/RequiredAuthGuard.html":{},"classes/TokenAuthorizer.html":{}}}],["canactivate(context",{"_index":397,"title":{},"body":{"guards/OptionalAuthGuard.html":{},"guards/RequiredAuthGuard.html":{},"classes/TokenAuthorizer.html":{}}}],["carry",{"_index":1319,"title":{},"body":{"license.html":{}}}],["cascade",{"_index":703,"title":{},"body":{"classes/UserEntity.html":{}}}],["case",{"_index":986,"title":{},"body":{"license.html":{}}}],["cases",{"_index":1057,"title":{},"body":{"license.html":{}}}],["catch",{"_index":419,"title":{},"body":{"guards/OptionalAuthGuard.html":{},"guards/RequiredAuthGuard.html":{},"classes/TokenAuthorizer.html":{}}}],["cause",{"_index":1353,"title":{},"body":{"license.html":{}}}],["cease",{"_index":1539,"title":{},"body":{"license.html":{}}}],["certain",{"_index":1487,"title":{},"body":{"license.html":{}}}],["cessation",{"_index":1553,"title":{},"body":{"license.html":{}}}],["change",{"_index":995,"title":{},"body":{"license.html":{}}}],["changing",{"_index":976,"title":{},"body":{"license.html":{}}}],["characterized",{"_index":1455,"title":{},"body":{"license.html":{}}}],["charge",{"_index":1007,"title":{},"body":{"license.html":{}}}],["choose",{"_index":1713,"title":{},"body":{"license.html":{}}}],["choosing",{"_index":1717,"title":{},"body":{"license.html":{}}}],["circumstances",{"_index":1258,"title":{},"body":{"license.html":{}}}],["circumvention",{"_index":1267,"title":{},"body":{"license.html":{}}}],["civil",{"_index":1763,"title":{},"body":{"license.html":{}}}],["claim",{"_index":1602,"title":{},"body":{"license.html":{}}}],["claims",{"_index":1614,"title":{},"body":{"license.html":{}}}],["class",{"_index":28,"title":{"classes/LikesEntity.html":{},"classes/LikesRepository.html":{},"classes/LoginRequestBody.html":{},"classes/LoginResponseBody.html":{},"classes/Mention.html":{},"classes/MockLikesRepository.html":{},"classes/MockPostsRepository.html":{},"classes/MockUsersRepository.html":{},"classes/PasswordEntity.html":{},"classes/PostCreateRequestBody.html":{},"classes/PostDetailsQueryParams.html":{},"classes/PostEntity.html":{},"classes/PostsRepository.html":{},"classes/SessionsEntity.html":{},"classes/TokenAuthorizer.html":{},"classes/UserCreateRequestBody.html":{},"classes/UserEntity.html":{},"classes/UserFollowingEntity.html":{},"classes/UserUpdateRequestBody.html":{},"classes/UsersRepository.html":{},"classes/YooBaseEntity.html":{}},"body":{"modules/ApiModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/HashtagsController.html":{},"modules/HashtagsModule.html":{},"controllers/LikesController.html":{},"classes/LikesEntity.html":{},"modules/LikesModule.html":{},"classes/LikesRepository.html":{},"injectables/LikesService.html":{},"classes/LoginRequestBody.html":{},"classes/LoginResponseBody.html":{},"classes/Mention.html":{},"modules/MockLikesModule.html":{},"classes/MockLikesRepository.html":{},"modules/MockPostsModule.html":{},"classes/MockPostsRepository.html":{},"classes/MockUsersRepository.html":{},"guards/OptionalAuthGuard.html":{},"classes/PasswordEntity.html":{},"classes/PostCreateRequestBody.html":{},"classes/PostDetailsQueryParams.html":{},"classes/PostEntity.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"classes/PostsRepository.html":{},"injectables/PostsService.html":{},"modules/ProdDbModule.html":{},"guards/RequiredAuthGuard.html":{},"classes/SessionsEntity.html":{},"modules/TestDbModule.html":{},"classes/TokenAuthorizer.html":{},"classes/UserCreateRequestBody.html":{},"classes/UserEntity.html":{},"classes/UserFollowingEntity.html":{},"classes/UserUpdateRequestBody.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"classes/UsersRepository.html":{},"injectables/UsersService.html":{},"classes/YooBaseEntity.html":{},"coverage.html":{},"license.html":{}}}],["classes",{"_index":238,"title":{},"body":{"classes/LikesEntity.html":{},"classes/LikesRepository.html":{},"classes/LoginRequestBody.html":{},"classes/LoginResponseBody.html":{},"classes/Mention.html":{},"classes/MockLikesRepository.html":{},"classes/MockPostsRepository.html":{},"classes/MockUsersRepository.html":{},"classes/PasswordEntity.html":{},"classes/PostCreateRequestBody.html":{},"classes/PostDetailsQueryParams.html":{},"classes/PostEntity.html":{},"classes/PostsRepository.html":{},"classes/SessionsEntity.html":{},"classes/TokenAuthorizer.html":{},"classes/UserCreateRequestBody.html":{},"classes/UserEntity.html":{},"classes/UserFollowingEntity.html":{},"classes/UserUpdateRequestBody.html":{},"classes/UsersRepository.html":{},"classes/YooBaseEntity.html":{},"overview.html":{}}}],["clear",{"_index":1393,"title":{},"body":{"license.html":{}}}],["clone",{"_index":874,"title":{},"body":{"index.html":{}}}],["closely",{"_index":1759,"title":{},"body":{"license.html":{}}}],["cluster_apimodule",{"_index":4,"title":{},"body":{"modules/ApiModule.html":{},"overview.html":{}}}],["cluster_apimodule_imports",{"_index":5,"title":{},"body":{"modules/ApiModule.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":51,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":52,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":53,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":108,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":110,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":109,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_likesmodule",{"_index":266,"title":{},"body":{"modules/LikesModule.html":{},"overview.html":{}}}],["cluster_likesmodule_exports",{"_index":268,"title":{},"body":{"modules/LikesModule.html":{},"overview.html":{}}}],["cluster_likesmodule_providers",{"_index":267,"title":{},"body":{"modules/LikesModule.html":{},"overview.html":{}}}],["cluster_mocklikesmodule",{"_index":351,"title":{},"body":{"modules/MockLikesModule.html":{},"overview.html":{}}}],["cluster_mocklikesmodule_exports",{"_index":352,"title":{},"body":{"modules/MockLikesModule.html":{}}}],["cluster_mocklikesmodule_providers",{"_index":353,"title":{},"body":{"modules/MockLikesModule.html":{}}}],["cluster_mockpostsmodule",{"_index":362,"title":{},"body":{"modules/MockPostsModule.html":{},"overview.html":{}}}],["cluster_mockpostsmodule_exports",{"_index":364,"title":{},"body":{"modules/MockPostsModule.html":{},"overview.html":{}}}],["cluster_mockpostsmodule_providers",{"_index":363,"title":{},"body":{"modules/MockPostsModule.html":{}}}],["cluster_postsmodule",{"_index":509,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_postsmodule_imports",{"_index":510,"title":{},"body":{"modules/PostsModule.html":{}}}],["cluster_postsmodule_providers",{"_index":511,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":750,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_providers",{"_index":751,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["code",{"_index":1010,"title":{},"body":{"license.html":{}}}],["coding",{"_index":917,"title":{},"body":{"index.html":{}}}],["collect",{"_index":1684,"title":{},"body":{"license.html":{}}}],["column",{"_index":328,"title":{},"body":{"classes/Mention.html":{},"classes/PasswordEntity.html":{},"classes/PostEntity.html":{},"classes/SessionsEntity.html":{},"classes/UserEntity.html":{}}}],["column('boolean",{"_index":706,"title":{},"body":{"classes/UserEntity.html":{}}}],["column('json",{"_index":335,"title":{},"body":{"classes/Mention.html":{},"classes/PostEntity.html":{}}}],["column({length",{"_index":490,"title":{},"body":{"classes/PostEntity.html":{},"classes/UserEntity.html":{}}}],["column({name",{"_index":483,"title":{},"body":{"classes/PostEntity.html":{},"classes/UserEntity.html":{}}}],["column({nullable",{"_index":422,"title":{},"body":{"classes/PasswordEntity.html":{},"classes/UserEntity.html":{}}}],["combine",{"_index":1697,"title":{},"body":{"license.html":{}}}],["combined",{"_index":1343,"title":{},"body":{"license.html":{}}}],["come",{"_index":1048,"title":{},"body":{"license.html":{}}}],["comes",{"_index":1327,"title":{},"body":{"license.html":{}}}],["commands",{"_index":1150,"title":{},"body":{"license.html":{}}}],["commercial",{"_index":1435,"title":{},"body":{"license.html":{}}}],["commitment",{"_index":1629,"title":{},"body":{"license.html":{}}}],["common",{"_index":1428,"title":{},"body":{"license.html":{}}}],["commons/db.module",{"_index":58,"title":{},"body":{"modules/AppModule.html":{}}}],["communication",{"_index":1220,"title":{},"body":{"license.html":{}}}],["community",{"_index":985,"title":{},"body":{"license.html":{}}}],["compare",{"_index":163,"title":{},"body":{"injectables/AuthService.html":{}}}],["compare(password",{"_index":204,"title":{},"body":{"injectables/AuthService.html":{}}}],["compilation",{"_index":1338,"title":{},"body":{"license.html":{}}}],["compilation's",{"_index":1348,"title":{},"body":{"license.html":{}}}],["compilations",{"_index":1666,"title":{},"body":{"license.html":{}}}],["compiler",{"_index":1193,"title":{},"body":{"license.html":{}}}],["compliance",{"_index":1582,"title":{},"body":{"license.html":{}}}],["comply",{"_index":1250,"title":{},"body":{"license.html":{}}}],["component",{"_index":1183,"title":{},"body":{"license.html":{}}}],["compress",{"_index":849,"title":{},"body":{"dependencies.html":{}}}],["computer",{"_index":1118,"title":{},"body":{"license.html":{}}}],["concerns",{"_index":1706,"title":{},"body":{"license.html":{}}}],["conditioned",{"_index":1659,"title":{},"body":{"license.html":{}}}],["conditions",{"_index":1078,"title":{},"body":{"license.html":{}}}],["conflictexception",{"_index":779,"title":{},"body":{"injectables/UsersService.html":{}}}],["connection",{"_index":1649,"title":{},"body":{"license.html":{}}}],["consequence",{"_index":1568,"title":{},"body":{"license.html":{}}}],["consequential",{"_index":1739,"title":{},"body":{"license.html":{}}}],["considered",{"_index":1521,"title":{},"body":{"license.html":{}}}],["consistent",{"_index":1621,"title":{},"body":{"license.html":{}}}],["console",{"_index":616,"title":{},"body":{"modules/ProdDbModule.html":{},"modules/TestDbModule.html":{}}}],["conspicuously",{"_index":1301,"title":{},"body":{"license.html":{}}}],["const",{"_index":100,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/LikesService.html":{},"classes/LoginRequestBody.html":{},"classes/LoginResponseBody.html":{},"classes/MockUsersRepository.html":{},"guards/OptionalAuthGuard.html":{},"classes/PostCreateRequestBody.html":{},"classes/PostDetailsQueryParams.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"guards/RequiredAuthGuard.html":{},"classes/TokenAuthorizer.html":{},"classes/UserCreateRequestBody.html":{},"classes/UserUpdateRequestBody.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["constitutes",{"_index":1238,"title":{},"body":{"license.html":{}}}],["constructor",{"_index":134,"title":{},"body":{"injectables/AuthService.html":{},"injectables/LikesService.html":{},"classes/LoginResponseBody.html":{},"injectables/PostsService.html":{},"classes/TokenAuthorizer.html":{},"injectables/UsersService.html":{}}}],["constructor(@inject(authservice",{"_index":402,"title":{},"body":{"guards/OptionalAuthGuard.html":{},"guards/RequiredAuthGuard.html":{},"classes/TokenAuthorizer.html":{}}}],["constructor(authservice",{"_index":631,"title":{},"body":{"classes/TokenAuthorizer.html":{}}}],["constructor(likesrepository",{"_index":282,"title":{},"body":{"injectables/LikesService.html":{}}}],["constructor(likesservice",{"_index":523,"title":{},"body":{"injectables/PostsService.html":{}}}],["constructor(private",{"_index":46,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/LikesController.html":{},"injectables/LikesService.html":{},"classes/LoginRequestBody.html":{},"classes/LoginResponseBody.html":{},"classes/PostCreateRequestBody.html":{},"classes/PostDetailsQueryParams.html":{},"controllers/PostsController.html":{},"classes/UserCreateRequestBody.html":{},"classes/UserUpdateRequestBody.html":{},"controllers/UsersController.html":{}}}],["constructor(token",{"_index":94,"title":{},"body":{"controllers/AuthController.html":{},"classes/LoginRequestBody.html":{},"classes/LoginResponseBody.html":{}}}],["constructor(userrepo",{"_index":135,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["construed",{"_index":1670,"title":{},"body":{"license.html":{}}}],["consumer",{"_index":1412,"title":{},"body":{"license.html":{}}}],["contact",{"_index":1782,"title":{},"body":{"license.html":{}}}],["contain",{"_index":582,"title":{},"body":{"injectables/PostsService.html":{},"license.html":{}}}],["containing",{"_index":1501,"title":{},"body":{"license.html":{}}}],["contains",{"_index":1525,"title":{},"body":{"license.html":{}}}],["content",{"_index":945,"title":{},"body":{"index.html":{},"license.html":{}}}],["contents",{"_index":1625,"title":{},"body":{"license.html":{}}}],["context",{"_index":400,"title":{},"body":{"guards/OptionalAuthGuard.html":{},"guards/RequiredAuthGuard.html":{},"classes/TokenAuthorizer.html":{},"license.html":{}}}],["context.switchtohttp().getrequest",{"_index":406,"title":{},"body":{"guards/OptionalAuthGuard.html":{},"guards/RequiredAuthGuard.html":{},"classes/TokenAuthorizer.html":{}}}],["continue",{"_index":1461,"title":{},"body":{"license.html":{}}}],["continued",{"_index":1445,"title":{},"body":{"license.html":{}}}],["contractual",{"_index":1518,"title":{},"body":{"license.html":{}}}],["contradict",{"_index":1678,"title":{},"body":{"license.html":{}}}],["contrast",{"_index":996,"title":{},"body":{"license.html":{}}}],["contributor",{"_index":1611,"title":{},"body":{"license.html":{}}}],["contributor's",{"_index":1613,"title":{},"body":{"license.html":{}}}],["control",{"_index":1202,"title":{},"body":{"license.html":{}}}],["controlled",{"_index":1616,"title":{},"body":{"license.html":{}}}],["controller",{"_index":31,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/HashtagsController.html":{},"controllers/LikesController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/HashtagsController.html":{},"controllers/LikesController.html":{},"classes/LoginRequestBody.html":{},"classes/LoginResponseBody.html":{},"classes/PostCreateRequestBody.html":{},"classes/PostDetailsQueryParams.html":{},"controllers/PostsController.html":{},"classes/UserCreateRequestBody.html":{},"classes/UserUpdateRequestBody.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":97,"title":{},"body":{"controllers/AuthController.html":{},"classes/LoginRequestBody.html":{},"classes/LoginResponseBody.html":{}}}],["controller('hashtags",{"_index":218,"title":{},"body":{"controllers/HashtagsController.html":{}}}],["controller('likes",{"_index":236,"title":{},"body":{"controllers/LikesController.html":{}}}],["controller('posts",{"_index":450,"title":{},"body":{"classes/PostCreateRequestBody.html":{},"classes/PostDetailsQueryParams.html":{},"controllers/PostsController.html":{}}}],["controller('users",{"_index":651,"title":{},"body":{"classes/UserCreateRequestBody.html":{},"classes/UserUpdateRequestBody.html":{},"controllers/UsersController.html":{}}}],["controllers",{"_index":33,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/HashtagsController.html":{},"modules/HashtagsModule.html":{},"controllers/LikesController.html":{},"modules/LikesModule.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["convenient",{"_index":1140,"title":{},"body":{"license.html":{}}}],["convey",{"_index":1125,"title":{},"body":{"license.html":{}}}],["conveyance",{"_index":1653,"title":{},"body":{"license.html":{}}}],["conveyed",{"_index":1456,"title":{},"body":{"license.html":{}}}],["conveying",{"_index":1133,"title":{},"body":{"license.html":{}}}],["conveys",{"_index":1517,"title":{},"body":{"license.html":{}}}],["cooperation",{"_index":984,"title":{},"body":{"license.html":{}}}],["copies",{"_index":974,"title":{},"body":{"license.html":{}}}],["copy",{"_index":971,"title":{},"body":{"license.html":{}}}],["copying",{"_index":1079,"title":{},"body":{"license.html":{}}}],["copyleft",{"_index":979,"title":{},"body":{"license.html":{}}}],["copyright",{"_index":963,"title":{},"body":{"license.html":{}}}],["copyrightable",{"_index":1089,"title":{},"body":{"license.html":{}}}],["copyrighted",{"_index":1256,"title":{},"body":{"license.html":{}}}],["correction",{"_index":1733,"title":{},"body":{"license.html":{}}}],["corresponding",{"_index":1196,"title":{},"body":{"license.html":{}}}],["cost",{"_index":1378,"title":{},"body":{"license.html":{}}}],["counterclaim",{"_index":1603,"title":{},"body":{"license.html":{}}}],["countries",{"_index":1122,"title":{},"body":{"license.html":{}}}],["country",{"_index":1643,"title":{},"body":{"license.html":{}}}],["court",{"_index":1677,"title":{},"body":{"license.html":{}}}],["courts",{"_index":1758,"title":{},"body":{"license.html":{}}}],["covenant",{"_index":1633,"title":{},"body":{"license.html":{}}}],["coverage",{"_index":814,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{},"license.html":{}}}],["covered",{"_index":1106,"title":{},"body":{"license.html":{}}}],["create",{"_index":576,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["created",{"_index":766,"title":{},"body":{"injectables/UsersService.html":{}}}],["created_at",{"_index":252,"title":{},"body":{"classes/LikesEntity.html":{},"classes/PasswordEntity.html":{},"classes/PostEntity.html":{},"classes/SessionsEntity.html":{},"classes/UserEntity.html":{},"classes/UserFollowingEntity.html":{},"classes/YooBaseEntity.html":{}}}],["createdat",{"_index":242,"title":{},"body":{"classes/LikesEntity.html":{},"classes/MockUsersRepository.html":{},"classes/PasswordEntity.html":{},"classes/PostEntity.html":{},"classes/SessionsEntity.html":{},"classes/UserEntity.html":{},"classes/UserFollowingEntity.html":{},"classes/YooBaseEntity.html":{}}}],["createdatecolumn",{"_index":810,"title":{},"body":{"classes/YooBaseEntity.html":{}}}],["createdatecolumn({name",{"_index":251,"title":{},"body":{"classes/LikesEntity.html":{},"classes/PasswordEntity.html":{},"classes/PostEntity.html":{},"classes/SessionsEntity.html":{},"classes/UserEntity.html":{},"classes/UserFollowingEntity.html":{},"classes/YooBaseEntity.html":{}}}],["createdpost",{"_index":459,"title":{},"body":{"classes/PostCreateRequestBody.html":{},"classes/PostDetailsQueryParams.html":{},"controllers/PostsController.html":{}}}],["createnewpost",{"_index":458,"title":{},"body":{"classes/PostCreateRequestBody.html":{},"classes/PostDetailsQueryParams.html":{},"controllers/PostsController.html":{}}}],["createnewpost(author",{"_index":494,"title":{},"body":{"controllers/PostsController.html":{}}}],["createnewsession",{"_index":128,"title":{},"body":{"injectables/AuthService.html":{}}}],["createnewsession(username",{"_index":142,"title":{},"body":{"injectables/AuthService.html":{}}}],["createnewuser",{"_index":661,"title":{},"body":{"classes/UserCreateRequestBody.html":{},"classes/UserUpdateRequestBody.html":{},"controllers/UsersController.html":{}}}],["createnewuser(createuserrequest",{"_index":731,"title":{},"body":{"controllers/UsersController.html":{}}}],["createparamdecorator",{"_index":1815,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createpasswordfornewuser",{"_index":129,"title":{},"body":{"injectables/AuthService.html":{}}}],["createpasswordfornewuser(userid",{"_index":144,"title":{},"body":{"injectables/AuthService.html":{}}}],["createpost",{"_index":520,"title":{},"body":{"injectables/PostsService.html":{}}}],["createpost(post",{"_index":525,"title":{},"body":{"injectables/PostsService.html":{}}}],["createquerybuilder('likes",{"_index":315,"title":{},"body":{"injectables/LikesService.html":{}}}],["createquerybuilder('posts",{"_index":552,"title":{},"body":{"injectables/PostsService.html":{}}}],["createuser",{"_index":758,"title":{},"body":{"injectables/UsersService.html":{}}}],["createuser(user",{"_index":764,"title":{},"body":{"injectables/UsersService.html":{}}}],["createuserfollowrelation",{"_index":759,"title":{},"body":{"injectables/UsersService.html":{}}}],["createuserfollowrelation(follower",{"_index":767,"title":{},"body":{"injectables/UsersService.html":{}}}],["createuserrequest",{"_index":662,"title":{},"body":{"classes/UserCreateRequestBody.html":{},"classes/UserUpdateRequestBody.html":{},"controllers/UsersController.html":{}}}],["createuserrequest.password",{"_index":664,"title":{},"body":{"classes/UserCreateRequestBody.html":{},"classes/UserUpdateRequestBody.html":{},"controllers/UsersController.html":{}}}],["criterion",{"_index":1156,"title":{},"body":{"license.html":{}}}],["cross",{"_index":1601,"title":{},"body":{"license.html":{}}}],["ctx",{"_index":1816,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ctx.switchtohttp().getrequest",{"_index":1817,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cure",{"_index":1558,"title":{},"body":{"license.html":{}}}],["customarily",{"_index":1366,"title":{},"body":{"license.html":{}}}],["customary",{"_index":1693,"title":{},"body":{"license.html":{}}}],["customer",{"_index":1373,"title":{},"body":{"license.html":{}}}],["d",{"_index":1336,"title":{},"body":{"license.html":{}}}],["damages",{"_index":1737,"title":{},"body":{"license.html":{}}}],["data",{"_index":1219,"title":{},"body":{"license.html":{},"miscellaneous/variables.html":{}}}],["database",{"_index":602,"title":{},"body":{"modules/ProdDbModule.html":{},"modules/TestDbModule.html":{},"index.html":{}}}],["date",{"_index":250,"title":{},"body":{"classes/LikesEntity.html":{},"classes/PasswordEntity.html":{},"classes/PostEntity.html":{},"classes/SessionsEntity.html":{},"classes/UserEntity.html":{},"classes/UserFollowingEntity.html":{},"classes/YooBaseEntity.html":{},"license.html":{}}}],["date('2020",{"_index":387,"title":{},"body":{"classes/MockUsersRepository.html":{}}}],["days",{"_index":1552,"title":{},"body":{"license.html":{}}}],["db",{"_index":888,"title":{},"body":{"index.html":{}}}],["december",{"_index":1281,"title":{},"body":{"license.html":{}}}],["decide",{"_index":1715,"title":{},"body":{"license.html":{}}}],["declining",{"_index":1510,"title":{},"body":{"license.html":{}}}],["decorators",{"_index":38,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/HashtagsController.html":{},"classes/LikesEntity.html":{},"classes/LoginRequestBody.html":{},"classes/LoginResponseBody.html":{},"classes/PasswordEntity.html":{},"classes/PostCreateRequestBody.html":{},"classes/PostDetailsQueryParams.html":{},"classes/PostEntity.html":{},"controllers/PostsController.html":{},"classes/SessionsEntity.html":{},"classes/UserCreateRequestBody.html":{},"classes/UserEntity.html":{},"classes/UserFollowingEntity.html":{},"classes/UserUpdateRequestBody.html":{},"controllers/UsersController.html":{},"classes/YooBaseEntity.html":{}}}],["deemed",{"_index":1269,"title":{},"body":{"license.html":{}}}],["default",{"_index":156,"title":{},"body":{"injectables/AuthService.html":{},"classes/Mention.html":{},"classes/PostEntity.html":{},"classes/UserEntity.html":{},"miscellaneous/variables.html":{}}}],["defective",{"_index":1728,"title":{},"body":{"license.html":{}}}],["defending",{"_index":1032,"title":{},"body":{"license.html":{}}}],["defenses",{"_index":1673,"title":{},"body":{"license.html":{}}}],["defined",{"_index":40,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/HashtagsController.html":{},"classes/LikesEntity.html":{},"injectables/LikesService.html":{},"classes/LoginRequestBody.html":{},"classes/LoginResponseBody.html":{},"classes/Mention.html":{},"classes/MockUsersRepository.html":{},"guards/OptionalAuthGuard.html":{},"classes/PasswordEntity.html":{},"classes/PostCreateRequestBody.html":{},"classes/PostDetailsQueryParams.html":{},"classes/PostEntity.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"guards/RequiredAuthGuard.html":{},"classes/SessionsEntity.html":{},"classes/TokenAuthorizer.html":{},"classes/UserCreateRequestBody.html":{},"classes/UserEntity.html":{},"classes/UserFollowingEntity.html":{},"classes/UserUpdateRequestBody.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/YooBaseEntity.html":{},"license.html":{}}}],["definition",{"_index":1210,"title":{},"body":{"license.html":{}}}],["definitions",{"_index":1082,"title":{},"body":{"license.html":{}}}],["delete",{"_index":437,"title":{},"body":{"classes/PostCreateRequestBody.html":{},"classes/PostDetailsQueryParams.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/UserCreateRequestBody.html":{},"classes/UserUpdateRequestBody.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["delete('/:postid",{"_index":463,"title":{},"body":{"classes/PostCreateRequestBody.html":{},"classes/PostDetailsQueryParams.html":{},"controllers/PostsController.html":{}}}],["delete('/:postid/like",{"_index":473,"title":{},"body":{"classes/PostCreateRequestBody.html":{},"classes/PostDetailsQueryParams.html":{},"controllers/PostsController.html":{}}}],["delete('/:userid/follow",{"_index":681,"title":{},"body":{"classes/UserCreateRequestBody.html":{},"classes/UserUpdateRequestBody.html":{},"controllers/UsersController.html":{}}}],["deletect",{"_index":579,"title":{},"body":{"injectables/PostsService.html":{}}}],["deleted",{"_index":466,"title":{},"body":{"classes/PostCreateRequestBody.html":{},"classes/PostDetailsQueryParams.html":{},"controllers/PostsController.html":{}}}],["deletedpost",{"_index":465,"title":{},"body":{"classes/PostCreateRequestBody.html":{},"classes/PostDetailsQueryParams.html":{},"controllers/PostsController.html":{}}}],["deletepost",{"_index":492,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["deletepost(@param('postid",{"_index":464,"title":{},"body":{"classes/PostCreateRequestBody.html":{},"classes/PostDetailsQueryParams.html":{},"controllers/PostsController.html":{}}}],["deletepost(id",{"_index":528,"title":{},"body":{"injectables/PostsService.html":{}}}],["deletepost(postid",{"_index":497,"title":{},"body":{"controllers/PostsController.html":{}}}],["deleteresult",{"_index":573,"title":{},"body":{"injectables/PostsService.html":{}}}],["deleteresult.affected",{"_index":575,"title":{},"body":{"injectables/PostsService.html":{}}}],["deleteuserfollowrelation",{"_index":760,"title":{},"body":{"injectables/UsersService.html":{}}}],["deleteuserfollowrelation(follower",{"_index":771,"title":{},"body":{"injectables/UsersService.html":{}}}],["denied",{"_index":1464,"title":{},"body":{"license.html":{}}}],["denominated",{"_index":1630,"title":{},"body":{"license.html":{}}}],["dependencies",{"_index":3,"title":{"dependencies.html":{}},"body":{"modules/ApiModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/LikesModule.html":{},"modules/MockLikesModule.html":{},"modules/MockPostsModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"overview.html":{}}}],["deprive",{"_index":1639,"title":{},"body":{"license.html":{}}}],["desc",{"_index":566,"title":{},"body":{"injectables/PostsService.html":{}}}],["description",{"_index":292,"title":{},"body":{"injectables/LikesService.html":{},"injectables/PostsService.html":{},"modules/ProdDbModule.html":{},"modules/TestDbModule.html":{},"injectables/UsersService.html":{},"classes/YooBaseEntity.html":{}}}],["design",{"_index":896,"title":{},"body":{"index.html":{}}}],["designated",{"_index":1386,"title":{},"body":{"license.html":{}}}],["designed",{"_index":898,"title":{},"body":{"index.html":{},"license.html":{}}}],["detail",{"_index":1703,"title":{},"body":{"license.html":{}}}],["details",{"_index":673,"title":{},"body":{"classes/UserCreateRequestBody.html":{},"classes/UserUpdateRequestBody.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"license.html":{}}}],["detect",{"_index":577,"title":{},"body":{"injectables/PostsService.html":{}}}],["determining",{"_index":1422,"title":{},"body":{"license.html":{}}}],["develop",{"_index":1766,"title":{},"body":{"license.html":{}}}],["developers",{"_index":1017,"title":{},"body":{"license.html":{}}}],["development",{"_index":922,"title":{},"body":{"index.html":{}}}],["differ",{"_index":1702,"title":{},"body":{"license.html":{}}}],["different",{"_index":1072,"title":{},"body":{"license.html":{}}}],["differently",{"_index":1495,"title":{},"body":{"license.html":{}}}],["direction",{"_index":1254,"title":{},"body":{"license.html":{}}}],["directions",{"_index":1394,"title":{},"body":{"license.html":{}}}],["directly",{"_index":1110,"title":{},"body":{"license.html":{}}}],["disclaim",{"_index":1292,"title":{},"body":{"license.html":{}}}],["disclaimer",{"_index":1718,"title":{},"body":{"license.html":{}}}],["disclaiming",{"_index":1492,"title":{},"body":{"license.html":{}}}],["discriminatory",{"_index":1656,"title":{},"body":{"license.html":{}}}],["discussion",{"_index":891,"title":{},"body":{"index.html":{}}}],["display",{"_index":1337,"title":{},"body":{"license.html":{}}}],["displayed",{"_index":1500,"title":{},"body":{"license.html":{}}}],["displays",{"_index":1136,"title":{},"body":{"license.html":{}}}],["distinguishing",{"_index":1707,"title":{},"body":{"license.html":{}}}],["distribute",{"_index":972,"title":{},"body":{"license.html":{}}}],["distributed",{"_index":1779,"title":{},"body":{"license.html":{}}}],["distributing",{"_index":1661,"title":{},"body":{"license.html":{}}}],["distribution",{"_index":1080,"title":{},"body":{"license.html":{}}}],["document",{"_index":975,"title":{},"body":{"license.html":{}}}],["documentation",{"_index":815,"title":{},"body":{"coverage.html":{}}}],["documented",{"_index":1473,"title":{},"body":{"license.html":{}}}],["doe",{"_index":384,"title":{},"body":{"classes/MockUsersRepository.html":{}}}],["doubtful",{"_index":1424,"title":{},"body":{"license.html":{}}}],["downstream",{"_index":1578,"title":{},"body":{"license.html":{}}}],["dropschema",{"_index":621,"title":{},"body":{"modules/ProdDbModule.html":{},"modules/TestDbModule.html":{}}}],["durable",{"_index":1365,"title":{},"body":{"license.html":{}}}],["dwelling",{"_index":1421,"title":{},"body":{"license.html":{}}}],["dynamically",{"_index":1214,"title":{},"body":{"license.html":{}}}],["e",{"_index":420,"title":{},"body":{"guards/OptionalAuthGuard.html":{},"guards/RequiredAuthGuard.html":{},"classes/TokenAuthorizer.html":{},"license.html":{}}}],["e2e",{"_index":930,"title":{},"body":{"index.html":{}}}],["each",{"_index":1092,"title":{},"body":{"license.html":{}}}],["earlier",{"_index":1104,"title":{},"body":{"license.html":{}}}],["effect",{"_index":1755,"title":{},"body":{"license.html":{}}}],["effected",{"_index":1289,"title":{},"body":{"license.html":{}}}],["effective",{"_index":1270,"title":{},"body":{"license.html":{}}}],["effectively",{"_index":1774,"title":{},"body":{"license.html":{}}}],["efforts",{"_index":1595,"title":{},"body":{"license.html":{}}}],["electronic",{"_index":1783,"title":{},"body":{"license.html":{}}}],["embodied",{"_index":1360,"title":{},"body":{"license.html":{}}}],["employer",{"_index":1793,"title":{},"body":{"license.html":{}}}],["enable",{"_index":1186,"title":{},"body":{"license.html":{}}}],["enables",{"_index":1127,"title":{},"body":{"license.html":{}}}],["encouraged",{"_index":1042,"title":{},"body":{"license.html":{}}}],["end",{"_index":916,"title":{},"body":{"index.html":{},"license.html":{}}}],["enforce",{"_index":1631,"title":{},"body":{"license.html":{}}}],["enforcing",{"_index":1295,"title":{},"body":{"license.html":{}}}],["ensure",{"_index":983,"title":{},"body":{"license.html":{}}}],["entered",{"_index":1667,"title":{},"body":{"license.html":{}}}],["entire",{"_index":1325,"title":{},"body":{"license.html":{}}}],["entirely",{"_index":1686,"title":{},"body":{"license.html":{}}}],["entities",{"_index":578,"title":{},"body":{"injectables/PostsService.html":{},"modules/ProdDbModule.html":{},"modules/TestDbModule.html":{},"classes/YooBaseEntity.html":{}}}],["entity",{"_index":262,"title":{},"body":{"classes/LikesEntity.html":{},"classes/Mention.html":{},"classes/PasswordEntity.html":{},"classes/PostEntity.html":{},"classes/SessionsEntity.html":{},"classes/UserEntity.html":{},"classes/UserFollowingEntity.html":{},"classes/YooBaseEntity.html":{},"license.html":{}}}],["entity('likes",{"_index":265,"title":{},"body":{"classes/LikesEntity.html":{}}}],["entity('passwords",{"_index":428,"title":{},"body":{"classes/PasswordEntity.html":{}}}],["entity('posts",{"_index":330,"title":{},"body":{"classes/Mention.html":{},"classes/PostEntity.html":{}}}],["entity('sessions",{"_index":629,"title":{},"body":{"classes/SessionsEntity.html":{}}}],["entity('user_followings",{"_index":721,"title":{},"body":{"classes/UserFollowingEntity.html":{}}}],["entity('users",{"_index":708,"title":{},"body":{"classes/UserEntity.html":{}}}],["entityrepository",{"_index":275,"title":{},"body":{"classes/LikesRepository.html":{},"classes/PostsRepository.html":{},"classes/UsersRepository.html":{}}}],["entityrepository(likesentity",{"_index":277,"title":{},"body":{"classes/LikesRepository.html":{}}}],["entityrepository(postentity",{"_index":518,"title":{},"body":{"classes/PostsRepository.html":{}}}],["entityrepository(userentity",{"_index":756,"title":{},"body":{"classes/UsersRepository.html":{}}}],["equivalent",{"_index":1241,"title":{},"body":{"license.html":{}}}],["essential",{"_index":1187,"title":{},"body":{"license.html":{}}}],["even",{"_index":1749,"title":{},"body":{"license.html":{}}}],["event",{"_index":1735,"title":{},"body":{"license.html":{}}}],["everyone",{"_index":969,"title":{},"body":{"license.html":{}}}],["exact",{"_index":1103,"title":{},"body":{"license.html":{}}}],["example",{"_index":1209,"title":{},"body":{"license.html":{}}}],["except",{"_index":1116,"title":{},"body":{"license.html":{}}}],["exceptions",{"_index":1479,"title":{},"body":{"license.html":{}}}],["excluded",{"_index":1410,"title":{},"body":{"license.html":{}}}],["excluding",{"_index":1671,"title":{},"body":{"license.html":{}}}],["exclusion",{"_index":1776,"title":{},"body":{"license.html":{}}}],["exclusive",{"_index":1622,"title":{},"body":{"license.html":{}}}],["exclusively",{"_index":1248,"title":{},"body":{"license.html":{}}}],["excuse",{"_index":1679,"title":{},"body":{"license.html":{}}}],["executable",{"_index":1176,"title":{},"body":{"license.html":{}}}],["execute",{"_index":1443,"title":{},"body":{"license.html":{}}}],["executing",{"_index":1117,"title":{},"body":{"license.html":{}}}],["executioncontext",{"_index":398,"title":{},"body":{"guards/OptionalAuthGuard.html":{},"guards/RequiredAuthGuard.html":{},"classes/TokenAuthorizer.html":{},"miscellaneous/variables.html":{}}}],["exercise",{"_index":1596,"title":{},"body":{"license.html":{}}}],["exercising",{"_index":1290,"title":{},"body":{"license.html":{}}}],["exist",{"_index":184,"title":{},"body":{"injectables/AuthService.html":{}}}],["existing",{"_index":171,"title":{},"body":{"injectables/AuthService.html":{}}}],["existinguser",{"_index":784,"title":{},"body":{"injectables/UsersService.html":{}}}],["existinguser.avatar",{"_index":788,"title":{},"body":{"injectables/UsersService.html":{}}}],["existinguser.bio",{"_index":786,"title":{},"body":{"injectables/UsersService.html":{}}}],["existinguser.name",{"_index":790,"title":{},"body":{"injectables/UsersService.html":{}}}],["expected",{"_index":1433,"title":{},"body":{"license.html":{}}}],["expects",{"_index":1432,"title":{},"body":{"license.html":{}}}],["explicitly",{"_index":1234,"title":{},"body":{"license.html":{}}}],["export",{"_index":27,"title":{},"body":{"modules/ApiModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/HashtagsController.html":{},"modules/HashtagsModule.html":{},"controllers/LikesController.html":{},"classes/LikesEntity.html":{},"modules/LikesModule.html":{},"classes/LikesRepository.html":{},"injectables/LikesService.html":{},"classes/LoginRequestBody.html":{},"classes/LoginResponseBody.html":{},"classes/Mention.html":{},"modules/MockLikesModule.html":{},"classes/MockLikesRepository.html":{},"modules/MockPostsModule.html":{},"classes/MockPostsRepository.html":{},"classes/MockUsersRepository.html":{},"guards/OptionalAuthGuard.html":{},"classes/PasswordEntity.html":{},"classes/PostCreateRequestBody.html":{},"classes/PostDetailsQueryParams.html":{},"classes/PostEntity.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"classes/PostsRepository.html":{},"injectables/PostsService.html":{},"modules/ProdDbModule.html":{},"guards/RequiredAuthGuard.html":{},"classes/SessionsEntity.html":{},"modules/TestDbModule.html":{},"classes/TokenAuthorizer.html":{},"classes/UserCreateRequestBody.html":{},"classes/UserEntity.html":{},"classes/UserFollowingEntity.html":{},"classes/UserUpdateRequestBody.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"classes/UsersRepository.html":{},"injectables/UsersService.html":{},"classes/YooBaseEntity.html":{}}}],["exports",{"_index":112,"title":{},"body":{"modules/AuthModule.html":{},"modules/LikesModule.html":{},"modules/MockLikesModule.html":{},"modules/MockPostsModule.html":{}}}],["express",{"_index":1627,"title":{},"body":{"license.html":{}}}],["expressed",{"_index":1720,"title":{},"body":{"license.html":{}}}],["expressly",{"_index":1533,"title":{},"body":{"license.html":{}}}],["extend",{"_index":1641,"title":{},"body":{"license.html":{}}}],["extended",{"_index":805,"title":{},"body":{"classes/YooBaseEntity.html":{},"license.html":{}}}],["extends",{"_index":240,"title":{},"body":{"classes/LikesEntity.html":{},"classes/LikesRepository.html":{},"classes/Mention.html":{},"classes/MockLikesRepository.html":{},"classes/MockPostsRepository.html":{},"classes/MockUsersRepository.html":{},"guards/OptionalAuthGuard.html":{},"classes/PasswordEntity.html":{},"classes/PostEntity.html":{},"classes/PostsRepository.html":{},"guards/RequiredAuthGuard.html":{},"classes/SessionsEntity.html":{},"classes/TokenAuthorizer.html":{},"classes/UserEntity.html":{},"classes/UserFollowingEntity.html":{},"classes/UsersRepository.html":{}}}],["extensions",{"_index":1342,"title":{},"body":{"license.html":{}}}],["extent",{"_index":1139,"title":{},"body":{"license.html":{}}}],["f",{"_index":1515,"title":{},"body":{"license.html":{}}}],["facilitating",{"_index":1694,"title":{},"body":{"license.html":{}}}],["facilities",{"_index":1249,"title":{},"body":{"license.html":{}}}],["fail",{"_index":1047,"title":{},"body":{"license.html":{}}}],["fails",{"_index":1548,"title":{},"body":{"license.html":{}}}],["failure",{"_index":1747,"title":{},"body":{"license.html":{}}}],["fair",{"_index":1240,"title":{},"body":{"license.html":{}}}],["false",{"_index":295,"title":{},"body":{"injectables/LikesService.html":{},"classes/PasswordEntity.html":{},"classes/UserEntity.html":{}}}],["family",{"_index":1417,"title":{},"body":{"license.html":{}}}],["fashion",{"_index":1101,"title":{},"body":{"license.html":{}}}],["fastify",{"_index":845,"title":{},"body":{"dependencies.html":{}}}],["favor",{"_index":1426,"title":{},"body":{"license.html":{}}}],["feature",{"_index":1143,"title":{},"body":{"license.html":{}}}],["features",{"_index":887,"title":{},"body":{"index.html":{}}}],["fee",{"_index":1316,"title":{},"body":{"license.html":{}}}],["figma",{"_index":899,"title":{},"body":{"index.html":{}}}],["file",{"_index":17,"title":{},"body":{"modules/ApiModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/HashtagsController.html":{},"modules/HashtagsModule.html":{},"controllers/LikesController.html":{},"classes/LikesEntity.html":{},"modules/LikesModule.html":{},"classes/LikesRepository.html":{},"injectables/LikesService.html":{},"classes/LoginRequestBody.html":{},"classes/LoginResponseBody.html":{},"classes/Mention.html":{},"modules/MockLikesModule.html":{},"classes/MockLikesRepository.html":{},"modules/MockPostsModule.html":{},"classes/MockPostsRepository.html":{},"classes/MockUsersRepository.html":{},"guards/OptionalAuthGuard.html":{},"classes/PasswordEntity.html":{},"classes/PostCreateRequestBody.html":{},"classes/PostDetailsQueryParams.html":{},"classes/PostEntity.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"classes/PostsRepository.html":{},"injectables/PostsService.html":{},"modules/ProdDbModule.html":{},"guards/RequiredAuthGuard.html":{},"classes/SessionsEntity.html":{},"modules/TestDbModule.html":{},"classes/TokenAuthorizer.html":{},"classes/UserCreateRequestBody.html":{},"classes/UserEntity.html":{},"classes/UserFollowingEntity.html":{},"classes/UserUpdateRequestBody.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"classes/UsersRepository.html":{},"injectables/UsersService.html":{},"classes/YooBaseEntity.html":{},"coverage.html":{},"license.html":{}}}],["files",{"_index":1211,"title":{},"body":{"license.html":{}}}],["filter",{"_index":549,"title":{},"body":{"injectables/PostsService.html":{},"index.html":{}}}],["finally",{"_index":1545,"title":{},"body":{"license.html":{}}}],["find",{"_index":543,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersService.html":{},"license.html":{}}}],["findone",{"_index":377,"title":{},"body":{"classes/MockUsersRepository.html":{}}}],["first",{"_index":1556,"title":{},"body":{"license.html":{}}}],["fitness",{"_index":1723,"title":{},"body":{"license.html":{}}}],["fixed",{"_index":1364,"title":{},"body":{"license.html":{}}}],["flow",{"_index":1221,"title":{},"body":{"license.html":{}}}],["follow",{"_index":769,"title":{},"body":{"injectables/UsersService.html":{},"license.html":{}}}],["followeduser",{"_index":679,"title":{},"body":{"classes/UserCreateRequestBody.html":{},"classes/UserUpdateRequestBody.html":{},"controllers/UsersController.html":{}}}],["followee",{"_index":712,"title":{},"body":{"classes/UserFollowingEntity.html":{},"injectables/UsersService.html":{}}}],["followee_count",{"_index":692,"title":{},"body":{"classes/UserEntity.html":{}}}],["followee_id",{"_index":723,"title":{},"body":{"classes/UserFollowingEntity.html":{}}}],["followee_id'})@manytoone(undefined",{"_index":713,"title":{},"body":{"classes/UserFollowingEntity.html":{}}}],["followeecount",{"_index":385,"title":{},"body":{"classes/MockUsersRepository.html":{},"classes/UserEntity.html":{}}}],["followeeid",{"_index":678,"title":{},"body":{"classes/UserCreateRequestBody.html":{},"classes/UserUpdateRequestBody.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["follower",{"_index":677,"title":{},"body":{"classes/UserCreateRequestBody.html":{},"classes/UserFollowingEntity.html":{},"classes/UserUpdateRequestBody.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["follower+followee",{"_index":719,"title":{},"body":{"classes/UserFollowingEntity.html":{}}}],["follower_count",{"_index":694,"title":{},"body":{"classes/UserEntity.html":{}}}],["follower_id",{"_index":722,"title":{},"body":{"classes/UserFollowingEntity.html":{}}}],["follower_id'})@manytoone(undefined",{"_index":715,"title":{},"body":{"classes/UserFollowingEntity.html":{}}}],["followercount",{"_index":386,"title":{},"body":{"classes/MockUsersRepository.html":{},"classes/UserEntity.html":{}}}],["following",{"_index":911,"title":{},"body":{"index.html":{},"license.html":{}}}],["followings.entity",{"_index":607,"title":{},"body":{"modules/ProdDbModule.html":{},"modules/TestDbModule.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["followings.entity.ts",{"_index":711,"title":{},"body":{"classes/UserFollowingEntity.html":{},"coverage.html":{}}}],["followings.entity.ts:11",{"_index":716,"title":{},"body":{"classes/UserFollowingEntity.html":{}}}],["followings.entity.ts:15",{"_index":714,"title":{},"body":{"classes/UserFollowingEntity.html":{}}}],["followuser",{"_index":676,"title":{},"body":{"classes/UserCreateRequestBody.html":{},"classes/UserUpdateRequestBody.html":{},"controllers/UsersController.html":{}}}],["followuser(follower",{"_index":733,"title":{},"body":{"controllers/UsersController.html":{}}}],["forbid",{"_index":1288,"title":{},"body":{"license.html":{}}}],["forbiddenexception",{"_index":643,"title":{},"body":{"classes/UserCreateRequestBody.html":{},"classes/UserUpdateRequestBody.html":{},"controllers/UsersController.html":{}}}],["forbiddenexception('you",{"_index":671,"title":{},"body":{"classes/UserCreateRequestBody.html":{},"classes/UserUpdateRequestBody.html":{},"controllers/UsersController.html":{}}}],["force",{"_index":1244,"title":{},"body":{"license.html":{}}}],["form",{"_index":1158,"title":{},"body":{"license.html":{}}}],["format",{"_index":1472,"title":{},"body":{"license.html":{}}}],["forms",{"_index":1355,"title":{},"body":{"license.html":{}}}],["found",{"_index":199,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{},"classes/UserCreateRequestBody.html":{},"classes/UserUpdateRequestBody.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{},"license.html":{}}}],["foundation",{"_index":966,"title":{},"body":{"license.html":{}}}],["framework",{"_index":879,"title":{},"body":{"index.html":{}}}],["free",{"_index":964,"title":{},"body":{"license.html":{}}}],["freedom",{"_index":993,"title":{},"body":{"license.html":{}}}],["fulfilling",{"_index":1273,"title":{},"body":{"license.html":{}}}],["full",{"_index":943,"title":{},"body":{"index.html":{},"license.html":{}}}],["function",{"_index":832,"title":{},"body":{"coverage.html":{}}}],["functioning",{"_index":1446,"title":{},"body":{"license.html":{}}}],["functions",{"_index":868,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["further",{"_index":885,"title":{},"body":{"index.html":{},"license.html":{}}}],["future",{"_index":798,"title":{},"body":{"injectables/UsersService.html":{},"license.html":{}}}],["general",{"_index":957,"title":{},"body":{"license.html":{}}}],["generally",{"_index":1207,"title":{},"body":{"license.html":{}}}],["generate",{"_index":1198,"title":{},"body":{"license.html":{}}}],["get('/:postid",{"_index":454,"title":{},"body":{"classes/PostCreateRequestBody.html":{},"classes/PostDetailsQueryParams.html":{},"controllers/PostsController.html":{}}}],["get('/:tag/posts",{"_index":213,"title":{},"body":{"controllers/HashtagsController.html":{}}}],["get('/:userid",{"_index":658,"title":{},"body":{"classes/UserCreateRequestBody.html":{},"classes/UserUpdateRequestBody.html":{},"controllers/UsersController.html":{}}}],["get('/:userid/followers",{"_index":685,"title":{},"body":{"classes/UserCreateRequestBody.html":{},"classes/UserUpdateRequestBody.html":{},"controllers/UsersController.html":{}}}],["get('/@:username",{"_index":654,"title":{},"body":{"classes/UserCreateRequestBody.html":{},"classes/UserUpdateRequestBody.html":{},"controllers/UsersController.html":{}}}],["get('/hello",{"_index":39,"title":{},"body":{"controllers/AppController.html":{}}}],["getallposts",{"_index":452,"title":{},"body":{"classes/PostCreateRequestBody.html":{},"classes/PostDetailsQueryParams.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["getallposts(authorid",{"_index":530,"title":{},"body":{"injectables/PostsService.html":{}}}],["getallposts(query",{"_index":500,"title":{},"body":{"controllers/PostsController.html":{}}}],["getfolloweesofuser",{"_index":688,"title":{},"body":{"classes/UserCreateRequestBody.html":{},"classes/UserUpdateRequestBody.html":{},"controllers/UsersController.html":{}}}],["getfollowersofuser",{"_index":686,"title":{},"body":{"classes/UserCreateRequestBody.html":{},"classes/UserUpdateRequestBody.html":{},"controllers/UsersController.html":{}}}],["gethashtags",{"_index":209,"title":{},"body":{"controllers/HashtagsController.html":{}}}],["gethello",{"_index":37,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["getlikedpost",{"_index":279,"title":{},"body":{"injectables/LikesService.html":{}}}],["getlikedpost(postid",{"_index":284,"title":{},"body":{"injectables/LikesService.html":{}}}],["getmany",{"_index":568,"title":{},"body":{"injectables/PostsService.html":{}}}],["getone",{"_index":320,"title":{},"body":{"injectables/LikesService.html":{}}}],["getpost",{"_index":521,"title":{},"body":{"injectables/PostsService.html":{}}}],["getpost(id",{"_index":533,"title":{},"body":{"injectables/PostsService.html":{}}}],["getpostdetails",{"_index":493,"title":{},"body":{"controllers/PostsController.html":{}}}],["getpostdetails(@param('postid",{"_index":455,"title":{},"body":{"classes/PostCreateRequestBody.html":{},"classes/PostDetailsQueryParams.html":{},"controllers/PostsController.html":{}}}],["getpostdetails(postid",{"_index":502,"title":{},"body":{"controllers/PostsController.html":{}}}],["getpostsforhashtag",{"_index":210,"title":{},"body":{"controllers/HashtagsController.html":{}}}],["getpostsforhashtag(@param('tag",{"_index":224,"title":{},"body":{"controllers/HashtagsController.html":{}}}],["getpostsforhashtag(tag",{"_index":212,"title":{},"body":{"controllers/HashtagsController.html":{}}}],["getrepositorytoken(likesentity",{"_index":1807,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getrepositorytoken(passwordentity",{"_index":1809,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getrepositorytoken(postentity",{"_index":1811,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getrepositorytoken(sessionsentity",{"_index":1812,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getrepositorytoken(userentity",{"_index":1814,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getrepositorytoken(userfollowingentity",{"_index":1813,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getting",{"_index":870,"title":{"index.html":{},"license.html":{}},"body":{}}],["getuserbyuserid",{"_index":729,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["getuserbyuserid(@param('userid",{"_index":659,"title":{},"body":{"classes/UserCreateRequestBody.html":{},"classes/UserUpdateRequestBody.html":{},"controllers/UsersController.html":{}}}],["getuserbyuserid(userid",{"_index":740,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["getuserbyusername",{"_index":730,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["getuserbyusername(@param('username",{"_index":655,"title":{},"body":{"classes/UserCreateRequestBody.html":{},"classes/UserUpdateRequestBody.html":{},"controllers/UsersController.html":{}}}],["getuserbyusername(username",{"_index":742,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["getuserfromsessiontoken",{"_index":130,"title":{},"body":{"injectables/AuthService.html":{}}}],["getuserfromsessiontoken(token",{"_index":148,"title":{},"body":{"injectables/AuthService.html":{}}}],["give",{"_index":1312,"title":{},"body":{"license.html":{}}}],["given",{"_index":782,"title":{},"body":{"injectables/UsersService.html":{},"license.html":{}}}],["gives",{"_index":1025,"title":{},"body":{"license.html":{}}}],["giving",{"_index":1320,"title":{},"body":{"license.html":{}}}],["global",{"_index":113,"title":{},"body":{"modules/AuthModule.html":{},"modules/ProdDbModule.html":{},"modules/TestDbModule.html":{}}}],["gnu",{"_index":953,"title":{},"body":{"index.html":{},"license.html":{}}}],["goals",{"_index":1071,"title":{},"body":{"license.html":{}}}],["governed",{"_index":1482,"title":{},"body":{"license.html":{}}}],["gpl",{"_index":1073,"title":{},"body":{"license.html":{}}}],["grant",{"_index":933,"title":{},"body":{"index.html":{},"license.html":{}}}],["granted",{"_index":1229,"title":{},"body":{"license.html":{}}}],["grants",{"_index":1571,"title":{},"body":{"license.html":{}}}],["graph",{"_index":1801,"title":{},"body":{"modules.html":{}}}],["gratis",{"_index":1388,"title":{},"body":{"license.html":{}}}],["greatest",{"_index":1767,"title":{},"body":{"license.html":{}}}],["guarantee",{"_index":998,"title":{},"body":{"license.html":{}}}],["guard",{"_index":391,"title":{"guards/OptionalAuthGuard.html":{},"guards/RequiredAuthGuard.html":{}},"body":{"coverage.html":{}}}],["guards",{"_index":393,"title":{},"body":{"guards/OptionalAuthGuard.html":{},"guards/RequiredAuthGuard.html":{},"overview.html":{}}}],["hash",{"_index":151,"title":{},"body":{"injectables/AuthService.html":{}}}],["hash(password",{"_index":202,"title":{},"body":{"injectables/AuthService.html":{}}}],["hashtag",{"_index":227,"title":{},"body":{"controllers/HashtagsController.html":{},"injectables/PostsService.html":{}}}],["hashtags",{"_index":208,"title":{},"body":{"controllers/HashtagsController.html":{},"classes/Mention.html":{},"classes/PostCreateRequestBody.html":{},"classes/PostDetailsQueryParams.html":{},"classes/PostEntity.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"index.html":{}}}],["hashtags.controller",{"_index":229,"title":{},"body":{"modules/HashtagsModule.html":{}}}],["hashtags.length",{"_index":563,"title":{},"body":{"injectables/PostsService.html":{}}}],["hashtags/hashtags.module",{"_index":23,"title":{},"body":{"modules/ApiModule.html":{}}}],["hashtags/{tag}/posts",{"_index":950,"title":{},"body":{"index.html":{}}}],["hashtagscontroller",{"_index":206,"title":{"controllers/HashtagsController.html":{}},"body":{"controllers/HashtagsController.html":{},"modules/HashtagsModule.html":{},"coverage.html":{}}}],["hashtagsmodule",{"_index":8,"title":{"modules/HashtagsModule.html":{}},"body":{"modules/ApiModule.html":{},"modules/HashtagsModule.html":{},"modules.html":{},"overview.html":{}}}],["having",{"_index":1247,"title":{},"body":{"license.html":{}}}],["header",{"_index":410,"title":{},"body":{"guards/OptionalAuthGuard.html":{},"guards/RequiredAuthGuard.html":{},"classes/TokenAuthorizer.html":{}}}],["heartened",{"_index":1041,"title":{},"body":{"license.html":{}}}],["hello",{"_index":64,"title":{},"body":{"injectables/AppService.html":{}}}],["helper",{"_index":308,"title":{},"body":{"injectables/LikesService.html":{},"injectables/PostsService.html":{}}}],["hereafter",{"_index":1618,"title":{},"body":{"license.html":{}}}],["holder",{"_index":1541,"title":{},"body":{"license.html":{}}}],["holders",{"_index":1491,"title":{},"body":{"license.html":{}}}],["hope",{"_index":1780,"title":{},"body":{"license.html":{}}}],["hosts",{"_index":1397,"title":{},"body":{"license.html":{}}}],["household",{"_index":1418,"title":{},"body":{"license.html":{}}}],["hstore",{"_index":857,"title":{},"body":{"dependencies.html":{}}}],["http://fsf.org",{"_index":968,"title":{},"body":{"license.html":{}}}],["http://www.gnu.org/licenses",{"_index":1797,"title":{},"body":{"license.html":{}}}],["https://github.com/scaleracademy/open",{"_index":893,"title":{},"body":{"index.html":{}}}],["id",{"_index":197,"title":{},"body":{"injectables/AuthService.html":{},"classes/LikesEntity.html":{},"injectables/LikesService.html":{},"classes/Mention.html":{},"classes/MockUsersRepository.html":{},"classes/PasswordEntity.html":{},"classes/PostCreateRequestBody.html":{},"classes/PostDetailsQueryParams.html":{},"classes/PostEntity.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/SessionsEntity.html":{},"classes/UserEntity.html":{},"classes/UserFollowingEntity.html":{},"injectables/UsersService.html":{},"classes/YooBaseEntity.html":{}}}],["idea",{"_index":883,"title":{},"body":{"index.html":{}}}],["identifiable",{"_index":1645,"title":{},"body":{"license.html":{}}}],["identifier",{"_index":816,"title":{},"body":{"coverage.html":{}}}],["images",{"_index":336,"title":{},"body":{"classes/Mention.html":{},"classes/PostEntity.html":{}}}],["implement",{"_index":548,"title":{},"body":{"injectables/PostsService.html":{},"license.html":{}}}],["implementation",{"_index":544,"title":{},"body":{"injectables/PostsService.html":{},"license.html":{}}}],["implements",{"_index":416,"title":{},"body":{"guards/OptionalAuthGuard.html":{},"guards/RequiredAuthGuard.html":{},"classes/TokenAuthorizer.html":{}}}],["implied",{"_index":1672,"title":{},"body":{"license.html":{}}}],["import",{"_index":20,"title":{},"body":{"modules/ApiModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/HashtagsController.html":{},"modules/HashtagsModule.html":{},"controllers/LikesController.html":{},"classes/LikesEntity.html":{},"modules/LikesModule.html":{},"classes/LikesRepository.html":{},"injectables/LikesService.html":{},"classes/LoginRequestBody.html":{},"classes/LoginResponseBody.html":{},"classes/Mention.html":{},"modules/MockLikesModule.html":{},"classes/MockLikesRepository.html":{},"modules/MockPostsModule.html":{},"classes/MockPostsRepository.html":{},"classes/MockUsersRepository.html":{},"guards/OptionalAuthGuard.html":{},"classes/PasswordEntity.html":{},"classes/PostCreateRequestBody.html":{},"classes/PostDetailsQueryParams.html":{},"classes/PostEntity.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"classes/PostsRepository.html":{},"injectables/PostsService.html":{},"modules/ProdDbModule.html":{},"guards/RequiredAuthGuard.html":{},"classes/SessionsEntity.html":{},"modules/TestDbModule.html":{},"classes/TokenAuthorizer.html":{},"classes/UserCreateRequestBody.html":{},"classes/UserEntity.html":{},"classes/UserFollowingEntity.html":{},"classes/UserUpdateRequestBody.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"classes/UsersRepository.html":{},"injectables/UsersService.html":{},"classes/YooBaseEntity.html":{},"license.html":{}}}],["importing",{"_index":1609,"title":{},"body":{"license.html":{}}}],["imports",{"_index":19,"title":{},"body":{"modules/ApiModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/LikesModule.html":{},"modules/PostsModule.html":{},"modules/ProdDbModule.html":{},"modules/TestDbModule.html":{},"modules/UsersModule.html":{}}}],["impose",{"_index":1520,"title":{},"body":{"license.html":{}}}],["imposed",{"_index":1676,"title":{},"body":{"license.html":{}}}],["improvements",{"_index":1033,"title":{},"body":{"license.html":{}}}],["inability",{"_index":1741,"title":{},"body":{"license.html":{}}}],["inaccurate",{"_index":1744,"title":{},"body":{"license.html":{}}}],["inc",{"_index":967,"title":{},"body":{"license.html":{}}}],["incidental",{"_index":1738,"title":{},"body":{"license.html":{}}}],["include",{"_index":1177,"title":{},"body":{"license.html":{}}}],["included",{"_index":1179,"title":{},"body":{"license.html":{}}}],["includes",{"_index":1121,"title":{},"body":{"license.html":{}}}],["including",{"_index":1200,"title":{},"body":{"license.html":{}}}],["inclusion",{"_index":1352,"title":{},"body":{"license.html":{}}}],["incorporate",{"_index":1039,"title":{},"body":{"license.html":{}}}],["incorporated",{"_index":1695,"title":{},"body":{"license.html":{}}}],["incorporation",{"_index":1420,"title":{},"body":{"license.html":{}}}],["indemnification",{"_index":1516,"title":{},"body":{"license.html":{}}}],["independent",{"_index":1340,"title":{},"body":{"license.html":{}}}],["index",{"_index":35,"title":{"index.html":{}},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/HashtagsController.html":{},"classes/LikesEntity.html":{},"injectables/LikesService.html":{},"classes/LoginRequestBody.html":{},"classes/LoginResponseBody.html":{},"classes/Mention.html":{},"classes/MockUsersRepository.html":{},"guards/OptionalAuthGuard.html":{},"classes/PasswordEntity.html":{},"classes/PostCreateRequestBody.html":{},"classes/PostDetailsQueryParams.html":{},"classes/PostEntity.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"guards/RequiredAuthGuard.html":{},"classes/SessionsEntity.html":{},"classes/TokenAuthorizer.html":{},"classes/UserCreateRequestBody.html":{},"classes/UserEntity.html":{},"classes/UserFollowingEntity.html":{},"classes/UserUpdateRequestBody.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/YooBaseEntity.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["indicate",{"_index":1575,"title":{},"body":{"license.html":{}}}],["indicating",{"_index":1529,"title":{},"body":{"license.html":{}}}],["individual",{"_index":1350,"title":{},"body":{"license.html":{}}}],["individuals",{"_index":1097,"title":{},"body":{"license.html":{}}}],["industrial",{"_index":1436,"title":{},"body":{"license.html":{}}}],["info",{"_index":15,"title":{},"body":{"modules/ApiModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/HashtagsController.html":{},"modules/HashtagsModule.html":{},"controllers/LikesController.html":{},"classes/LikesEntity.html":{},"modules/LikesModule.html":{},"classes/LikesRepository.html":{},"injectables/LikesService.html":{},"classes/LoginRequestBody.html":{},"classes/LoginResponseBody.html":{},"classes/Mention.html":{},"modules/MockLikesModule.html":{},"classes/MockLikesRepository.html":{},"modules/MockPostsModule.html":{},"classes/MockPostsRepository.html":{},"classes/MockUsersRepository.html":{},"guards/OptionalAuthGuard.html":{},"classes/PasswordEntity.html":{},"classes/PostCreateRequestBody.html":{},"classes/PostDetailsQueryParams.html":{},"classes/PostEntity.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"classes/PostsRepository.html":{},"injectables/PostsService.html":{},"modules/ProdDbModule.html":{},"guards/RequiredAuthGuard.html":{},"classes/SessionsEntity.html":{},"modules/TestDbModule.html":{},"classes/TokenAuthorizer.html":{},"classes/UserCreateRequestBody.html":{},"classes/UserEntity.html":{},"classes/UserFollowingEntity.html":{},"classes/UserUpdateRequestBody.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"classes/UsersRepository.html":{},"injectables/UsersService.html":{},"classes/YooBaseEntity.html":{}}}],["inform",{"_index":1403,"title":{},"body":{"license.html":{}}}],["information",{"_index":886,"title":{},"body":{"index.html":{},"license.html":{}}}],["infringe",{"_index":1573,"title":{},"body":{"license.html":{}}}],["infringed",{"_index":1606,"title":{},"body":{"license.html":{}}}],["infringement",{"_index":1113,"title":{},"body":{"license.html":{}}}],["inherited",{"_index":253,"title":{},"body":{"classes/LikesEntity.html":{},"classes/PasswordEntity.html":{},"classes/PostEntity.html":{},"classes/SessionsEntity.html":{},"classes/UserEntity.html":{},"classes/UserFollowingEntity.html":{}}}],["initial",{"_index":906,"title":{},"body":{"index.html":{}}}],["initiate",{"_index":1599,"title":{},"body":{"license.html":{}}}],["inject",{"_index":401,"title":{},"body":{"guards/OptionalAuthGuard.html":{},"guards/RequiredAuthGuard.html":{},"classes/TokenAuthorizer.html":{}}}],["injectable",{"_index":60,"title":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/LikesService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/LikesService.html":{},"guards/OptionalAuthGuard.html":{},"injectables/PostsService.html":{},"guards/RequiredAuthGuard.html":{},"classes/TokenAuthorizer.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["injectables",{"_index":61,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/LikesService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["injectrepository",{"_index":162,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["injectrepository(passwordentity",{"_index":168,"title":{},"body":{"injectables/AuthService.html":{}}}],["injectrepository(postentity",{"_index":542,"title":{},"body":{"injectables/PostsService.html":{}}}],["injectrepository(sessionsentity",{"_index":169,"title":{},"body":{"injectables/AuthService.html":{}}}],["injectrepository(userentity",{"_index":167,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["injectrepository(userfollowingentity",{"_index":781,"title":{},"body":{"injectables/UsersService.html":{}}}],["install",{"_index":1199,"title":{},"body":{"license.html":{}}}],["installation",{"_index":918,"title":{},"body":{"index.html":{},"license.html":{}}}],["installed",{"_index":1459,"title":{},"body":{"license.html":{}}}],["installrunning",{"_index":920,"title":{},"body":{"index.html":{}}}],["intact",{"_index":1305,"title":{},"body":{"license.html":{}}}],["intended",{"_index":997,"title":{},"body":{"license.html":{}}}],["intention",{"_index":1293,"title":{},"body":{"license.html":{}}}],["interact",{"_index":1786,"title":{},"body":{"license.html":{}}}],["interacting",{"_index":1689,"title":{},"body":{"license.html":{}}}],["interaction",{"_index":1130,"title":{},"body":{"license.html":{}}}],["interactive",{"_index":1134,"title":{},"body":{"license.html":{}}}],["interchange",{"_index":1367,"title":{},"body":{"license.html":{}}}],["interest",{"_index":1592,"title":{},"body":{"license.html":{}}}],["interface",{"_index":1135,"title":{},"body":{"license.html":{}}}],["interfaces",{"_index":1166,"title":{},"body":{"license.html":{}}}],["interfered",{"_index":1448,"title":{},"body":{"license.html":{}}}],["interpretation",{"_index":1753,"title":{},"body":{"license.html":{}}}],["interpreter",{"_index":1195,"title":{},"body":{"license.html":{}}}],["intimate",{"_index":1218,"title":{},"body":{"license.html":{}}}],["invalidate",{"_index":1333,"title":{},"body":{"license.html":{}}}],["irrevocable",{"_index":1231,"title":{},"body":{"license.html":{}}}],["item",{"_index":1154,"title":{},"body":{"license.html":{}}}],["itself",{"_index":1465,"title":{},"body":{"license.html":{}}}],["jam",{"_index":903,"title":{},"body":{"index.html":{}}}],["john",{"_index":383,"title":{},"body":{"classes/MockUsersRepository.html":{}}}],["johndoe",{"_index":389,"title":{},"body":{"classes/MockUsersRepository.html":{}}}],["joincolumn",{"_index":263,"title":{},"body":{"classes/LikesEntity.html":{},"classes/Mention.html":{},"classes/PasswordEntity.html":{},"classes/PostEntity.html":{},"classes/SessionsEntity.html":{},"classes/UserFollowingEntity.html":{}}}],["joincolumn({name",{"_index":424,"title":{},"body":{"classes/PasswordEntity.html":{},"classes/SessionsEntity.html":{},"classes/UserFollowingEntity.html":{}}}],["keep",{"_index":1304,"title":{},"body":{"license.html":{}}}],["kernel",{"_index":1188,"title":{},"body":{"license.html":{}}}],["key",{"_index":1475,"title":{},"body":{"license.html":{}}}],["keys",{"_index":1441,"title":{},"body":{"license.html":{}}}],["kind",{"_index":1126,"title":{},"body":{"license.html":{}}}],["kinds",{"_index":980,"title":{},"body":{"license.html":{}}}],["know",{"_index":1015,"title":{},"body":{"license.html":{}}}],["knowingly",{"_index":1635,"title":{},"body":{"license.html":{}}}],["knowledge",{"_index":1642,"title":{},"body":{"license.html":{}}}],["language",{"_index":1170,"title":{},"body":{"license.html":{}}}],["larger",{"_index":1344,"title":{},"body":{"license.html":{}}}],["later",{"_index":1710,"title":{},"body":{"license.html":{}}}],["law",{"_index":1115,"title":{},"body":{"license.html":{}}}],["laws",{"_index":1085,"title":{},"body":{"license.html":{}}}],["lawsuit",{"_index":1604,"title":{},"body":{"license.html":{}}}],["lazy",{"_index":626,"title":{},"body":{"classes/SessionsEntity.html":{},"classes/UserEntity.html":{}}}],["leads",{"_index":1789,"title":{},"body":{"license.html":{}}}],["leftjoinandselect('likes.post",{"_index":316,"title":{},"body":{"injectables/LikesService.html":{}}}],["leftjoinandselect('likes.user",{"_index":317,"title":{},"body":{"injectables/LikesService.html":{}}}],["leftjoinandselect('origpost.author",{"_index":556,"title":{},"body":{"injectables/PostsService.html":{}}}],["leftjoinandselect('posts.author",{"_index":553,"title":{},"body":{"injectables/PostsService.html":{}}}],["leftjoinandselect('posts.origpost",{"_index":554,"title":{},"body":{"injectables/PostsService.html":{}}}],["leftjoinandselect('posts.replyto",{"_index":558,"title":{},"body":{"injectables/PostsService.html":{}}}],["leftjoinandselect('replyto.author",{"_index":560,"title":{},"body":{"injectables/PostsService.html":{}}}],["legal",{"_index":1026,"title":{},"body":{"license.html":{}}}],["length",{"_index":331,"title":{},"body":{"classes/Mention.html":{},"classes/PostEntity.html":{},"classes/UserEntity.html":{}}}],["letting",{"_index":1052,"title":{},"body":{"license.html":{}}}],["liability",{"_index":1494,"title":{},"body":{"license.html":{}}}],["liable",{"_index":1112,"title":{},"body":{"license.html":{}}}],["libraries",{"_index":1175,"title":{},"body":{"license.html":{}}}],["library",{"_index":1411,"title":{},"body":{"license.html":{}}}],["license",{"_index":951,"title":{"license.html":{}},"body":{"index.html":{},"license.html":{}}}],["licensed",{"_index":1091,"title":{},"body":{"license.html":{}}}],["licensee",{"_index":1093,"title":{},"body":{"license.html":{}}}],["licensees",{"_index":1095,"title":{},"body":{"license.html":{}}}],["licenses",{"_index":989,"title":{},"body":{"license.html":{}}}],["licensing",{"_index":1577,"title":{},"body":{"license.html":{}}}],["licensors",{"_index":1508,"title":{},"body":{"license.html":{}}}],["like/unlike",{"_index":596,"title":{},"body":{"injectables/PostsService.html":{}}}],["like_count",{"_index":340,"title":{},"body":{"classes/Mention.html":{},"classes/PostEntity.html":{}}}],["likecount",{"_index":342,"title":{},"body":{"classes/Mention.html":{},"classes/PostEntity.html":{}}}],["liked",{"_index":310,"title":{},"body":{"injectables/LikesService.html":{},"classes/PostCreateRequestBody.html":{},"classes/PostDetailsQueryParams.html":{},"controllers/PostsController.html":{}}}],["liked/unliked",{"_index":311,"title":{},"body":{"injectables/LikesService.html":{}}}],["likedpost",{"_index":303,"title":{},"body":{"injectables/LikesService.html":{},"classes/PostCreateRequestBody.html":{},"classes/PostDetailsQueryParams.html":{},"controllers/PostsController.html":{}}}],["likepost",{"_index":280,"title":{},"body":{"injectables/LikesService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["likepost(@param('postid",{"_index":469,"title":{},"body":{"classes/PostCreateRequestBody.html":{},"classes/PostDetailsQueryParams.html":{},"controllers/PostsController.html":{}}}],["likepost(post",{"_index":287,"title":{},"body":{"injectables/LikesService.html":{}}}],["likepost(postid",{"_index":504,"title":{},"body":{"controllers/PostsController.html":{}}}],["likepost(token",{"_index":535,"title":{},"body":{"injectables/PostsService.html":{}}}],["likes",{"_index":232,"title":{},"body":{"controllers/LikesController.html":{}}}],["likes.controller",{"_index":270,"title":{},"body":{"modules/LikesModule.html":{}}}],["likes.entity",{"_index":276,"title":{},"body":{"classes/LikesRepository.html":{},"injectables/LikesService.html":{}}}],["likes.repository",{"_index":272,"title":{},"body":{"modules/LikesModule.html":{},"injectables/LikesService.html":{}}}],["likes.service",{"_index":234,"title":{},"body":{"controllers/LikesController.html":{},"modules/LikesModule.html":{}}}],["likes/likes.module",{"_index":26,"title":{},"body":{"modules/ApiModule.html":{}}}],["likescontroller",{"_index":230,"title":{"controllers/LikesController.html":{}},"body":{"controllers/LikesController.html":{},"modules/LikesModule.html":{},"coverage.html":{}}}],["likesentity",{"_index":237,"title":{"classes/LikesEntity.html":{}},"body":{"classes/LikesEntity.html":{},"classes/LikesRepository.html":{},"injectables/LikesService.html":{},"classes/MockLikesRepository.html":{},"modules/ProdDbModule.html":{},"modules/TestDbModule.html":{},"coverage.html":{}}}],["likesmodule",{"_index":9,"title":{"modules/LikesModule.html":{}},"body":{"modules/ApiModule.html":{},"modules/LikesModule.html":{},"modules/PostsModule.html":{},"modules.html":{},"overview.html":{}}}],["likesrepository",{"_index":271,"title":{"classes/LikesRepository.html":{}},"body":{"modules/LikesModule.html":{},"classes/LikesRepository.html":{},"injectables/LikesService.html":{},"coverage.html":{}}}],["likesservice",{"_index":233,"title":{"injectables/LikesService.html":{}},"body":{"controllers/LikesController.html":{},"modules/LikesModule.html":{},"injectables/LikesService.html":{},"modules/MockLikesModule.html":{},"modules/MockPostsModule.html":{},"injectables/PostsService.html":{},"coverage.html":{},"overview.html":{}}}],["likeunlikeposthelper",{"_index":522,"title":{},"body":{"injectables/PostsService.html":{}}}],["likeunlikeposthelper(token",{"_index":537,"title":{},"body":{"injectables/PostsService.html":{}}}],["likewise",{"_index":1569,"title":{},"body":{"license.html":{}}}],["limit",{"_index":547,"title":{},"body":{"injectables/PostsService.html":{},"license.html":{}}}],["limit(100",{"_index":567,"title":{},"body":{"injectables/PostsService.html":{}}}],["limitation",{"_index":1734,"title":{},"body":{"license.html":{}}}],["limited",{"_index":1721,"title":{},"body":{"license.html":{}}}],["limiting",{"_index":1493,"title":{},"body":{"license.html":{}}}],["line",{"_index":1777,"title":{},"body":{"license.html":{}}}],["link",{"_index":1696,"title":{},"body":{"license.html":{}}}],["linked",{"_index":1215,"title":{},"body":{"license.html":{}}}],["list",{"_index":1149,"title":{},"body":{"license.html":{}}}],["litigation",{"_index":1600,"title":{},"body":{"license.html":{}}}],["local",{"_index":1754,"title":{},"body":{"license.html":{}}}],["logger",{"_index":614,"title":{},"body":{"modules/ProdDbModule.html":{},"modules/TestDbModule.html":{}}}],["logging",{"_index":617,"title":{},"body":{"modules/ProdDbModule.html":{},"modules/TestDbModule.html":{}}}],["logic",{"_index":222,"title":{},"body":{"controllers/HashtagsController.html":{}}}],["login",{"_index":71,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(@body",{"_index":99,"title":{},"body":{"controllers/AuthController.html":{},"classes/LoginRequestBody.html":{},"classes/LoginResponseBody.html":{}}}],["login(body",{"_index":72,"title":{},"body":{"controllers/AuthController.html":{}}}],["loginrequestbody",{"_index":73,"title":{"classes/LoginRequestBody.html":{}},"body":{"controllers/AuthController.html":{},"classes/LoginRequestBody.html":{},"classes/LoginResponseBody.html":{},"coverage.html":{}}}],["loginresponsebody",{"_index":92,"title":{"classes/LoginResponseBody.html":{}},"body":{"controllers/AuthController.html":{},"classes/LoginRequestBody.html":{},"classes/LoginResponseBody.html":{},"coverage.html":{}}}],["loginresponsebody(session.id",{"_index":107,"title":{},"body":{"controllers/AuthController.html":{},"classes/LoginRequestBody.html":{},"classes/LoginResponseBody.html":{}}}],["loginresponsebody})@post('/login",{"_index":75,"title":{},"body":{"controllers/AuthController.html":{}}}],["long",{"_index":1242,"title":{},"body":{"license.html":{}}}],["loss",{"_index":1742,"title":{},"body":{"license.html":{}}}],["losses",{"_index":1745,"title":{},"body":{"license.html":{}}}],["machine",{"_index":1357,"title":{},"body":{"license.html":{}}}],["made",{"_index":1034,"title":{},"body":{"license.html":{}}}],["mail",{"_index":1785,"title":{},"body":{"license.html":{}}}],["maintain",{"_index":1392,"title":{},"body":{"license.html":{}}}],["major",{"_index":1182,"title":{},"body":{"license.html":{}}}],["make",{"_index":1001,"title":{},"body":{"license.html":{}}}],["makes",{"_index":1263,"title":{},"body":{"license.html":{}}}],["making",{"_index":1050,"title":{},"body":{"license.html":{}}}],["manner",{"_index":1619,"title":{},"body":{"license.html":{}}}],["many",{"_index":1040,"title":{},"body":{"license.html":{}}}],["manytoone",{"_index":264,"title":{},"body":{"classes/LikesEntity.html":{},"classes/Mention.html":{},"classes/PostEntity.html":{},"classes/SessionsEntity.html":{},"classes/UserFollowingEntity.html":{}}}],["manytoone(undefined)@joincolumn({name",{"_index":245,"title":{},"body":{"classes/LikesEntity.html":{},"classes/PostEntity.html":{}}}],["march",{"_index":1669,"title":{},"body":{"license.html":{}}}],["marked",{"_index":1504,"title":{},"body":{"license.html":{}}}],["marks",{"_index":1514,"title":{},"body":{"license.html":{}}}],["masks",{"_index":1088,"title":{},"body":{"license.html":{}}}],["matching",{"_index":30,"title":{},"body":{"modules/ApiModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/HashtagsController.html":{},"modules/HashtagsModule.html":{},"controllers/LikesController.html":{},"classes/LikesEntity.html":{},"modules/LikesModule.html":{},"classes/LikesRepository.html":{},"injectables/LikesService.html":{},"classes/LoginRequestBody.html":{},"classes/LoginResponseBody.html":{},"classes/Mention.html":{},"modules/MockLikesModule.html":{},"classes/MockLikesRepository.html":{},"modules/MockPostsModule.html":{},"classes/MockPostsRepository.html":{},"classes/MockUsersRepository.html":{},"guards/OptionalAuthGuard.html":{},"classes/PasswordEntity.html":{},"classes/PostCreateRequestBody.html":{},"classes/PostDetailsQueryParams.html":{},"classes/PostEntity.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"classes/PostsRepository.html":{},"injectables/PostsService.html":{},"modules/ProdDbModule.html":{},"guards/RequiredAuthGuard.html":{},"classes/SessionsEntity.html":{},"modules/TestDbModule.html":{},"classes/TokenAuthorizer.html":{},"classes/UserCreateRequestBody.html":{},"classes/UserEntity.html":{},"classes/UserFollowingEntity.html":{},"classes/UserUpdateRequestBody.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"classes/UsersRepository.html":{},"injectables/UsersService.html":{},"classes/YooBaseEntity.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["matchpasshash",{"_index":132,"title":{},"body":{"injectables/AuthService.html":{}}}],["matchpasshash(password",{"_index":150,"title":{},"body":{"injectables/AuthService.html":{}}}],["material",{"_index":1251,"title":{},"body":{"license.html":{}}}],["materially",{"_index":1466,"title":{},"body":{"license.html":{}}}],["meaning",{"_index":1524,"title":{},"body":{"license.html":{}}}],["means",{"_index":1084,"title":{},"body":{"license.html":{}}}],["measure",{"_index":1272,"title":{},"body":{"license.html":{}}}],["measures",{"_index":1285,"title":{},"body":{"license.html":{}}}],["medium",{"_index":1300,"title":{},"body":{"license.html":{}}}],["meet",{"_index":1318,"title":{},"body":{"license.html":{}}}],["meets",{"_index":1155,"title":{},"body":{"license.html":{}}}],["mention",{"_index":324,"title":{"classes/Mention.html":{}},"body":{"classes/Mention.html":{},"classes/PostEntity.html":{},"coverage.html":{}}}],["mentions",{"_index":345,"title":{},"body":{"classes/Mention.html":{},"classes/PostEntity.html":{},"injectables/PostsService.html":{},"index.html":{}}}],["menu",{"_index":1152,"title":{},"body":{"license.html":{}}}],["merchantability",{"_index":1722,"title":{},"body":{"license.html":{}}}],["mere",{"_index":1129,"title":{},"body":{"license.html":{}}}],["merging",{"_index":1588,"title":{},"body":{"license.html":{}}}],["met",{"_index":1233,"title":{},"body":{"license.html":{}}}],["metadata",{"_index":860,"title":{},"body":{"dependencies.html":{}}}],["method",{"_index":309,"title":{},"body":{"injectables/LikesService.html":{},"injectables/PostsService.html":{}}}],["methods",{"_index":36,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/HashtagsController.html":{},"injectables/LikesService.html":{},"classes/MockUsersRepository.html":{},"guards/OptionalAuthGuard.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"guards/RequiredAuthGuard.html":{},"classes/TokenAuthorizer.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"license.html":{}}}],["miscellaneous",{"_index":867,"title":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["misrepresentation",{"_index":1502,"title":{},"body":{"license.html":{}}}],["mocklikesmodule",{"_index":350,"title":{"modules/MockLikesModule.html":{}},"body":{"modules/MockLikesModule.html":{},"modules.html":{},"overview.html":{}}}],["mocklikesrepository",{"_index":358,"title":{"classes/MockLikesRepository.html":{}},"body":{"classes/MockLikesRepository.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["mocklikesrepositoryprovider",{"_index":355,"title":{},"body":{"modules/MockLikesModule.html":{},"modules/MockPostsModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["mockpasswordrepositoryprovider",{"_index":371,"title":{},"body":{"modules/MockPostsModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["mockpostsmodule",{"_index":361,"title":{"modules/MockPostsModule.html":{}},"body":{"modules/MockPostsModule.html":{},"modules.html":{},"overview.html":{}}}],["mockpostsrepository",{"_index":373,"title":{"classes/MockPostsRepository.html":{}},"body":{"classes/MockPostsRepository.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["mockpostsrepositoryprovider",{"_index":370,"title":{},"body":{"modules/MockPostsModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["mocksessionrepositoryprovider",{"_index":372,"title":{},"body":{"modules/MockPostsModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["mockuser",{"_index":380,"title":{},"body":{"classes/MockUsersRepository.html":{}}}],["mockuserfollowingsrepositoryprovider",{"_index":829,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["mockusersrepository",{"_index":375,"title":{"classes/MockUsersRepository.html":{}},"body":{"classes/MockUsersRepository.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["mockusersrepositoryprovider",{"_index":369,"title":{},"body":{"modules/MockPostsModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["mode",{"_index":925,"title":{},"body":{"index.html":{},"license.html":{}}}],["model",{"_index":1374,"title":{},"body":{"license.html":{}}}],["modification",{"_index":1081,"title":{},"body":{"license.html":{}}}],["modifications",{"_index":1159,"title":{},"body":{"license.html":{}}}],["modified",{"_index":1051,"title":{},"body":{"license.html":{}}}],["modifies",{"_index":1323,"title":{},"body":{"license.html":{}}}],["modify",{"_index":1029,"title":{},"body":{"license.html":{}}}],["modifying",{"_index":1119,"title":{},"body":{"license.html":{}}}],["module",{"_index":0,"title":{"modules/ApiModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/HashtagsModule.html":{},"modules/LikesModule.html":{},"modules/MockLikesModule.html":{},"modules/MockPostsModule.html":{},"modules/PostsModule.html":{},"modules/ProdDbModule.html":{},"modules/TestDbModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/ApiModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/HashtagsModule.html":{},"modules/LikesModule.html":{},"modules/MockLikesModule.html":{},"modules/MockPostsModule.html":{},"modules/PostsModule.html":{},"modules/ProdDbModule.html":{},"modules/TestDbModule.html":{},"modules/UsersModule.html":{}}}],["modules",{"_index":2,"title":{"modules.html":{}},"body":{"modules/ApiModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/HashtagsModule.html":{},"modules/LikesModule.html":{},"modules/MockLikesModule.html":{},"modules/MockPostsModule.html":{},"modules/PostsModule.html":{},"modules/ProdDbModule.html":{},"modules/TestDbModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["more",{"_index":1376,"title":{},"body":{"license.html":{}}}],["moreover",{"_index":1554,"title":{},"body":{"license.html":{}}}],["mysql",{"_index":609,"title":{},"body":{"modules/ProdDbModule.html":{},"modules/TestDbModule.html":{}}}],["mysql2",{"_index":853,"title":{},"body":{"dependencies.html":{}}}],["name",{"_index":78,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/HashtagsController.html":{},"classes/LikesEntity.html":{},"injectables/LikesService.html":{},"classes/LoginResponseBody.html":{},"classes/Mention.html":{},"classes/MockUsersRepository.html":{},"guards/OptionalAuthGuard.html":{},"classes/PasswordEntity.html":{},"classes/PostEntity.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"guards/RequiredAuthGuard.html":{},"classes/SessionsEntity.html":{},"classes/TokenAuthorizer.html":{},"classes/UserCreateRequestBody.html":{},"classes/UserEntity.html":{},"classes/UserFollowingEntity.html":{},"classes/UserUpdateRequestBody.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/YooBaseEntity.html":{}}}],["names",{"_index":1507,"title":{},"body":{"license.html":{}}}],["nature",{"_index":1341,"title":{},"body":{"license.html":{}}}],["necessary",{"_index":1730,"title":{},"body":{"license.html":{}}}],["need",{"_index":1224,"title":{},"body":{"license.html":{}}}],["needed",{"_index":1197,"title":{},"body":{"license.html":{}}}],["nest",{"_index":878,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":21,"title":{},"body":{"modules/ApiModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/HashtagsController.html":{},"modules/HashtagsModule.html":{},"controllers/LikesController.html":{},"modules/LikesModule.html":{},"injectables/LikesService.html":{},"classes/LoginRequestBody.html":{},"classes/LoginResponseBody.html":{},"modules/MockLikesModule.html":{},"modules/MockPostsModule.html":{},"guards/OptionalAuthGuard.html":{},"classes/PostCreateRequestBody.html":{},"classes/PostDetailsQueryParams.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"modules/ProdDbModule.html":{},"guards/RequiredAuthGuard.html":{},"modules/TestDbModule.html":{},"classes/TokenAuthorizer.html":{},"classes/UserCreateRequestBody.html":{},"classes/UserUpdateRequestBody.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":843,"title":{},"body":{"dependencies.html":{}}}],["nestjs/platform",{"_index":844,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":87,"title":{},"body":{"controllers/AuthController.html":{},"controllers/HashtagsController.html":{},"controllers/LikesController.html":{},"classes/LoginRequestBody.html":{},"classes/LoginResponseBody.html":{},"classes/PostCreateRequestBody.html":{},"classes/PostDetailsQueryParams.html":{},"controllers/PostsController.html":{},"classes/UserCreateRequestBody.html":{},"classes/UserUpdateRequestBody.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":115,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/LikesModule.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"modules/ProdDbModule.html":{},"modules/TestDbModule.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["network",{"_index":987,"title":{},"body":{"license.html":{}}}],["new",{"_index":106,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/LikesService.html":{},"classes/LoginRequestBody.html":{},"classes/LoginResponseBody.html":{},"classes/MockUsersRepository.html":{},"guards/OptionalAuthGuard.html":{},"injectables/PostsService.html":{},"guards/RequiredAuthGuard.html":{},"classes/TokenAuthorizer.html":{},"classes/UserCreateRequestBody.html":{},"classes/UserUpdateRequestBody.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["newfollow",{"_index":793,"title":{},"body":{"injectables/UsersService.html":{}}}],["newfollow.followee",{"_index":795,"title":{},"body":{"injectables/UsersService.html":{}}}],["newlike",{"_index":296,"title":{},"body":{"injectables/LikesService.html":{}}}],["newlike.post",{"_index":297,"title":{},"body":{"injectables/LikesService.html":{}}}],["newlike.user",{"_index":298,"title":{},"body":{"injectables/LikesService.html":{}}}],["newpassword",{"_index":177,"title":{},"body":{"injectables/AuthService.html":{}}}],["newpassword.password",{"_index":179,"title":{},"body":{"injectables/AuthService.html":{}}}],["newpassword.userid",{"_index":178,"title":{},"body":{"injectables/AuthService.html":{}}}],["newpost",{"_index":585,"title":{},"body":{"injectables/PostsService.html":{}}}],["newpost.author",{"_index":587,"title":{},"body":{"injectables/PostsService.html":{}}}],["newpost.origpost",{"_index":590,"title":{},"body":{"injectables/PostsService.html":{}}}],["newpost.replyto",{"_index":592,"title":{},"body":{"injectables/PostsService.html":{}}}],["newpost.text",{"_index":586,"title":{},"body":{"injectables/PostsService.html":{}}}],["newuserdetails",{"_index":776,"title":{},"body":{"injectables/UsersService.html":{}}}],["newuserdetails.avatar",{"_index":787,"title":{},"body":{"injectables/UsersService.html":{}}}],["newuserdetails.bio",{"_index":785,"title":{},"body":{"injectables/UsersService.html":{}}}],["newuserdetails.name",{"_index":789,"title":{},"body":{"injectables/UsersService.html":{}}}],["next",{"_index":1395,"title":{},"body":{"license.html":{}}}],["nodejs",{"_index":880,"title":{},"body":{"index.html":{}}}],["non",{"_index":1161,"title":{},"body":{"license.html":{}}}],["noncommercially",{"_index":1382,"title":{},"body":{"license.html":{}}}],["normal",{"_index":1180,"title":{},"body":{"license.html":{}}}],["normally",{"_index":1416,"title":{},"body":{"license.html":{}}}],["notfoundexception",{"_index":160,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{},"classes/UserCreateRequestBody.html":{},"classes/UserUpdateRequestBody.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["notfoundexception('no",{"_index":801,"title":{},"body":{"injectables/UsersService.html":{}}}],["notfoundexception('original",{"_index":589,"title":{},"body":{"injectables/PostsService.html":{}}}],["notfoundexception('post",{"_index":598,"title":{},"body":{"injectables/PostsService.html":{}}}],["notfoundexception('user",{"_index":657,"title":{},"body":{"classes/UserCreateRequestBody.html":{},"classes/UserUpdateRequestBody.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["notfoundexception('username",{"_index":183,"title":{},"body":{"injectables/AuthService.html":{}}}],["nothing",{"_index":1570,"title":{},"body":{"license.html":{}}}],["notice",{"_index":1144,"title":{},"body":{"license.html":{}}}],["notices",{"_index":1138,"title":{},"body":{"license.html":{}}}],["notifies",{"_index":1555,"title":{},"body":{"license.html":{}}}],["notify",{"_index":1549,"title":{},"body":{"license.html":{}}}],["notwithstanding",{"_index":1488,"title":{},"body":{"license.html":{}}}],["november",{"_index":961,"title":{},"body":{"license.html":{}}}],["npm",{"_index":919,"title":{},"body":{"index.html":{}}}],["null",{"_index":301,"title":{},"body":{"injectables/LikesService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["nullable",{"_index":333,"title":{},"body":{"classes/Mention.html":{},"classes/PasswordEntity.html":{},"classes/PostEntity.html":{},"classes/UserEntity.html":{}}}],["number",{"_index":155,"title":{},"body":{"injectables/AuthService.html":{},"classes/Mention.html":{},"classes/PostEntity.html":{},"classes/UserEntity.html":{},"license.html":{}}}],["numbered",{"_index":1709,"title":{},"body":{"license.html":{}}}],["object",{"_index":1160,"title":{},"body":{"license.html":{},"miscellaneous/variables.html":{}}}],["obligate",{"_index":1683,"title":{},"body":{"license.html":{}}}],["obligated",{"_index":1399,"title":{},"body":{"license.html":{}}}],["obligations",{"_index":1274,"title":{},"body":{"license.html":{}}}],["occasionally",{"_index":1381,"title":{},"body":{"license.html":{}}}],["occurring",{"_index":1567,"title":{},"body":{"license.html":{}}}],["occurs",{"_index":1449,"title":{},"body":{"license.html":{}}}],["offer",{"_index":1024,"title":{},"body":{"license.html":{}}}],["offered",{"_index":1405,"title":{},"body":{"license.html":{}}}],["offering",{"_index":1385,"title":{},"body":{"license.html":{}}}],["official",{"_index":1163,"title":{},"body":{"license.html":{}}}],["older",{"_index":1066,"title":{},"body":{"license.html":{}}}],["one",{"_index":1171,"title":{},"body":{"license.html":{}}}],["onetoone",{"_index":329,"title":{},"body":{"classes/Mention.html":{},"classes/PasswordEntity.html":{},"classes/PostEntity.html":{},"classes/UserEntity.html":{}}}],["onetoone((type",{"_index":709,"title":{},"body":{"classes/UserEntity.html":{}}}],["onetoone(undefined",{"_index":701,"title":{},"body":{"classes/UserEntity.html":{}}}],["onetoone(undefined)@joincolumn({name",{"_index":486,"title":{},"body":{"classes/PostEntity.html":{}}}],["operate",{"_index":1748,"title":{},"body":{"license.html":{}}}],["operated",{"_index":1389,"title":{},"body":{"license.html":{}}}],["operating",{"_index":1191,"title":{},"body":{"license.html":{}}}],["operation",{"_index":1294,"title":{},"body":{"license.html":{}}}],["operator",{"_index":1060,"title":{},"body":{"license.html":{}}}],["opportunity",{"_index":1691,"title":{},"body":{"license.html":{}}}],["option",{"_index":1484,"title":{},"body":{"license.html":{}}}],["optional",{"_index":80,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/HashtagsController.html":{},"injectables/LikesService.html":{},"classes/LoginResponseBody.html":{},"guards/OptionalAuthGuard.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"guards/RequiredAuthGuard.html":{},"classes/TokenAuthorizer.html":{},"classes/UserCreateRequestBody.html":{},"classes/UserEntity.html":{},"classes/UserUpdateRequestBody.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["optionalauthguard",{"_index":392,"title":{"guards/OptionalAuthGuard.html":{}},"body":{"guards/OptionalAuthGuard.html":{},"guards/RequiredAuthGuard.html":{},"classes/TokenAuthorizer.html":{},"coverage.html":{}}}],["options",{"_index":1151,"title":{},"body":{"license.html":{}}}],["order",{"_index":1565,"title":{},"body":{"license.html":{}}}],["orderby('posts.created_at",{"_index":565,"title":{},"body":{"injectables/PostsService.html":{}}}],["organization",{"_index":1584,"title":{},"body":{"license.html":{}}}],["organizations",{"_index":1098,"title":{},"body":{"license.html":{}}}],["orig_post_id",{"_index":346,"title":{},"body":{"classes/Mention.html":{},"classes/PostEntity.html":{}}}],["origin",{"_index":1503,"title":{},"body":{"license.html":{}}}],["original",{"_index":1505,"title":{},"body":{"license.html":{}}}],["originalpostid",{"_index":431,"title":{},"body":{"classes/PostCreateRequestBody.html":{},"classes/PostDetailsQueryParams.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["origpost",{"_index":347,"title":{},"body":{"classes/Mention.html":{},"classes/PostEntity.html":{},"injectables/PostsService.html":{}}}],["origpost.author",{"_index":571,"title":{},"body":{"injectables/PostsService.html":{}}}],["origpostauthor",{"_index":557,"title":{},"body":{"injectables/PostsService.html":{}}}],["origposts",{"_index":942,"title":{},"body":{"index.html":{}}}],["others",{"_index":1245,"title":{},"body":{"license.html":{}}}],["otherwise",{"_index":1243,"title":{},"body":{"license.html":{}}}],["out",{"_index":14,"title":{},"body":{"modules/ApiModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/LikesModule.html":{},"modules/MockLikesModule.html":{},"modules/MockPostsModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"license.html":{},"overview.html":{}}}],["output",{"_index":1237,"title":{},"body":{"license.html":{}}}],["outside",{"_index":1257,"title":{},"body":{"license.html":{}}}],["overview",{"_index":1802,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["owned",{"_index":1615,"title":{},"body":{"license.html":{}}}],["package",{"_index":841,"title":{"dependencies.html":{}},"body":{}}],["packaged",{"_index":1331,"title":{},"body":{"license.html":{}}}],["packaging",{"_index":1181,"title":{},"body":{"license.html":{}}}],["pagination",{"_index":545,"title":{},"body":{"injectables/PostsService.html":{}}}],["pairing",{"_index":770,"title":{},"body":{"injectables/UsersService.html":{}}}],["paper",{"_index":1784,"title":{},"body":{"license.html":{}}}],["paragraph",{"_index":1538,"title":{},"body":{"license.html":{}}}],["paragraphs",{"_index":1626,"title":{},"body":{"license.html":{}}}],["param",{"_index":216,"title":{},"body":{"controllers/HashtagsController.html":{},"classes/PostCreateRequestBody.html":{},"classes/PostDetailsQueryParams.html":{},"controllers/PostsController.html":{},"classes/UserCreateRequestBody.html":{},"classes/UserUpdateRequestBody.html":{},"controllers/UsersController.html":{}}}],["param('userid",{"_index":668,"title":{},"body":{"classes/UserCreateRequestBody.html":{},"classes/UserUpdateRequestBody.html":{},"controllers/UsersController.html":{}}}],["parameters",{"_index":77,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/HashtagsController.html":{},"injectables/LikesService.html":{},"classes/LoginResponseBody.html":{},"guards/OptionalAuthGuard.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"guards/RequiredAuthGuard.html":{},"classes/TokenAuthorizer.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["parody",{"_index":884,"title":{},"body":{"index.html":{}}}],["part",{"_index":1100,"title":{},"body":{"license.html":{}}}],["partial",{"_index":526,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["particular",{"_index":1168,"title":{},"body":{"license.html":{}}}],["parties",{"_index":1128,"title":{},"body":{"license.html":{}}}],["parts",{"_index":1223,"title":{},"body":{"license.html":{}}}],["party",{"_index":1390,"title":{},"body":{"license.html":{}}}],["party's",{"_index":1590,"title":{},"body":{"license.html":{}}}],["passmatch",{"_index":187,"title":{},"body":{"injectables/AuthService.html":{}}}],["passtohash",{"_index":133,"title":{},"body":{"injectables/AuthService.html":{}}}],["passtohash(password",{"_index":153,"title":{},"body":{"injectables/AuthService.html":{}}}],["password",{"_index":91,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/LoginRequestBody.html":{},"classes/LoginResponseBody.html":{},"classes/PasswordEntity.html":{},"modules/ProdDbModule.html":{},"modules/TestDbModule.html":{},"classes/UserCreateRequestBody.html":{},"classes/UserEntity.html":{},"classes/UserUpdateRequestBody.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{},"license.html":{}}}],["password.user",{"_index":710,"title":{},"body":{"classes/UserEntity.html":{}}}],["password_salt_rounds",{"_index":127,"title":{},"body":{"injectables/AuthService.html":{}}}],["passwordentity",{"_index":119,"title":{"classes/PasswordEntity.html":{}},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/MockUsersRepository.html":{},"classes/PasswordEntity.html":{},"modules/ProdDbModule.html":{},"modules/TestDbModule.html":{},"classes/UserEntity.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["passwordrepo",{"_index":137,"title":{},"body":{"injectables/AuthService.html":{}}}],["passwords.entity",{"_index":120,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{}}}],["patch",{"_index":644,"title":{},"body":{"classes/UserCreateRequestBody.html":{},"classes/UserUpdateRequestBody.html":{},"controllers/UsersController.html":{},"index.html":{}}}],["patch('/:userid",{"_index":665,"title":{},"body":{"classes/UserCreateRequestBody.html":{},"classes/UserUpdateRequestBody.html":{},"controllers/UsersController.html":{}}}],["patent",{"_index":1537,"title":{},"body":{"license.html":{}}}],["patents",{"_index":1610,"title":{},"body":{"license.html":{}}}],["payment",{"_index":1662,"title":{},"body":{"license.html":{}}}],["peer",{"_index":1401,"title":{},"body":{"license.html":{}}}],["peers",{"_index":1404,"title":{},"body":{"license.html":{}}}],["performance",{"_index":1726,"title":{},"body":{"license.html":{}}}],["performing",{"_index":1208,"title":{},"body":{"license.html":{}}}],["permanently",{"_index":1547,"title":{},"body":{"license.html":{}}}],["permission",{"_index":1027,"title":{},"body":{"license.html":{}}}],["permissions",{"_index":1228,"title":{},"body":{"license.html":{}}}],["permissive",{"_index":1307,"title":{},"body":{"license.html":{}}}],["permit",{"_index":1351,"title":{},"body":{"license.html":{}}}],["permits",{"_index":1049,"title":{},"body":{"license.html":{}}}],["permitted",{"_index":970,"title":{},"body":{"license.html":{}}}],["perpetuity",{"_index":1454,"title":{},"body":{"license.html":{}}}],["personal",{"_index":1414,"title":{},"body":{"license.html":{}}}],["pertinent",{"_index":1681,"title":{},"body":{"license.html":{}}}],["pg",{"_index":855,"title":{},"body":{"dependencies.html":{}}}],["physical",{"_index":1361,"title":{},"body":{"license.html":{}}}],["physically",{"_index":1379,"title":{},"body":{"license.html":{}}}],["pieces",{"_index":1013,"title":{},"body":{"license.html":{}}}],["place",{"_index":1387,"title":{},"body":{"license.html":{}}}],["please",{"_index":909,"title":{},"body":{"index.html":{}}}],["plus",{"_index":1594,"title":{},"body":{"license.html":{}}}],["pointer",{"_index":1778,"title":{},"body":{"license.html":{}}}],["portion",{"_index":1408,"title":{},"body":{"license.html":{}}}],["possesses",{"_index":1375,"title":{},"body":{"license.html":{}}}],["possession",{"_index":1328,"title":{},"body":{"license.html":{}}}],["possibility",{"_index":1751,"title":{},"body":{"license.html":{}}}],["possible",{"_index":1768,"title":{},"body":{"license.html":{}}}],["post",{"_index":83,"title":{},"body":{"controllers/AuthController.html":{},"classes/LikesEntity.html":{},"injectables/LikesService.html":{},"classes/LoginRequestBody.html":{},"classes/LoginResponseBody.html":{},"classes/PostCreateRequestBody.html":{},"classes/PostDetailsQueryParams.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/UserCreateRequestBody.html":{},"classes/UserUpdateRequestBody.html":{},"controllers/UsersController.html":{},"index.html":{}}}],["post('/login",{"_index":98,"title":{},"body":{"controllers/AuthController.html":{},"classes/LoginRequestBody.html":{},"classes/LoginResponseBody.html":{}}}],["post.originalpostid",{"_index":461,"title":{},"body":{"classes/PostCreateRequestBody.html":{},"classes/PostDetailsQueryParams.html":{},"controllers/PostsController.html":{}}}],["post.replytopostid",{"_index":462,"title":{},"body":{"classes/PostCreateRequestBody.html":{},"classes/PostDetailsQueryParams.html":{},"controllers/PostsController.html":{}}}],["post.text",{"_index":580,"title":{},"body":{"injectables/PostsService.html":{}}}],["post_id",{"_index":246,"title":{},"body":{"classes/LikesEntity.html":{}}}],["postcreaterequestbody",{"_index":429,"title":{"classes/PostCreateRequestBody.html":{}},"body":{"classes/PostCreateRequestBody.html":{},"classes/PostDetailsQueryParams.html":{},"controllers/PostsController.html":{},"coverage.html":{}}}],["postdetailsqueryparams",{"_index":447,"title":{"classes/PostDetailsQueryParams.html":{}},"body":{"classes/PostCreateRequestBody.html":{},"classes/PostDetailsQueryParams.html":{},"controllers/PostsController.html":{},"coverage.html":{}}}],["postentity",{"_index":244,"title":{"classes/PostEntity.html":{}},"body":{"classes/LikesEntity.html":{},"injectables/LikesService.html":{},"classes/Mention.html":{},"classes/MockPostsRepository.html":{},"classes/PostCreateRequestBody.html":{},"classes/PostDetailsQueryParams.html":{},"classes/PostEntity.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"classes/PostsRepository.html":{},"injectables/PostsService.html":{},"modules/ProdDbModule.html":{},"modules/TestDbModule.html":{},"coverage.html":{}}}],["postgresql",{"_index":882,"title":{},"body":{"index.html":{}}}],["postid",{"_index":286,"title":{},"body":{"injectables/LikesService.html":{},"classes/PostCreateRequestBody.html":{},"classes/PostDetailsQueryParams.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["posts",{"_index":226,"title":{},"body":{"controllers/HashtagsController.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"index.html":{}}}],["posts.controller",{"_index":514,"title":{},"body":{"modules/PostsModule.html":{}}}],["posts.entity",{"_index":444,"title":{},"body":{"classes/PostCreateRequestBody.html":{},"classes/PostDetailsQueryParams.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"classes/PostsRepository.html":{},"injectables/PostsService.html":{}}}],["posts.repository",{"_index":541,"title":{},"body":{"injectables/PostsService.html":{}}}],["posts.service",{"_index":446,"title":{},"body":{"classes/PostCreateRequestBody.html":{},"classes/PostDetailsQueryParams.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{}}}],["posts/posts.module",{"_index":24,"title":{},"body":{"modules/ApiModule.html":{}}}],["posts/{postid",{"_index":946,"title":{},"body":{"index.html":{}}}],["posts/{postid}/like",{"_index":949,"title":{},"body":{"index.html":{}}}],["postscontroller",{"_index":451,"title":{"controllers/PostsController.html":{}},"body":{"classes/PostCreateRequestBody.html":{},"classes/PostDetailsQueryParams.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"coverage.html":{}}}],["postsmodule",{"_index":10,"title":{"modules/PostsModule.html":{}},"body":{"modules/ApiModule.html":{},"modules/PostsModule.html":{},"modules.html":{},"overview.html":{}}}],["postsrepository",{"_index":516,"title":{"classes/PostsRepository.html":{}},"body":{"classes/PostsRepository.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["postsservice",{"_index":445,"title":{"injectables/PostsService.html":{}},"body":{"classes/PostCreateRequestBody.html":{},"classes/PostDetailsQueryParams.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"coverage.html":{},"overview.html":{}}}],["power",{"_index":1287,"title":{},"body":{"license.html":{}}}],["practical",{"_index":990,"title":{},"body":{"license.html":{}}}],["practice",{"_index":1632,"title":{},"body":{"license.html":{}}}],["preamble",{"_index":978,"title":{},"body":{"license.html":{}}}],["precise",{"_index":1076,"title":{},"body":{"license.html":{}}}],["predecessor",{"_index":1591,"title":{},"body":{"license.html":{}}}],["preferred",{"_index":1157,"title":{},"body":{"license.html":{}}}],["prefix",{"_index":68,"title":{},"body":{"controllers/AuthController.html":{},"controllers/HashtagsController.html":{},"controllers/LikesController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["present",{"_index":1701,"title":{},"body":{"license.html":{}}}],["presents",{"_index":1148,"title":{},"body":{"license.html":{}}}],["preservation",{"_index":1498,"title":{},"body":{"license.html":{}}}],["prevented",{"_index":1447,"title":{},"body":{"license.html":{}}}],["previous",{"_index":1593,"title":{},"body":{"license.html":{}}}],["price",{"_index":1006,"title":{},"body":{"license.html":{}}}],["primarily",{"_index":1664,"title":{},"body":{"license.html":{}}}],["primarygeneratedcolumn",{"_index":811,"title":{},"body":{"classes/YooBaseEntity.html":{}}}],["primarygeneratedcolumn('uuid",{"_index":255,"title":{},"body":{"classes/LikesEntity.html":{},"classes/PasswordEntity.html":{},"classes/PostEntity.html":{},"classes/SessionsEntity.html":{},"classes/UserEntity.html":{},"classes/UserFollowingEntity.html":{},"classes/YooBaseEntity.html":{}}}],["prior",{"_index":1550,"title":{},"body":{"license.html":{}}}],["private",{"_index":131,"title":{},"body":{"injectables/AuthService.html":{},"injectables/LikesService.html":{},"guards/OptionalAuthGuard.html":{},"injectables/PostsService.html":{},"guards/RequiredAuthGuard.html":{},"classes/TokenAuthorizer.html":{},"injectables/UsersService.html":{},"license.html":{}}}],["privileges",{"_index":934,"title":{},"body":{"index.html":{}}}],["problems",{"_index":1705,"title":{},"body":{"license.html":{}}}],["procedures",{"_index":1440,"title":{},"body":{"license.html":{}}}],["procuring",{"_index":1652,"title":{},"body":{"license.html":{}}}],["proddbmodule",{"_index":54,"title":{"modules/ProdDbModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ProdDbModule.html":{},"modules/TestDbModule.html":{},"modules.html":{},"overview.html":{}}}],["produce",{"_index":1194,"title":{},"body":{"license.html":{}}}],["product",{"_index":1362,"title":{},"body":{"license.html":{}}}],["production",{"_index":603,"title":{},"body":{"modules/ProdDbModule.html":{},"modules/TestDbModule.html":{},"index.html":{}}}],["products",{"_index":1665,"title":{},"body":{"license.html":{}}}],["program",{"_index":1000,"title":{},"body":{"license.html":{}}}],["program's",{"_index":1299,"title":{},"body":{"license.html":{}}}],["programmer",{"_index":1794,"title":{},"body":{"license.html":{}}}],["programming",{"_index":1169,"title":{},"body":{"license.html":{}}}],["programs",{"_index":1014,"title":{},"body":{"license.html":{}}}],["prohibit",{"_index":1255,"title":{},"body":{"license.html":{}}}],["prohibiting",{"_index":1283,"title":{},"body":{"license.html":{}}}],["prohibits",{"_index":1658,"title":{},"body":{"license.html":{}}}],["project",{"_index":907,"title":{},"body":{"index.html":{}}}],["projects/discussions/81",{"_index":894,"title":{},"body":{"index.html":{}}}],["prominent",{"_index":1153,"title":{},"body":{"license.html":{}}}],["prominently",{"_index":1141,"title":{},"body":{"license.html":{}}}],["promise",{"_index":147,"title":{},"body":{"injectables/AuthService.html":{},"injectables/LikesService.html":{},"guards/OptionalAuthGuard.html":{},"classes/PostCreateRequestBody.html":{},"classes/PostDetailsQueryParams.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"guards/RequiredAuthGuard.html":{},"classes/SessionsEntity.html":{},"classes/TokenAuthorizer.html":{},"classes/UserCreateRequestBody.html":{},"classes/UserUpdateRequestBody.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["propagate",{"_index":1108,"title":{},"body":{"license.html":{}}}],["propagating",{"_index":1574,"title":{},"body":{"license.html":{}}}],["propagation",{"_index":1120,"title":{},"body":{"license.html":{}}}],["properties",{"_index":125,"title":{},"body":{"injectables/AuthService.html":{},"classes/LikesEntity.html":{},"classes/LoginRequestBody.html":{},"classes/LoginResponseBody.html":{},"classes/Mention.html":{},"classes/PasswordEntity.html":{},"classes/PostCreateRequestBody.html":{},"classes/PostDetailsQueryParams.html":{},"classes/PostEntity.html":{},"classes/SessionsEntity.html":{},"classes/UserCreateRequestBody.html":{},"classes/UserEntity.html":{},"classes/UserFollowingEntity.html":{},"classes/UserUpdateRequestBody.html":{},"classes/YooBaseEntity.html":{}}}],["property",{"_index":1415,"title":{},"body":{"license.html":{}}}],["protect",{"_index":1018,"title":{},"body":{"license.html":{}}}],["protected",{"_index":403,"title":{},"body":{"guards/OptionalAuthGuard.html":{},"guards/RequiredAuthGuard.html":{},"classes/TokenAuthorizer.html":{}}}],["protecting",{"_index":1265,"title":{},"body":{"license.html":{}}}],["protection",{"_index":1315,"title":{},"body":{"license.html":{}}}],["protocols",{"_index":1471,"title":{},"body":{"license.html":{}}}],["prototype",{"_index":902,"title":{},"body":{"index.html":{}}}],["prove",{"_index":1727,"title":{},"body":{"license.html":{}}}],["provide",{"_index":1061,"title":{},"body":{"license.html":{},"miscellaneous/variables.html":{}}}],["provided",{"_index":313,"title":{},"body":{"injectables/LikesService.html":{},"license.html":{}}}],["providers",{"_index":56,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/LikesModule.html":{},"modules/MockLikesModule.html":{},"modules/MockPostsModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{}}}],["provides",{"_index":1787,"title":{},"body":{"license.html":{}}}],["providing",{"_index":1692,"title":{},"body":{"license.html":{}}}],["provision",{"_index":1489,"title":{},"body":{"license.html":{}}}],["provisionally",{"_index":1543,"title":{},"body":{"license.html":{}}}],["proxy",{"_index":1714,"title":{},"body":{"license.html":{}}}],["proxy's",{"_index":1716,"title":{},"body":{"license.html":{}}}],["public",{"_index":170,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{},"license.html":{}}}],["publicity",{"_index":1506,"title":{},"body":{"license.html":{}}}],["publicly",{"_index":1064,"title":{},"body":{"license.html":{}}}],["publish",{"_index":1303,"title":{},"body":{"license.html":{}}}],["published",{"_index":1068,"title":{},"body":{"license.html":{}}}],["purpose",{"_index":1205,"title":{},"body":{"license.html":{}}}],["purposes",{"_index":619,"title":{},"body":{"modules/ProdDbModule.html":{},"modules/TestDbModule.html":{},"license.html":{}}}],["pursuant",{"_index":1648,"title":{},"body":{"license.html":{}}}],["put",{"_index":438,"title":{},"body":{"classes/PostCreateRequestBody.html":{},"classes/PostDetailsQueryParams.html":{},"controllers/PostsController.html":{},"classes/UserCreateRequestBody.html":{},"classes/UserUpdateRequestBody.html":{},"controllers/UsersController.html":{},"index.html":{}}}],["put('/:postid/like",{"_index":468,"title":{},"body":{"classes/PostCreateRequestBody.html":{},"classes/PostDetailsQueryParams.html":{},"controllers/PostsController.html":{}}}],["put('/:userid/follow",{"_index":675,"title":{},"body":{"classes/UserCreateRequestBody.html":{},"classes/UserUpdateRequestBody.html":{},"controllers/UsersController.html":{}}}],["put('/:userid/followees",{"_index":687,"title":{},"body":{"classes/UserCreateRequestBody.html":{},"classes/UserUpdateRequestBody.html":{},"controllers/UsersController.html":{}}}],["qualify",{"_index":1561,"title":{},"body":{"license.html":{}}}],["quality",{"_index":1725,"title":{},"body":{"license.html":{}}}],["query",{"_index":439,"title":{},"body":{"classes/PostCreateRequestBody.html":{},"classes/PostDetailsQueryParams.html":{},"controllers/PostsController.html":{}}}],["querybuilder",{"_index":550,"title":{},"body":{"injectables/PostsService.html":{}}}],["querybuilder.where(`posts.author",{"_index":562,"title":{},"body":{"injectables/PostsService.html":{}}}],["quote",{"_index":948,"title":{},"body":{"index.html":{}}}],["readable",{"_index":1358,"title":{},"body":{"license.html":{}}}],["readily",{"_index":1637,"title":{},"body":{"license.html":{}}}],["reading",{"_index":1477,"title":{},"body":{"license.html":{}}}],["readonly",{"_index":47,"title":{},"body":{"controllers/AppController.html":{},"controllers/LikesController.html":{},"guards/OptionalAuthGuard.html":{},"classes/PostCreateRequestBody.html":{},"classes/PostDetailsQueryParams.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"guards/RequiredAuthGuard.html":{},"classes/TokenAuthorizer.html":{}}}],["reason",{"_index":1646,"title":{},"body":{"license.html":{}}}],["reasonable",{"_index":1377,"title":{},"body":{"license.html":{}}}],["receipt",{"_index":1559,"title":{},"body":{"license.html":{}}}],["receive",{"_index":1009,"title":{},"body":{"license.html":{}}}],["received",{"_index":1335,"title":{},"body":{"license.html":{}}}],["receives",{"_index":1579,"title":{},"body":{"license.html":{}}}],["receiving",{"_index":1654,"title":{},"body":{"license.html":{}}}],["recipient",{"_index":1453,"title":{},"body":{"license.html":{}}}],["recipient's",{"_index":1644,"title":{},"body":{"license.html":{}}}],["recipients",{"_index":1096,"title":{},"body":{"license.html":{}}}],["recognized",{"_index":1164,"title":{},"body":{"license.html":{}}}],["redistribute",{"_index":1771,"title":{},"body":{"license.html":{}}}],["referring",{"_index":1005,"title":{},"body":{"license.html":{}}}],["refers",{"_index":1083,"title":{},"body":{"license.html":{}}}],["reflect",{"_index":859,"title":{},"body":{"dependencies.html":{}}}],["refrain",{"_index":1685,"title":{},"body":{"license.html":{}}}],["regard",{"_index":1483,"title":{},"body":{"license.html":{}}}],["regardless",{"_index":1330,"title":{},"body":{"license.html":{}}}],["regenerate",{"_index":1225,"title":{},"body":{"license.html":{}}}],["reinstated",{"_index":1542,"title":{},"body":{"license.html":{}}}],["relations",{"_index":570,"title":{},"body":{"injectables/PostsService.html":{}}}],["relationship",{"_index":802,"title":{},"body":{"injectables/UsersService.html":{},"license.html":{}}}],["released",{"_index":1074,"title":{},"body":{"license.html":{}}}],["releasing",{"_index":1055,"title":{},"body":{"license.html":{}}}],["relevant",{"_index":1321,"title":{},"body":{"license.html":{}}}],["relicensing",{"_index":1075,"title":{},"body":{"license.html":{}}}],["relying",{"_index":1636,"title":{},"body":{"license.html":{}}}],["remain",{"_index":1398,"title":{},"body":{"license.html":{}}}],["remains",{"_index":1003,"title":{},"body":{"license.html":{}}}],["remote",{"_index":1688,"title":{},"body":{"license.html":{}}}],["remotely",{"_index":1690,"title":{},"body":{"license.html":{}}}],["removal",{"_index":1486,"title":{},"body":{"license.html":{}}}],["remove",{"_index":1485,"title":{},"body":{"license.html":{}}}],["rendered",{"_index":1743,"title":{},"body":{"license.html":{}}}],["repair",{"_index":1732,"title":{},"body":{"license.html":{}}}],["reply",{"_index":584,"title":{},"body":{"injectables/PostsService.html":{},"index.html":{}}}],["reply_to_id",{"_index":348,"title":{},"body":{"classes/Mention.html":{},"classes/PostEntity.html":{}}}],["replyto",{"_index":349,"title":{},"body":{"classes/Mention.html":{},"classes/PostEntity.html":{},"injectables/PostsService.html":{},"index.html":{}}}],["replyto.author",{"_index":572,"title":{},"body":{"injectables/PostsService.html":{}}}],["replytoauthor",{"_index":561,"title":{},"body":{"injectables/PostsService.html":{}}}],["replytopostid",{"_index":432,"title":{},"body":{"classes/PostCreateRequestBody.html":{},"classes/PostDetailsQueryParams.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["repository",{"_index":138,"title":{},"body":{"injectables/AuthService.html":{},"classes/LikesRepository.html":{},"classes/MockLikesRepository.html":{},"classes/MockPostsRepository.html":{},"classes/MockUsersRepository.html":{},"classes/PostsRepository.html":{},"classes/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["repost",{"_index":583,"title":{},"body":{"injectables/PostsService.html":{},"index.html":{}}}],["repost_count",{"_index":343,"title":{},"body":{"classes/Mention.html":{},"classes/PostEntity.html":{}}}],["repostcount",{"_index":344,"title":{},"body":{"classes/Mention.html":{},"classes/PostEntity.html":{}}}],["represent",{"_index":1438,"title":{},"body":{"license.html":{}}}],["req",{"_index":440,"title":{},"body":{"classes/PostCreateRequestBody.html":{},"classes/PostDetailsQueryParams.html":{},"controllers/PostsController.html":{}}}],["req.headers.authorization",{"_index":470,"title":{},"body":{"classes/PostCreateRequestBody.html":{},"classes/PostDetailsQueryParams.html":{},"controllers/PostsController.html":{}}}],["request",{"_index":405,"title":{},"body":{"guards/OptionalAuthGuard.html":{},"guards/RequiredAuthGuard.html":{},"classes/TokenAuthorizer.html":{},"miscellaneous/variables.html":{}}}],["request.headers.authorization.split",{"_index":413,"title":{},"body":{"guards/OptionalAuthGuard.html":{},"guards/RequiredAuthGuard.html":{},"classes/TokenAuthorizer.html":{}}}],["request.headers.authorization.startswith('bearer",{"_index":411,"title":{},"body":{"guards/OptionalAuthGuard.html":{},"guards/RequiredAuthGuard.html":{},"classes/TokenAuthorizer.html":{}}}],["request.user",{"_index":415,"title":{},"body":{"guards/OptionalAuthGuard.html":{},"guards/RequiredAuthGuard.html":{},"classes/TokenAuthorizer.html":{},"miscellaneous/variables.html":{}}}],["request?.headers?.authorization",{"_index":407,"title":{},"body":{"guards/OptionalAuthGuard.html":{},"guards/RequiredAuthGuard.html":{},"classes/TokenAuthorizer.html":{}}}],["require",{"_index":1217,"title":{},"body":{"license.html":{}}}],["required",{"_index":1442,"title":{},"body":{"license.html":{}}}],["requiredauthguard",{"_index":365,"title":{"guards/RequiredAuthGuard.html":{}},"body":{"modules/MockPostsModule.html":{},"guards/OptionalAuthGuard.html":{},"classes/PostCreateRequestBody.html":{},"classes/PostDetailsQueryParams.html":{},"controllers/PostsController.html":{},"guards/RequiredAuthGuard.html":{},"classes/TokenAuthorizer.html":{},"classes/UserCreateRequestBody.html":{},"classes/UserUpdateRequestBody.html":{},"controllers/UsersController.html":{},"coverage.html":{},"overview.html":{}}}],["requirement",{"_index":1322,"title":{},"body":{"license.html":{}}}],["requirements",{"_index":890,"title":{},"body":{"index.html":{},"license.html":{}}}],["requires",{"_index":1059,"title":{},"body":{"license.html":{}}}],["requiring",{"_index":1102,"title":{},"body":{"license.html":{}}}],["reset",{"_index":13,"title":{},"body":{"modules/ApiModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/LikesModule.html":{},"modules/MockLikesModule.html":{},"modules/MockPostsModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["resolved",{"_index":1425,"title":{},"body":{"license.html":{}}}],["respect",{"_index":1291,"title":{},"body":{"license.html":{}}}],["response",{"_index":800,"title":{},"body":{"injectables/UsersService.html":{}}}],["responsible",{"_index":1581,"title":{},"body":{"license.html":{}}}],["restricting",{"_index":1284,"title":{},"body":{"license.html":{}}}],["restriction",{"_index":1526,"title":{},"body":{"license.html":{}}}],["restrictions",{"_index":1522,"title":{},"body":{"license.html":{}}}],["result",{"_index":1046,"title":{},"body":{"license.html":{}}}],["resulting",{"_index":1043,"title":{},"body":{"license.html":{}}}],["results",{"_index":29,"title":{},"body":{"modules/ApiModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/HashtagsController.html":{},"modules/HashtagsModule.html":{},"controllers/LikesController.html":{},"classes/LikesEntity.html":{},"modules/LikesModule.html":{},"classes/LikesRepository.html":{},"injectables/LikesService.html":{},"classes/LoginRequestBody.html":{},"classes/LoginResponseBody.html":{},"classes/Mention.html":{},"modules/MockLikesModule.html":{},"classes/MockLikesRepository.html":{},"modules/MockPostsModule.html":{},"classes/MockPostsRepository.html":{},"classes/MockUsersRepository.html":{},"guards/OptionalAuthGuard.html":{},"classes/PasswordEntity.html":{},"classes/PostCreateRequestBody.html":{},"classes/PostDetailsQueryParams.html":{},"classes/PostEntity.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"classes/PostsRepository.html":{},"injectables/PostsService.html":{},"modules/ProdDbModule.html":{},"guards/RequiredAuthGuard.html":{},"classes/SessionsEntity.html":{},"modules/TestDbModule.html":{},"classes/TokenAuthorizer.html":{},"classes/UserCreateRequestBody.html":{},"classes/UserEntity.html":{},"classes/UserFollowingEntity.html":{},"classes/UserUpdateRequestBody.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"classes/UsersRepository.html":{},"injectables/UsersService.html":{},"classes/YooBaseEntity.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["retains",{"_index":1457,"title":{},"body":{"license.html":{}}}],["return",{"_index":48,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/HashtagsController.html":{},"injectables/LikesService.html":{},"classes/LoginRequestBody.html":{},"classes/LoginResponseBody.html":{},"classes/MockUsersRepository.html":{},"guards/OptionalAuthGuard.html":{},"classes/PostCreateRequestBody.html":{},"classes/PostDetailsQueryParams.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"guards/RequiredAuthGuard.html":{},"classes/TokenAuthorizer.html":{},"classes/UserCreateRequestBody.html":{},"classes/UserUpdateRequestBody.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":42,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/HashtagsController.html":{},"injectables/LikesService.html":{},"classes/MockUsersRepository.html":{},"guards/OptionalAuthGuard.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"guards/RequiredAuthGuard.html":{},"classes/TokenAuthorizer.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["reviewing",{"_index":1757,"title":{},"body":{"license.html":{}}}],["revised",{"_index":1699,"title":{},"body":{"license.html":{}}}],["right",{"_index":1451,"title":{},"body":{"license.html":{}}}],["rights",{"_index":1019,"title":{},"body":{"license.html":{}}}],["rimraf",{"_index":862,"title":{},"body":{"dependencies.html":{}}}],["risk",{"_index":1724,"title":{},"body":{"license.html":{}}}],["rom",{"_index":1460,"title":{},"body":{"license.html":{}}}],["row",{"_index":717,"title":{},"body":{"classes/UserFollowingEntity.html":{}}}],["royalty",{"_index":1598,"title":{},"body":{"license.html":{}}}],["rules",{"_index":1470,"title":{},"body":{"license.html":{}}}],["run",{"_index":923,"title":{},"body":{"index.html":{},"license.html":{}}}],["running",{"_index":1062,"title":{},"body":{"license.html":{}}}],["runs",{"_index":1192,"title":{},"body":{"license.html":{}}}],["rxjs",{"_index":864,"title":{},"body":{"dependencies.html":{}}}],["safest",{"_index":1773,"title":{},"body":{"license.html":{}}}],["sale",{"_index":1608,"title":{},"body":{"license.html":{}}}],["same",{"_index":718,"title":{},"body":{"classes/UserFollowingEntity.html":{},"license.html":{}}}],["satisfy",{"_index":1400,"title":{},"body":{"license.html":{}}}],["savedlike",{"_index":299,"title":{},"body":{"injectables/LikesService.html":{}}}],["savedpost",{"_index":593,"title":{},"body":{"injectables/PostsService.html":{}}}],["savedsession",{"_index":194,"title":{},"body":{"injectables/AuthService.html":{}}}],["saying",{"_index":1396,"title":{},"body":{"license.html":{}}}],["schema",{"_index":889,"title":{},"body":{"index.html":{}}}],["school",{"_index":1795,"title":{},"body":{"license.html":{}}}],["scope",{"_index":1657,"title":{},"body":{"license.html":{}}}],["scratch",{"_index":915,"title":{},"body":{"index.html":{}}}],["scripts",{"_index":1201,"title":{},"body":{"license.html":{}}}],["search",{"_index":944,"title":{},"body":{"index.html":{}}}],["secondarily",{"_index":1111,"title":{},"body":{"license.html":{}}}],["secondary",{"_index":1030,"title":{},"body":{"license.html":{}}}],["section",{"_index":1262,"title":{},"body":{"license.html":{}}}],["sections",{"_index":1356,"title":{},"body":{"license.html":{}}}],["see",{"_index":905,"title":{},"body":{"index.html":{},"license.html":{}}}],["sell",{"_index":1624,"title":{},"body":{"license.html":{}}}],["selling",{"_index":1607,"title":{},"body":{"license.html":{}}}],["semiconductor",{"_index":1087,"title":{},"body":{"license.html":{}}}],["separable",{"_index":1407,"title":{},"body":{"license.html":{}}}],["separate",{"_index":1339,"title":{},"body":{"license.html":{}}}],["separately",{"_index":1334,"title":{},"body":{"license.html":{}}}],["server",{"_index":988,"title":{},"body":{"license.html":{}}}],["servers",{"_index":1045,"title":{},"body":{"license.html":{}}}],["serves",{"_index":1185,"title":{},"body":{"license.html":{}}}],["service",{"_index":1462,"title":{},"body":{"license.html":{}}}],["servicing",{"_index":1731,"title":{},"body":{"license.html":{}}}],["session",{"_index":101,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/LoginRequestBody.html":{},"classes/LoginResponseBody.html":{}}}],["session.user",{"_index":200,"title":{},"body":{"injectables/AuthService.html":{}}}],["session.userid",{"_index":192,"title":{},"body":{"injectables/AuthService.html":{}}}],["sessionrepo",{"_index":139,"title":{},"body":{"injectables/AuthService.html":{}}}],["sessions.entity",{"_index":122,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{}}}],["sessionsentity",{"_index":121,"title":{"classes/SessionsEntity.html":{}},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/ProdDbModule.html":{},"classes/SessionsEntity.html":{},"modules/TestDbModule.html":{},"coverage.html":{}}}],["set",{"_index":176,"title":{},"body":{"injectables/AuthService.html":{}}}],["shall",{"_index":1268,"title":{},"body":{"license.html":{}}}],["share",{"_index":994,"title":{},"body":{"license.html":{}}}],["shared",{"_index":1213,"title":{},"body":{"license.html":{}}}],["show",{"_index":225,"title":{},"body":{"controllers/HashtagsController.html":{},"injectables/UsersService.html":{}}}],["sign",{"_index":1796,"title":{},"body":{"license.html":{}}}],["significant",{"_index":1439,"title":{},"body":{"license.html":{}}}],["similar",{"_index":1070,"title":{},"body":{"license.html":{}}}],["simple",{"_index":947,"title":{},"body":{"index.html":{}}}],["simultaneously",{"_index":1680,"title":{},"body":{"license.html":{}}}],["single",{"_index":1650,"title":{},"body":{"license.html":{}}}],["size",{"_index":546,"title":{},"body":{"injectables/PostsService.html":{}}}],["software",{"_index":965,"title":{},"body":{"license.html":{}}}],["sold",{"_index":1419,"title":{},"body":{"license.html":{}}}],["sole",{"_index":1246,"title":{},"body":{"license.html":{}}}],["solely",{"_index":1259,"title":{},"body":{"license.html":{}}}],["solutions",{"_index":1791,"title":{},"body":{"license.html":{}}}],["source",{"_index":16,"title":{},"body":{"modules/ApiModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/HashtagsController.html":{},"modules/HashtagsModule.html":{},"controllers/LikesController.html":{},"classes/LikesEntity.html":{},"modules/LikesModule.html":{},"classes/LikesRepository.html":{},"injectables/LikesService.html":{},"classes/LoginRequestBody.html":{},"classes/LoginResponseBody.html":{},"classes/Mention.html":{},"modules/MockLikesModule.html":{},"classes/MockLikesRepository.html":{},"modules/MockPostsModule.html":{},"classes/MockPostsRepository.html":{},"classes/MockUsersRepository.html":{},"guards/OptionalAuthGuard.html":{},"classes/PasswordEntity.html":{},"classes/PostCreateRequestBody.html":{},"classes/PostDetailsQueryParams.html":{},"classes/PostEntity.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"classes/PostsRepository.html":{},"injectables/PostsService.html":{},"modules/ProdDbModule.html":{},"guards/RequiredAuthGuard.html":{},"classes/SessionsEntity.html":{},"modules/TestDbModule.html":{},"classes/TokenAuthorizer.html":{},"classes/UserCreateRequestBody.html":{},"classes/UserEntity.html":{},"classes/UserFollowingEntity.html":{},"classes/UserUpdateRequestBody.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"classes/UsersRepository.html":{},"injectables/UsersService.html":{},"classes/YooBaseEntity.html":{},"index.html":{},"license.html":{}}}],["spare",{"_index":1372,"title":{},"body":{"license.html":{}}}],["speak",{"_index":1004,"title":{},"body":{"license.html":{}}}],["special",{"_index":1474,"title":{},"body":{"license.html":{}}}],["specific",{"_index":1190,"title":{},"body":{"license.html":{}}}],["specifically",{"_index":982,"title":{},"body":{"license.html":{}}}],["specified",{"_index":1167,"title":{},"body":{"license.html":{}}}],["specifies",{"_index":1708,"title":{},"body":{"license.html":{}}}],["specify",{"_index":1712,"title":{},"body":{"license.html":{}}}],["spirit",{"_index":1700,"title":{},"body":{"license.html":{}}}],["src/.../auth.decorator.ts",{"_index":1806,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":869,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../mock.providers.ts",{"_index":1805,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/api.module.ts",{"_index":18,"title":{},"body":{"modules/ApiModule.html":{}}}],["src/app.controller.ts",{"_index":34,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:9",{"_index":41,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":55,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":62,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":63,"title":{},"body":{"injectables/AppService.html":{}}}],["src/auth/auth.controller.ts",{"_index":67,"title":{},"body":{"controllers/AuthController.html":{},"classes/LoginRequestBody.html":{},"classes/LoginResponseBody.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:11",{"_index":323,"title":{},"body":{"classes/LoginResponseBody.html":{}}}],["src/auth/auth.controller.ts:24",{"_index":76,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:6",{"_index":322,"title":{},"body":{"classes/LoginRequestBody.html":{}}}],["src/auth/auth.controller.ts:7",{"_index":321,"title":{},"body":{"classes/LoginRequestBody.html":{}}}],["src/auth/auth.decorator",{"_index":443,"title":{},"body":{"classes/PostCreateRequestBody.html":{},"classes/PostDetailsQueryParams.html":{},"controllers/PostsController.html":{},"classes/UserCreateRequestBody.html":{},"classes/UserUpdateRequestBody.html":{},"controllers/UsersController.html":{}}}],["src/auth/auth.decorator.ts",{"_index":820,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/auth.guard",{"_index":367,"title":{},"body":{"modules/MockPostsModule.html":{},"classes/PostCreateRequestBody.html":{},"classes/PostDetailsQueryParams.html":{},"controllers/PostsController.html":{},"classes/UserCreateRequestBody.html":{},"classes/UserUpdateRequestBody.html":{},"controllers/UsersController.html":{}}}],["src/auth/auth.guard.ts",{"_index":394,"title":{},"body":{"guards/OptionalAuthGuard.html":{},"guards/RequiredAuthGuard.html":{},"classes/TokenAuthorizer.html":{},"coverage.html":{}}}],["src/auth/auth.guard.ts:10",{"_index":632,"title":{},"body":{"classes/TokenAuthorizer.html":{}}}],["src/auth/auth.guard.ts:12",{"_index":633,"title":{},"body":{"classes/TokenAuthorizer.html":{}}}],["src/auth/auth.guard.ts:32",{"_index":399,"title":{},"body":{"guards/OptionalAuthGuard.html":{}}}],["src/auth/auth.guard.ts:43",{"_index":623,"title":{},"body":{"guards/RequiredAuthGuard.html":{}}}],["src/auth/auth.module.ts",{"_index":111,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.service",{"_index":368,"title":{},"body":{"modules/MockPostsModule.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["src/auth/auth.service.ts",{"_index":124,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/auth.service.ts:15",{"_index":140,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:25",{"_index":159,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:27",{"_index":145,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:44",{"_index":143,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:63",{"_index":149,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:75",{"_index":154,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:79",{"_index":152,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/passwords.entity",{"_index":379,"title":{},"body":{"classes/MockUsersRepository.html":{},"modules/ProdDbModule.html":{},"modules/TestDbModule.html":{},"classes/UserEntity.html":{},"modules/UsersModule.html":{}}}],["src/auth/passwords.entity.ts",{"_index":421,"title":{},"body":{"classes/PasswordEntity.html":{},"coverage.html":{}}}],["src/auth/passwords.entity.ts:12",{"_index":426,"title":{},"body":{"classes/PasswordEntity.html":{}}}],["src/auth/passwords.entity.ts:15",{"_index":423,"title":{},"body":{"classes/PasswordEntity.html":{}}}],["src/auth/passwords.entity.ts:8",{"_index":427,"title":{},"body":{"classes/PasswordEntity.html":{}}}],["src/auth/sessions.entity",{"_index":604,"title":{},"body":{"modules/ProdDbModule.html":{},"modules/TestDbModule.html":{}}}],["src/auth/sessions.entity.ts",{"_index":624,"title":{},"body":{"classes/SessionsEntity.html":{},"coverage.html":{}}}],["src/auth/sessions.entity.ts:12",{"_index":627,"title":{},"body":{"classes/SessionsEntity.html":{}}}],["src/auth/sessions.entity.ts:8",{"_index":628,"title":{},"body":{"classes/SessionsEntity.html":{}}}],["src/commons/base.entity",{"_index":260,"title":{},"body":{"classes/LikesEntity.html":{},"classes/Mention.html":{},"classes/PasswordEntity.html":{},"classes/PostEntity.html":{},"classes/SessionsEntity.html":{},"classes/UserEntity.html":{},"classes/UserFollowingEntity.html":{}}}],["src/commons/base.entity.ts",{"_index":803,"title":{},"body":{"classes/YooBaseEntity.html":{},"coverage.html":{}}}],["src/commons/base.entity.ts:12",{"_index":808,"title":{},"body":{"classes/YooBaseEntity.html":{}}}],["src/commons/base.entity.ts:15",{"_index":807,"title":{},"body":{"classes/YooBaseEntity.html":{}}}],["src/commons/base.entity.ts:18",{"_index":809,"title":{},"body":{"classes/YooBaseEntity.html":{}}}],["src/commons/db.module.ts",{"_index":601,"title":{},"body":{"modules/ProdDbModule.html":{},"modules/TestDbModule.html":{}}}],["src/commons/mocks/likes.repository.mock.ts",{"_index":359,"title":{},"body":{"classes/MockLikesRepository.html":{},"coverage.html":{}}}],["src/commons/mocks/mock.providers",{"_index":356,"title":{},"body":{"modules/MockLikesModule.html":{},"modules/MockPostsModule.html":{}}}],["src/commons/mocks/mock.providers.ts",{"_index":828,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/commons/mocks/posts.repository.mock.ts",{"_index":374,"title":{},"body":{"classes/MockPostsRepository.html":{},"coverage.html":{}}}],["src/commons/mocks/users.repository.mock.ts",{"_index":376,"title":{},"body":{"classes/MockUsersRepository.html":{},"coverage.html":{}}}],["src/commons/mocks/users.repository.mock.ts:6",{"_index":378,"title":{},"body":{"classes/MockUsersRepository.html":{}}}],["src/hashtags/hashtags.controller.ts",{"_index":207,"title":{},"body":{"controllers/HashtagsController.html":{},"coverage.html":{}}}],["src/hashtags/hashtags.controller.ts:15",{"_index":214,"title":{},"body":{"controllers/HashtagsController.html":{}}}],["src/hashtags/hashtags.controller.ts:9",{"_index":211,"title":{},"body":{"controllers/HashtagsController.html":{}}}],["src/hashtags/hashtags.module.ts",{"_index":228,"title":{},"body":{"modules/HashtagsModule.html":{}}}],["src/likes/likes.controller.ts",{"_index":231,"title":{},"body":{"controllers/LikesController.html":{},"coverage.html":{}}}],["src/likes/likes.entity",{"_index":360,"title":{},"body":{"classes/MockLikesRepository.html":{},"modules/ProdDbModule.html":{},"modules/TestDbModule.html":{}}}],["src/likes/likes.entity.ts",{"_index":239,"title":{},"body":{"classes/LikesEntity.html":{},"coverage.html":{}}}],["src/likes/likes.entity.ts:10",{"_index":247,"title":{},"body":{"classes/LikesEntity.html":{}}}],["src/likes/likes.entity.ts:14",{"_index":249,"title":{},"body":{"classes/LikesEntity.html":{}}}],["src/likes/likes.module",{"_index":513,"title":{},"body":{"modules/PostsModule.html":{}}}],["src/likes/likes.module.mock.ts",{"_index":354,"title":{},"body":{"modules/MockLikesModule.html":{}}}],["src/likes/likes.module.ts",{"_index":269,"title":{},"body":{"modules/LikesModule.html":{}}}],["src/likes/likes.repository.ts",{"_index":274,"title":{},"body":{"classes/LikesRepository.html":{},"coverage.html":{}}}],["src/likes/likes.service",{"_index":357,"title":{},"body":{"modules/MockLikesModule.html":{},"modules/MockPostsModule.html":{},"injectables/PostsService.html":{}}}],["src/likes/likes.service.ts",{"_index":278,"title":{},"body":{"injectables/LikesService.html":{},"coverage.html":{}}}],["src/likes/likes.service.ts:14",{"_index":288,"title":{},"body":{"injectables/LikesService.html":{}}}],["src/likes/likes.service.ts:32",{"_index":290,"title":{},"body":{"injectables/LikesService.html":{}}}],["src/likes/likes.service.ts:46",{"_index":285,"title":{},"body":{"injectables/LikesService.html":{}}}],["src/likes/likes.service.ts:8",{"_index":283,"title":{},"body":{"injectables/LikesService.html":{}}}],["src/main.ts",{"_index":831,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/posts/posts.controller.ts",{"_index":430,"title":{},"body":{"classes/PostCreateRequestBody.html":{},"classes/PostDetailsQueryParams.html":{},"controllers/PostsController.html":{},"coverage.html":{}}}],["src/posts/posts.controller.ts:25",{"_index":436,"title":{},"body":{"classes/PostCreateRequestBody.html":{}}}],["src/posts/posts.controller.ts:26",{"_index":434,"title":{},"body":{"classes/PostCreateRequestBody.html":{}}}],["src/posts/posts.controller.ts:27",{"_index":435,"title":{},"body":{"classes/PostCreateRequestBody.html":{}}}],["src/posts/posts.controller.ts:31",{"_index":478,"title":{},"body":{"classes/PostDetailsQueryParams.html":{}}}],["src/posts/posts.controller.ts:32",{"_index":479,"title":{},"body":{"classes/PostDetailsQueryParams.html":{}}}],["src/posts/posts.controller.ts:41",{"_index":501,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:48",{"_index":503,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:55",{"_index":496,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:71",{"_index":499,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:83",{"_index":506,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:96",{"_index":508,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.entity",{"_index":261,"title":{},"body":{"classes/LikesEntity.html":{},"injectables/LikesService.html":{},"classes/MockPostsRepository.html":{},"modules/ProdDbModule.html":{},"modules/TestDbModule.html":{}}}],["src/posts/posts.entity.ts",{"_index":325,"title":{},"body":{"classes/Mention.html":{},"classes/PostEntity.html":{},"coverage.html":{}}}],["src/posts/posts.entity.ts:11",{"_index":482,"title":{},"body":{"classes/PostEntity.html":{}}}],["src/posts/posts.entity.ts:15",{"_index":480,"title":{},"body":{"classes/PostEntity.html":{}}}],["src/posts/posts.entity.ts:18",{"_index":484,"title":{},"body":{"classes/PostEntity.html":{}}}],["src/posts/posts.entity.ts:21",{"_index":489,"title":{},"body":{"classes/PostEntity.html":{}}}],["src/posts/posts.entity.ts:24",{"_index":481,"title":{},"body":{"classes/PostEntity.html":{}}}],["src/posts/posts.entity.ts:27",{"_index":485,"title":{},"body":{"classes/PostEntity.html":{}}}],["src/posts/posts.entity.ts:31",{"_index":487,"title":{},"body":{"classes/PostEntity.html":{}}}],["src/posts/posts.entity.ts:35",{"_index":488,"title":{},"body":{"classes/PostEntity.html":{}}}],["src/posts/posts.entity.ts:39",{"_index":327,"title":{},"body":{"classes/Mention.html":{}}}],["src/posts/posts.entity.ts:40",{"_index":326,"title":{},"body":{"classes/Mention.html":{}}}],["src/posts/posts.entity.ts:8",{"_index":491,"title":{},"body":{"classes/PostEntity.html":{}}}],["src/posts/posts.module.mock.ts",{"_index":366,"title":{},"body":{"modules/MockPostsModule.html":{}}}],["src/posts/posts.module.ts",{"_index":512,"title":{},"body":{"modules/PostsModule.html":{}}}],["src/posts/posts.repository.ts",{"_index":517,"title":{},"body":{"classes/PostsRepository.html":{},"coverage.html":{}}}],["src/posts/posts.service.ts",{"_index":519,"title":{},"body":{"injectables/PostsService.html":{},"coverage.html":{}}}],["src/posts/posts.service.ts:125",{"_index":536,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/posts.service.ts:132",{"_index":540,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/posts.service.ts:139",{"_index":538,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/posts.service.ts:14",{"_index":524,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/posts.service.ts:25",{"_index":531,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/posts.service.ts:59",{"_index":534,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/posts.service.ts:74",{"_index":529,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/posts.service.ts:82",{"_index":527,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/users/user",{"_index":606,"title":{},"body":{"modules/ProdDbModule.html":{},"modules/TestDbModule.html":{},"classes/UserFollowingEntity.html":{},"coverage.html":{}}}],["src/users/users.controller.ts",{"_index":635,"title":{},"body":{"classes/UserCreateRequestBody.html":{},"classes/UserUpdateRequestBody.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["src/users/users.controller.ts:104",{"_index":746,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:118",{"_index":739,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:125",{"_index":737,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:22",{"_index":642,"title":{},"body":{"classes/UserCreateRequestBody.html":{}}}],["src/users/users.controller.ts:23",{"_index":641,"title":{},"body":{"classes/UserCreateRequestBody.html":{}}}],["src/users/users.controller.ts:24",{"_index":640,"title":{},"body":{"classes/UserCreateRequestBody.html":{}}}],["src/users/users.controller.ts:25",{"_index":638,"title":{},"body":{"classes/UserCreateRequestBody.html":{}}}],["src/users/users.controller.ts:26",{"_index":639,"title":{},"body":{"classes/UserCreateRequestBody.html":{}}}],["src/users/users.controller.ts:30",{"_index":727,"title":{},"body":{"classes/UserUpdateRequestBody.html":{}}}],["src/users/users.controller.ts:31",{"_index":726,"title":{},"body":{"classes/UserUpdateRequestBody.html":{}}}],["src/users/users.controller.ts:32",{"_index":724,"title":{},"body":{"classes/UserUpdateRequestBody.html":{}}}],["src/users/users.controller.ts:33",{"_index":725,"title":{},"body":{"classes/UserUpdateRequestBody.html":{}}}],["src/users/users.controller.ts:42",{"_index":743,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:51",{"_index":741,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:62",{"_index":732,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:75",{"_index":749,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:90",{"_index":735,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.entity",{"_index":117,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/LikesEntity.html":{},"injectables/LikesService.html":{},"classes/Mention.html":{},"classes/MockUsersRepository.html":{},"classes/PasswordEntity.html":{},"classes/PostCreateRequestBody.html":{},"classes/PostDetailsQueryParams.html":{},"classes/PostEntity.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"modules/ProdDbModule.html":{},"classes/SessionsEntity.html":{},"modules/TestDbModule.html":{}}}],["src/users/users.entity.ts",{"_index":689,"title":{},"body":{"classes/UserEntity.html":{},"coverage.html":{}}}],["src/users/users.entity.ts:11",{"_index":697,"title":{},"body":{"classes/UserEntity.html":{}}}],["src/users/users.entity.ts:14",{"_index":690,"title":{},"body":{"classes/UserEntity.html":{}}}],["src/users/users.entity.ts:17",{"_index":691,"title":{},"body":{"classes/UserEntity.html":{}}}],["src/users/users.entity.ts:20",{"_index":695,"title":{},"body":{"classes/UserEntity.html":{}}}],["src/users/users.entity.ts:23",{"_index":693,"title":{},"body":{"classes/UserEntity.html":{}}}],["src/users/users.entity.ts:26",{"_index":707,"title":{},"body":{"classes/UserEntity.html":{}}}],["src/users/users.entity.ts:32",{"_index":704,"title":{},"body":{"classes/UserEntity.html":{}}}],["src/users/users.entity.ts:8",{"_index":700,"title":{},"body":{"classes/UserEntity.html":{}}}],["src/users/users.module.ts",{"_index":752,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/users/users.repository",{"_index":165,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/users/users.repository.ts",{"_index":755,"title":{},"body":{"classes/UsersRepository.html":{},"coverage.html":{}}}],["src/users/users.service.ts",{"_index":757,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/users/users.service.ts:110",{"_index":772,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:15",{"_index":763,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:26",{"_index":774,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:34",{"_index":773,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:42",{"_index":765,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:72",{"_index":777,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:92",{"_index":768,"title":{},"body":{"injectables/UsersService.html":{}}}],["standard",{"_index":1162,"title":{},"body":{"license.html":{}}}],["standards",{"_index":1165,"title":{},"body":{"license.html":{}}}],["start",{"_index":924,"title":{},"body":{"index.html":{},"license.html":{}}}],["start:dev",{"_index":926,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":927,"title":{},"body":{"index.html":{}}}],["started",{"_index":871,"title":{"index.html":{},"license.html":{}},"body":{}}],["state",{"_index":1775,"title":{},"body":{"license.html":{}}}],["stated",{"_index":1232,"title":{},"body":{"license.html":{}}}],["statement",{"_index":1528,"title":{},"body":{"license.html":{}}}],["statements",{"_index":817,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":126,"title":{},"body":{"injectables/AuthService.html":{}}}],["stating",{"_index":1306,"title":{},"body":{"license.html":{}}}],["status",{"_index":1429,"title":{},"body":{"license.html":{}}}],["steps",{"_index":1021,"title":{},"body":{"license.html":{}}}],["storage",{"_index":1346,"title":{},"body":{"license.html":{}}}],["string",{"_index":43,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/HashtagsController.html":{},"classes/LikesEntity.html":{},"injectables/LikesService.html":{},"classes/LoginRequestBody.html":{},"classes/LoginResponseBody.html":{},"classes/Mention.html":{},"classes/PasswordEntity.html":{},"classes/PostCreateRequestBody.html":{},"classes/PostDetailsQueryParams.html":{},"classes/PostEntity.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/SessionsEntity.html":{},"classes/UserCreateRequestBody.html":{},"classes/UserEntity.html":{},"classes/UserFollowingEntity.html":{},"classes/UserUpdateRequestBody.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/YooBaseEntity.html":{}}}],["string).replace('bearer",{"_index":471,"title":{},"body":{"classes/PostCreateRequestBody.html":{},"classes/PostDetailsQueryParams.html":{},"controllers/PostsController.html":{}}}],["subdividing",{"_index":1587,"title":{},"body":{"license.html":{}}}],["subject",{"_index":1580,"title":{},"body":{"license.html":{}}}],["sublicenses",{"_index":1620,"title":{},"body":{"license.html":{}}}],["sublicensing",{"_index":1261,"title":{},"body":{"license.html":{}}}],["subprograms",{"_index":1216,"title":{},"body":{"license.html":{}}}],["subsection",{"_index":1383,"title":{},"body":{"license.html":{}}}],["substantial",{"_index":1434,"title":{},"body":{"license.html":{}}}],["substantially",{"_index":1585,"title":{},"body":{"license.html":{}}}],["such",{"_index":1056,"title":{},"body":{"license.html":{}}}],["sue",{"_index":1634,"title":{},"body":{"license.html":{}}}],["suffice",{"_index":1444,"title":{},"body":{"license.html":{}}}],["supplement",{"_index":1478,"title":{},"body":{"license.html":{}}}],["support",{"_index":1314,"title":{},"body":{"license.html":{},"modules.html":{}}}],["supports",{"_index":1391,"title":{},"body":{"license.html":{}}}],["sure",{"_index":1002,"title":{},"body":{"license.html":{}}}],["surrender",{"_index":1675,"title":{},"body":{"license.html":{}}}],["survive",{"_index":1527,"title":{},"body":{"license.html":{}}}],["sustained",{"_index":1746,"title":{},"body":{"license.html":{}}}],["svg",{"_index":1799,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":851,"title":{},"body":{"dependencies.html":{}}}],["synchronize",{"_index":613,"title":{},"body":{"modules/ProdDbModule.html":{},"modules/TestDbModule.html":{}}}],["system",{"_index":1174,"title":{},"body":{"license.html":{}}}],["table",{"_index":840,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":839,"title":{},"body":{"coverage.html":{}}}],["tag",{"_index":215,"title":{},"body":{"controllers/HashtagsController.html":{}}}],["take",{"_index":991,"title":{},"body":{"license.html":{}}}],["tangible",{"_index":1413,"title":{},"body":{"license.html":{}}}],["technological",{"_index":1271,"title":{},"body":{"license.html":{}}}],["tells",{"_index":1145,"title":{},"body":{"license.html":{}}}],["term",{"_index":1230,"title":{},"body":{"license.html":{}}}],["terminate",{"_index":1536,"title":{},"body":{"license.html":{}}}],["terminated",{"_index":1560,"title":{},"body":{"license.html":{}}}],["terminates",{"_index":1546,"title":{},"body":{"license.html":{}}}],["termination",{"_index":1532,"title":{},"body":{"license.html":{}}}],["terms",{"_index":1077,"title":{},"body":{"license.html":{}}}],["test",{"_index":381,"title":{},"body":{"classes/MockUsersRepository.html":{},"index.html":{}}}],["test:covsetup",{"_index":932,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":931,"title":{},"body":{"index.html":{}}}],["testdbmodule",{"_index":622,"title":{"modules/TestDbModule.html":{}},"body":{"modules/ProdDbModule.html":{},"modules/TestDbModule.html":{},"modules.html":{}}}],["testing",{"_index":618,"title":{},"body":{"modules/ProdDbModule.html":{},"modules/TestDbModule.html":{}}}],["tests",{"_index":929,"title":{},"body":{"index.html":{}}}],["text",{"_index":334,"title":{},"body":{"classes/Mention.html":{},"classes/PostCreateRequestBody.html":{},"classes/PostDetailsQueryParams.html":{},"classes/PostEntity.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"index.html":{}}}],["therefore",{"_index":1063,"title":{},"body":{"license.html":{}}}],["things",{"_index":1016,"title":{},"body":{"license.html":{}}}],["third",{"_index":1297,"title":{},"body":{"license.html":{}}}],["this.appservice.gethello",{"_index":49,"title":{},"body":{"controllers/AppController.html":{}}}],["this.authorizetoken(context",{"_index":418,"title":{},"body":{"guards/OptionalAuthGuard.html":{},"guards/RequiredAuthGuard.html":{},"classes/TokenAuthorizer.html":{}}}],["this.authservice.createnewsession",{"_index":103,"title":{},"body":{"controllers/AuthController.html":{},"classes/LoginRequestBody.html":{},"classes/LoginResponseBody.html":{}}}],["this.authservice.getuserfromsessiontoken(token",{"_index":414,"title":{},"body":{"guards/OptionalAuthGuard.html":{},"injectables/PostsService.html":{},"guards/RequiredAuthGuard.html":{},"classes/TokenAuthorizer.html":{}}}],["this.getlikedpost(post.id",{"_index":294,"title":{},"body":{"injectables/LikesService.html":{}}}],["this.getlikedpost(postid",{"_index":304,"title":{},"body":{"injectables/LikesService.html":{}}}],["this.getpost(postid",{"_index":597,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.getuserbyuserid(followeeid",{"_index":792,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.likesrepository",{"_index":314,"title":{},"body":{"injectables/LikesService.html":{}}}],["this.likesrepository.delete(likedpost.id",{"_index":305,"title":{},"body":{"injectables/LikesService.html":{}}}],["this.likesrepository.save(newlike",{"_index":300,"title":{},"body":{"injectables/LikesService.html":{}}}],["this.likesservice.likepost(post",{"_index":599,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.likesservice.unlikepost(postid",{"_index":600,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.likeunlikeposthelper(token",{"_index":595,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.matchpasshash(password",{"_index":188,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.passtohash(password",{"_index":180,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.passwordrepo.findone",{"_index":172,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.passwordrepo.save(newpassword",{"_index":181,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.postsrepository",{"_index":551,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postsrepository.delete",{"_index":574,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postsrepository.findone(id",{"_index":569,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postsrepository.findone(originalpostid",{"_index":588,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postsrepository.findone(replytopostid",{"_index":591,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postsrepository.save(newpost",{"_index":594,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postsservice.createpost",{"_index":460,"title":{},"body":{"classes/PostCreateRequestBody.html":{},"classes/PostDetailsQueryParams.html":{},"controllers/PostsController.html":{}}}],["this.postsservice.deletepost(postid",{"_index":467,"title":{},"body":{"classes/PostCreateRequestBody.html":{},"classes/PostDetailsQueryParams.html":{},"controllers/PostsController.html":{}}}],["this.postsservice.getallposts(query.authorid",{"_index":453,"title":{},"body":{"classes/PostCreateRequestBody.html":{},"classes/PostDetailsQueryParams.html":{},"controllers/PostsController.html":{}}}],["this.postsservice.getpost(postid",{"_index":456,"title":{},"body":{"classes/PostCreateRequestBody.html":{},"classes/PostDetailsQueryParams.html":{},"controllers/PostsController.html":{}}}],["this.postsservice.likepost(token",{"_index":472,"title":{},"body":{"classes/PostCreateRequestBody.html":{},"classes/PostDetailsQueryParams.html":{},"controllers/PostsController.html":{}}}],["this.postsservice.unlikepost(token",{"_index":477,"title":{},"body":{"classes/PostCreateRequestBody.html":{},"classes/PostDetailsQueryParams.html":{},"controllers/PostsController.html":{}}}],["this.sessionrepo.findone",{"_index":196,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.sessionrepo.save(session",{"_index":195,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.token",{"_index":95,"title":{},"body":{"controllers/AuthController.html":{},"classes/LoginRequestBody.html":{},"classes/LoginResponseBody.html":{}}}],["this.userfollowrepo.delete(follow.id",{"_index":797,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userfollowrepo.findone",{"_index":796,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userfollowrepo.save",{"_index":794,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepo.findone",{"_index":182,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["this.userrepo.save(existinguser",{"_index":791,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userservice.createuser",{"_index":663,"title":{},"body":{"classes/UserCreateRequestBody.html":{},"classes/UserUpdateRequestBody.html":{},"controllers/UsersController.html":{}}}],["this.userservice.createuserfollowrelation",{"_index":680,"title":{},"body":{"classes/UserCreateRequestBody.html":{},"classes/UserUpdateRequestBody.html":{},"controllers/UsersController.html":{}}}],["this.userservice.deleteuserfollowrelation",{"_index":684,"title":{},"body":{"classes/UserCreateRequestBody.html":{},"classes/UserUpdateRequestBody.html":{},"controllers/UsersController.html":{}}}],["this.userservice.getuserbyuserid(userid",{"_index":660,"title":{},"body":{"classes/UserCreateRequestBody.html":{},"classes/UserUpdateRequestBody.html":{},"controllers/UsersController.html":{}}}],["this.userservice.getuserbyusername(username",{"_index":656,"title":{},"body":{"classes/UserCreateRequestBody.html":{},"classes/UserUpdateRequestBody.html":{},"controllers/UsersController.html":{}}}],["this.userservice.updateuser(userid",{"_index":674,"title":{},"body":{"classes/UserCreateRequestBody.html":{},"classes/UserUpdateRequestBody.html":{},"controllers/UsersController.html":{}}}],["those",{"_index":1203,"title":{},"body":{"license.html":{}}}],["though",{"_index":1481,"title":{},"body":{"license.html":{}}}],["three",{"_index":1370,"title":{},"body":{"license.html":{}}}],["through",{"_index":1131,"title":{},"body":{"license.html":{}}}],["throw",{"_index":173,"title":{},"body":{"injectables/AuthService.html":{},"injectables/LikesService.html":{},"guards/OptionalAuthGuard.html":{},"injectables/PostsService.html":{},"guards/RequiredAuthGuard.html":{},"classes/TokenAuthorizer.html":{},"classes/UserCreateRequestBody.html":{},"classes/UserUpdateRequestBody.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["thus",{"_index":1252,"title":{},"body":{"license.html":{}}}],["time",{"_index":1557,"title":{},"body":{"license.html":{}}}],["todo",{"_index":219,"title":{},"body":{"controllers/HashtagsController.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["token",{"_index":93,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/LoginRequestBody.html":{},"classes/LoginResponseBody.html":{},"guards/OptionalAuthGuard.html":{},"classes/PostCreateRequestBody.html":{},"classes/PostDetailsQueryParams.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"guards/RequiredAuthGuard.html":{},"classes/TokenAuthorizer.html":{}}}],["tokenauthorizer",{"_index":395,"title":{"classes/TokenAuthorizer.html":{}},"body":{"guards/OptionalAuthGuard.html":{},"guards/RequiredAuthGuard.html":{},"classes/TokenAuthorizer.html":{},"coverage.html":{}}}],["tools",{"_index":1206,"title":{},"body":{"license.html":{}}}],["top",{"_index":223,"title":{},"body":{"controllers/HashtagsController.html":{}}}],["trade",{"_index":1512,"title":{},"body":{"license.html":{}}}],["trademark",{"_index":1511,"title":{},"body":{"license.html":{}}}],["trademarks",{"_index":1513,"title":{},"body":{"license.html":{}}}],["transaction",{"_index":1450,"title":{},"body":{"license.html":{}}}],["transfer",{"_index":1132,"title":{},"body":{"license.html":{}}}],["transferred",{"_index":1452,"title":{},"body":{"license.html":{}}}],["transferring",{"_index":1583,"title":{},"body":{"license.html":{}}}],["transmission",{"_index":1402,"title":{},"body":{"license.html":{}}}],["treated",{"_index":1480,"title":{},"body":{"license.html":{}}}],["treaty",{"_index":1278,"title":{},"body":{"license.html":{}}}],["true",{"_index":205,"title":{},"body":{"injectables/AuthService.html":{},"classes/Mention.html":{},"classes/MockUsersRepository.html":{},"guards/OptionalAuthGuard.html":{},"classes/PostEntity.html":{},"modules/ProdDbModule.html":{},"guards/RequiredAuthGuard.html":{},"classes/SessionsEntity.html":{},"modules/TestDbModule.html":{},"classes/TokenAuthorizer.html":{},"classes/UserEntity.html":{}}}],["try",{"_index":417,"title":{},"body":{"guards/OptionalAuthGuard.html":{},"guards/RequiredAuthGuard.html":{},"classes/TokenAuthorizer.html":{}}}],["tutorials",{"_index":904,"title":{},"body":{"index.html":{}}}],["twitter",{"_index":873,"title":{},"body":{"index.html":{}}}],["two",{"_index":1020,"title":{},"body":{"license.html":{}}}],["type",{"_index":79,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/LikesEntity.html":{},"injectables/LikesService.html":{},"classes/LoginRequestBody.html":{},"classes/LoginResponseBody.html":{},"classes/Mention.html":{},"guards/OptionalAuthGuard.html":{},"classes/PasswordEntity.html":{},"classes/PostCreateRequestBody.html":{},"classes/PostDetailsQueryParams.html":{},"classes/PostEntity.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"modules/ProdDbModule.html":{},"guards/RequiredAuthGuard.html":{},"classes/SessionsEntity.html":{},"modules/TestDbModule.html":{},"classes/TokenAuthorizer.html":{},"classes/UserCreateRequestBody.html":{},"classes/UserEntity.html":{},"classes/UserFollowingEntity.html":{},"classes/UserUpdateRequestBody.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/YooBaseEntity.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["typeorm",{"_index":166,"title":{},"body":{"injectables/AuthService.html":{},"classes/LikesEntity.html":{},"classes/LikesRepository.html":{},"classes/Mention.html":{},"classes/MockLikesRepository.html":{},"classes/MockPostsRepository.html":{},"classes/MockUsersRepository.html":{},"classes/PasswordEntity.html":{},"classes/PostEntity.html":{},"classes/PostsRepository.html":{},"classes/SessionsEntity.html":{},"classes/UserEntity.html":{},"classes/UserFollowingEntity.html":{},"classes/UsersRepository.html":{},"injectables/UsersService.html":{},"classes/YooBaseEntity.html":{},"dependencies.html":{}}}],["typeormmodule",{"_index":114,"title":{},"body":{"modules/AuthModule.html":{},"modules/LikesModule.html":{},"modules/PostsModule.html":{},"modules/ProdDbModule.html":{},"modules/TestDbModule.html":{},"modules/UsersModule.html":{}}}],["typeormmodule.forfeature",{"_index":123,"title":{},"body":{"modules/AuthModule.html":{}}}],["typeormmodule.forfeature([likesrepository",{"_index":273,"title":{},"body":{"modules/LikesModule.html":{}}}],["typeormmodule.forfeature([postentity",{"_index":515,"title":{},"body":{"modules/PostsModule.html":{}}}],["typeormmodule.forfeature([userentity",{"_index":754,"title":{},"body":{"modules/UsersModule.html":{}}}],["typeormmodule.forroot",{"_index":608,"title":{},"body":{"modules/ProdDbModule.html":{},"modules/TestDbModule.html":{}}}],["typescript",{"_index":881,"title":{},"body":{"index.html":{}}}],["typical",{"_index":1427,"title":{},"body":{"license.html":{}}}],["ui",{"_index":895,"title":{},"body":{"index.html":{}}}],["unauthorizedexception",{"_index":161,"title":{},"body":{"injectables/AuthService.html":{},"guards/OptionalAuthGuard.html":{},"guards/RequiredAuthGuard.html":{},"classes/TokenAuthorizer.html":{}}}],["unauthorizedexception('invalid",{"_index":412,"title":{},"body":{"guards/OptionalAuthGuard.html":{},"guards/RequiredAuthGuard.html":{},"classes/TokenAuthorizer.html":{}}}],["unauthorizedexception('missing",{"_index":408,"title":{},"body":{"guards/OptionalAuthGuard.html":{},"guards/RequiredAuthGuard.html":{},"classes/TokenAuthorizer.html":{}}}],["unauthorizedexception('password",{"_index":190,"title":{},"body":{"injectables/AuthService.html":{}}}],["unauthorizedexception('session",{"_index":198,"title":{},"body":{"injectables/AuthService.html":{}}}],["unauthorizedexception('user",{"_index":201,"title":{},"body":{"injectables/AuthService.html":{}}}],["undefined",{"_index":702,"title":{},"body":{"classes/UserEntity.html":{}}}],["under",{"_index":952,"title":{},"body":{"index.html":{},"license.html":{}}}],["unfolloweduser",{"_index":683,"title":{},"body":{"classes/UserCreateRequestBody.html":{},"classes/UserUpdateRequestBody.html":{},"controllers/UsersController.html":{}}}],["unfollowuser",{"_index":682,"title":{},"body":{"classes/UserCreateRequestBody.html":{},"classes/UserUpdateRequestBody.html":{},"controllers/UsersController.html":{}}}],["unfollowuser(follower",{"_index":744,"title":{},"body":{"controllers/UsersController.html":{}}}],["unique",{"_index":699,"title":{},"body":{"classes/UserEntity.html":{},"classes/UserFollowingEntity.html":{}}}],["unique('following_pair",{"_index":720,"title":{},"body":{"classes/UserFollowingEntity.html":{}}}],["unit",{"_index":928,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":82,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/MockUsersRepository.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["unless",{"_index":1437,"title":{},"body":{"license.html":{}}}],["unlike",{"_index":302,"title":{},"body":{"injectables/LikesService.html":{},"injectables/PostsService.html":{}}}],["unliked",{"_index":476,"title":{},"body":{"classes/PostCreateRequestBody.html":{},"classes/PostDetailsQueryParams.html":{},"controllers/PostsController.html":{}}}],["unlikedpost",{"_index":475,"title":{},"body":{"classes/PostCreateRequestBody.html":{},"classes/PostDetailsQueryParams.html":{},"controllers/PostsController.html":{}}}],["unlikepost",{"_index":281,"title":{},"body":{"injectables/LikesService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["unlikepost(@param('postid",{"_index":474,"title":{},"body":{"classes/PostCreateRequestBody.html":{},"classes/PostDetailsQueryParams.html":{},"controllers/PostsController.html":{}}}],["unlikepost(postid",{"_index":289,"title":{},"body":{"injectables/LikesService.html":{},"controllers/PostsController.html":{}}}],["unlikepost(token",{"_index":539,"title":{},"body":{"injectables/PostsService.html":{}}}],["unlikepost.affected",{"_index":306,"title":{},"body":{"injectables/LikesService.html":{}}}],["unlimited",{"_index":1236,"title":{},"body":{"license.html":{}}}],["unmodified",{"_index":1107,"title":{},"body":{"license.html":{}}}],["unnecessary",{"_index":1264,"title":{},"body":{"license.html":{}}}],["unpacking",{"_index":1476,"title":{},"body":{"license.html":{}}}],["until",{"_index":1544,"title":{},"body":{"license.html":{}}}],["update",{"_index":672,"title":{},"body":{"classes/UserCreateRequestBody.html":{},"classes/UserUpdateRequestBody.html":{},"controllers/UsersController.html":{}}}],["updated",{"_index":778,"title":{},"body":{"injectables/UsersService.html":{}}}],["updated_at",{"_index":258,"title":{},"body":{"classes/LikesEntity.html":{},"classes/PasswordEntity.html":{},"classes/PostEntity.html":{},"classes/SessionsEntity.html":{},"classes/UserEntity.html":{},"classes/UserFollowingEntity.html":{},"classes/YooBaseEntity.html":{}}}],["updatedat",{"_index":243,"title":{},"body":{"classes/LikesEntity.html":{},"classes/MockUsersRepository.html":{},"classes/PasswordEntity.html":{},"classes/PostEntity.html":{},"classes/SessionsEntity.html":{},"classes/UserEntity.html":{},"classes/UserFollowingEntity.html":{},"classes/YooBaseEntity.html":{}}}],["updatedatecolumn",{"_index":812,"title":{},"body":{"classes/YooBaseEntity.html":{}}}],["updatedatecolumn({name",{"_index":257,"title":{},"body":{"classes/LikesEntity.html":{},"classes/PasswordEntity.html":{},"classes/PostEntity.html":{},"classes/SessionsEntity.html":{},"classes/UserEntity.html":{},"classes/UserFollowingEntity.html":{},"classes/YooBaseEntity.html":{}}}],["updates",{"_index":1463,"title":{},"body":{"license.html":{}}}],["updateuser",{"_index":761,"title":{},"body":{"injectables/UsersService.html":{}}}],["updateuser(userid",{"_index":775,"title":{},"body":{"injectables/UsersService.html":{}}}],["updateuserdetails",{"_index":666,"title":{},"body":{"classes/UserCreateRequestBody.html":{},"classes/UserUpdateRequestBody.html":{},"controllers/UsersController.html":{}}}],["updateuserdetails(authduser",{"_index":747,"title":{},"body":{"controllers/UsersController.html":{}}}],["updateuserrequest",{"_index":669,"title":{},"body":{"classes/UserCreateRequestBody.html":{},"classes/UserUpdateRequestBody.html":{},"controllers/UsersController.html":{}}}],["use",{"_index":1012,"title":{},"body":{"license.html":{}}}],["useclass",{"_index":1808,"title":{},"body":{"miscellaneous/variables.html":{}}}],["used",{"_index":1044,"title":{},"body":{"license.html":{}}}],["useful",{"_index":1781,"title":{},"body":{"license.html":{}}}],["useguards",{"_index":441,"title":{},"body":{"classes/PostCreateRequestBody.html":{},"classes/PostDetailsQueryParams.html":{},"controllers/PostsController.html":{},"classes/UserCreateRequestBody.html":{},"classes/UserUpdateRequestBody.html":{},"controllers/UsersController.html":{}}}],["useguards(requiredauthguard",{"_index":457,"title":{},"body":{"classes/PostCreateRequestBody.html":{},"classes/PostDetailsQueryParams.html":{},"controllers/PostsController.html":{},"classes/UserCreateRequestBody.html":{},"classes/UserUpdateRequestBody.html":{},"controllers/UsersController.html":{}}}],["user",{"_index":174,"title":{},"body":{"injectables/AuthService.html":{},"classes/LikesEntity.html":{},"injectables/LikesService.html":{},"guards/OptionalAuthGuard.html":{},"classes/PasswordEntity.html":{},"classes/PostCreateRequestBody.html":{},"classes/PostDetailsQueryParams.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"guards/RequiredAuthGuard.html":{},"classes/SessionsEntity.html":{},"classes/TokenAuthorizer.html":{},"classes/UserCreateRequestBody.html":{},"classes/UserUpdateRequestBody.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"index.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["user.id",{"_index":186,"title":{},"body":{"injectables/AuthService.html":{},"injectables/LikesService.html":{},"injectables/PostsService.html":{}}}],["user.username.length",{"_index":783,"title":{},"body":{"injectables/UsersService.html":{}}}],["user_id",{"_index":248,"title":{},"body":{"classes/LikesEntity.html":{}}}],["usercreaterequestbody",{"_index":634,"title":{"classes/UserCreateRequestBody.html":{}},"body":{"classes/UserCreateRequestBody.html":{},"classes/UserUpdateRequestBody.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["userentity",{"_index":116,"title":{"classes/UserEntity.html":{}},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/LikesEntity.html":{},"injectables/LikesService.html":{},"classes/Mention.html":{},"classes/MockUsersRepository.html":{},"classes/PasswordEntity.html":{},"classes/PostCreateRequestBody.html":{},"classes/PostDetailsQueryParams.html":{},"classes/PostEntity.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"modules/ProdDbModule.html":{},"classes/SessionsEntity.html":{},"modules/TestDbModule.html":{},"classes/UserCreateRequestBody.html":{},"classes/UserEntity.html":{},"classes/UserFollowingEntity.html":{},"classes/UserUpdateRequestBody.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"classes/UsersRepository.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["userfollowingentity",{"_index":605,"title":{"classes/UserFollowingEntity.html":{}},"body":{"modules/ProdDbModule.html":{},"modules/TestDbModule.html":{},"classes/UserFollowingEntity.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["userfollowrepo",{"_index":762,"title":{},"body":{"injectables/UsersService.html":{}}}],["userid",{"_index":146,"title":{},"body":{"injectables/AuthService.html":{},"injectables/LikesService.html":{},"classes/PasswordEntity.html":{},"classes/SessionsEntity.html":{},"classes/UserCreateRequestBody.html":{},"classes/UserUpdateRequestBody.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["userid'})@manytoone(undefined",{"_index":625,"title":{},"body":{"classes/SessionsEntity.html":{}}}],["userid'})@onetoone(undefined",{"_index":425,"title":{},"body":{"classes/PasswordEntity.html":{}}}],["username",{"_index":90,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/LoginRequestBody.html":{},"classes/LoginResponseBody.html":{},"classes/MockUsersRepository.html":{},"modules/ProdDbModule.html":{},"modules/TestDbModule.html":{},"classes/UserCreateRequestBody.html":{},"classes/UserEntity.html":{},"classes/UserUpdateRequestBody.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["userpassword",{"_index":185,"title":{},"body":{"injectables/AuthService.html":{},"classes/MockUsersRepository.html":{},"classes/UserEntity.html":{}}}],["userpassword.password",{"_index":189,"title":{},"body":{"injectables/AuthService.html":{}}}],["userpassword.userid",{"_index":193,"title":{},"body":{"injectables/AuthService.html":{}}}],["userrepo",{"_index":141,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["users",{"_index":728,"title":{},"body":{"controllers/UsersController.html":{},"index.html":{},"license.html":{}}}],["users.controller",{"_index":753,"title":{},"body":{"modules/UsersModule.html":{}}}],["users.entity",{"_index":646,"title":{},"body":{"classes/UserCreateRequestBody.html":{},"classes/UserFollowingEntity.html":{},"classes/UserUpdateRequestBody.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"classes/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["users.repository",{"_index":780,"title":{},"body":{"injectables/UsersService.html":{}}}],["users.service",{"_index":648,"title":{},"body":{"classes/UserCreateRequestBody.html":{},"classes/UserUpdateRequestBody.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["users/@{username",{"_index":937,"title":{},"body":{"index.html":{}}}],["users/users.module",{"_index":25,"title":{},"body":{"modules/ApiModule.html":{}}}],["users/{userid",{"_index":938,"title":{},"body":{"index.html":{}}}],["users/{userid}/follow",{"_index":939,"title":{},"body":{"index.html":{}}}],["users/{userid}/followees",{"_index":941,"title":{},"body":{"index.html":{}}}],["users/{userid}/followers",{"_index":940,"title":{},"body":{"index.html":{}}}],["userscontroller",{"_index":652,"title":{"controllers/UsersController.html":{}},"body":{"classes/UserCreateRequestBody.html":{},"classes/UserUpdateRequestBody.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["userservice",{"_index":653,"title":{},"body":{"classes/UserCreateRequestBody.html":{},"classes/UserUpdateRequestBody.html":{},"controllers/UsersController.html":{}}}],["usersmodule",{"_index":11,"title":{"modules/UsersModule.html":{}},"body":{"modules/ApiModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersrepository",{"_index":136,"title":{"classes/UsersRepository.html":{}},"body":{"injectables/AuthService.html":{},"classes/UsersRepository.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["usersservice",{"_index":647,"title":{"injectables/UsersService.html":{}},"body":{"classes/UserCreateRequestBody.html":{},"classes/UserUpdateRequestBody.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["userupdaterequestbody",{"_index":649,"title":{"classes/UserUpdateRequestBody.html":{}},"body":{"classes/UserCreateRequestBody.html":{},"classes/UserUpdateRequestBody.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["uses",{"_index":1431,"title":{},"body":{"license.html":{}}}],["usevalue",{"_index":1810,"title":{},"body":{"miscellaneous/variables.html":{}}}],["using",{"_index":877,"title":{},"body":{"index.html":{},"license.html":{}}}],["uuid",{"_index":382,"title":{},"body":{"classes/MockUsersRepository.html":{}}}],["v3.0",{"_index":955,"title":{},"body":{"index.html":{}}}],["valid",{"_index":1369,"title":{},"body":{"license.html":{}}}],["value",{"_index":157,"title":{},"body":{"injectables/AuthService.html":{},"miscellaneous/variables.html":{}}}],["variable",{"_index":821,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":1804,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["verbatim",{"_index":973,"title":{},"body":{"license.html":{}}}],["verified",{"_index":390,"title":{},"body":{"classes/MockUsersRepository.html":{},"classes/UserEntity.html":{}}}],["version",{"_index":958,"title":{},"body":{"license.html":{}}}],["versions",{"_index":999,"title":{},"body":{"license.html":{}}}],["video",{"_index":913,"title":{},"body":{"index.html":{}}}],["view",{"_index":901,"title":{},"body":{"index.html":{},"license.html":{}}}],["violates",{"_index":1469,"title":{},"body":{"license.html":{}}}],["violation",{"_index":1540,"title":{},"body":{"license.html":{}}}],["visible",{"_index":1142,"title":{},"body":{"license.html":{}}}],["void",{"_index":1535,"title":{},"body":{"license.html":{}}}],["volume",{"_index":1345,"title":{},"body":{"license.html":{}}}],["waive",{"_index":1286,"title":{},"body":{"license.html":{}}}],["waiver",{"_index":1762,"title":{},"body":{"license.html":{}}}],["want",{"_index":1011,"title":{},"body":{"license.html":{}}}],["warranties",{"_index":1147,"title":{},"body":{"license.html":{}}}],["warranty",{"_index":1146,"title":{},"body":{"license.html":{}}}],["watch",{"_index":910,"title":{},"body":{"index.html":{}}}],["way",{"_index":1332,"title":{},"body":{"license.html":{}}}],["ways",{"_index":1359,"title":{},"body":{"license.html":{}}}],["web",{"_index":1788,"title":{},"body":{"license.html":{}}}],["well",{"_index":1124,"title":{},"body":{"license.html":{}}}],["whatever",{"_index":1589,"title":{},"body":{"license.html":{}}}],["where(`post.id",{"_index":318,"title":{},"body":{"injectables/LikesService.html":{}}}],["where(`user.id",{"_index":319,"title":{},"body":{"injectables/LikesService.html":{}}}],["whether",{"_index":1423,"title":{},"body":{"license.html":{}}}],["whole",{"_index":1178,"title":{},"body":{"license.html":{}}}],["whose",{"_index":1409,"title":{},"body":{"license.html":{}}}],["widely",{"_index":1172,"title":{},"body":{"license.html":{}}}],["widespread",{"_index":1036,"title":{},"body":{"license.html":{}}}],["window",{"_index":1189,"title":{},"body":{"license.html":{}}}],["wipo",{"_index":1277,"title":{},"body":{"license.html":{}}}],["wish",{"_index":1008,"title":{},"body":{"license.html":{}}}],["within",{"_index":1523,"title":{},"body":{"license.html":{}}}],["without",{"_index":1054,"title":{},"body":{"license.html":{}}}],["work",{"_index":1090,"title":{},"body":{"license.html":{}}}],["work's",{"_index":1204,"title":{},"body":{"license.html":{}}}],["working",{"_index":1173,"title":{},"body":{"license.html":{}}}],["works",{"_index":981,"title":{},"body":{"license.html":{}}}],["world",{"_index":65,"title":{},"body":{"injectables/AppService.html":{}}}],["worldwide",{"_index":1623,"title":{},"body":{"license.html":{}}}],["writing",{"_index":1719,"title":{},"body":{"license.html":{}}}],["written",{"_index":1368,"title":{},"body":{"license.html":{}}}],["wrong",{"_index":191,"title":{},"body":{"injectables/AuthService.html":{}}}],["years",{"_index":1371,"title":{},"body":{"license.html":{}}}],["yes",{"_index":532,"title":{},"body":{"injectables/PostsService.html":{}}}],["yoo",{"_index":872,"title":{},"body":{"index.html":{}}}],["yooadmin",{"_index":610,"title":{},"body":{"modules/ProdDbModule.html":{},"modules/TestDbModule.html":{},"index.html":{}}}],["yooadmin;progress",{"_index":935,"title":{},"body":{"index.html":{}}}],["yoobaseentity",{"_index":241,"title":{"classes/YooBaseEntity.html":{}},"body":{"classes/LikesEntity.html":{},"classes/Mention.html":{},"classes/PasswordEntity.html":{},"classes/PostEntity.html":{},"classes/SessionsEntity.html":{},"classes/UserEntity.html":{},"classes/UserFollowingEntity.html":{},"classes/YooBaseEntity.html":{},"coverage.html":{}}}],["yoobaseentity:12",{"_index":256,"title":{},"body":{"classes/LikesEntity.html":{},"classes/PasswordEntity.html":{},"classes/PostEntity.html":{},"classes/SessionsEntity.html":{},"classes/UserEntity.html":{},"classes/UserFollowingEntity.html":{}}}],["yoobaseentity:15",{"_index":254,"title":{},"body":{"classes/LikesEntity.html":{},"classes/PasswordEntity.html":{},"classes/PostEntity.html":{},"classes/SessionsEntity.html":{},"classes/UserEntity.html":{},"classes/UserFollowingEntity.html":{}}}],["yoobaseentity:18",{"_index":259,"title":{},"body":{"classes/LikesEntity.html":{},"classes/PasswordEntity.html":{},"classes/PostEntity.html":{},"classes/SessionsEntity.html":{},"classes/UserEntity.html":{},"classes/UserFollowingEntity.html":{}}}],["yoodb",{"_index":612,"title":{},"body":{"modules/ProdDbModule.html":{},"modules/TestDbModule.html":{},"index.html":{}}}],["yoodb_test",{"_index":620,"title":{},"body":{"modules/ProdDbModule.html":{},"modules/TestDbModule.html":{}}}],["yoopass",{"_index":611,"title":{},"body":{"modules/ProdDbModule.html":{},"modules/TestDbModule.html":{},"index.html":{}}}],["you'd",{"_index":900,"title":{},"body":{"index.html":{}}}],["yourself",{"_index":1640,"title":{},"body":{"license.html":{}}}],["youtube",{"_index":912,"title":{},"body":{"index.html":{}}}],["zoom",{"_index":12,"title":{},"body":{"modules/ApiModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/LikesModule.html":{},"modules/MockLikesModule.html":{},"modules/MockPostsModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"modules/ApiModule.html":{"url":"modules/ApiModule.html","title":"module - ApiModule","body":"\n                   \n\n\n\n\n    Modules\n    ApiModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_ApiModule\n\n\n\ncluster_ApiModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nApiModule\n\nApiModule\n\nApiModule -->\n\nAuthModule->ApiModule\n\n\n\n\n\nHashtagsModule\n\nHashtagsModule\n\nApiModule -->\n\nHashtagsModule->ApiModule\n\n\n\n\n\nLikesModule\n\nLikesModule\n\nApiModule -->\n\nLikesModule->ApiModule\n\n\n\n\n\nPostsModule\n\nPostsModule\n\nApiModule -->\n\nPostsModule->ApiModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nApiModule -->\n\nUsersModule->ApiModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/api.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            HashtagsModule\n                        \n                        \n                            LikesModule\n                        \n                        \n                            PostsModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AuthModule } from './auth/auth.module';\nimport { HashtagsModule } from './hashtags/hashtags.module';\nimport { PostsModule } from './posts/posts.module';\nimport { UsersModule } from './users/users.module';\nimport { LikesModule } from './likes/likes.module';\n\n@Module({\n  imports: [UsersModule, PostsModule, HashtagsModule, AuthModule, LikesModule],\n})\nexport class ApiModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/hello')\n                \n            \n\n            \n                \n                    Defined in src/app.controller.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @Get('/hello')\n  getHello(): string {\n    return this.appService.getHello();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\n\nApiModule\n\nApiModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nApiModule->AppModule\n\n\n\n\n\nProdDbModule\n\nProdDbModule\n\nAppModule -->\n\nProdDbModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ApiModule\n                        \n                        \n                            ProdDbModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { ProdDbModule } from './commons/db.module';\nimport { ApiModule } from './api.module';\n\n@Module({\n  imports: [ApiModule, ProdDbModule],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n            \n                \n                    Defined in src/app.service.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                login\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                    \n                    login(body: LoginRequestBody)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiResponse({type: LoginResponseBody})@Post('/login')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    body\n                                    \n                                                LoginRequestBody\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Get, Post } from '@nestjs/common';\nimport { ApiProperty, ApiResponse, ApiTags } from '@nestjs/swagger';\nimport { AuthService } from './auth.service';\n\nclass LoginRequestBody {\n  @ApiProperty() username: string;\n  @ApiProperty() password: string;\n}\n\nclass LoginResponseBody {\n  @ApiProperty() token: string;\n  constructor(token: string) {\n    this.token = token;\n  }\n}\n\n@ApiTags('auth')\n@Controller('auth')\nexport class AuthController {\n  constructor(private authService: AuthService) {}\n\n  @ApiResponse({ type: LoginResponseBody })\n  @Post('/login')\n  async login(@Body() body: LoginRequestBody) {\n    const session = await this.authService.createNewSession(\n      body.username,\n      body.password,\n    );\n    return new LoginResponseBody(session.id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_AuthModule_exports\n\n\n\n\nAuthService \n\nAuthService \n\n\n\nAuthModule\n\nAuthModule\n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Global, Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { UserEntity } from 'src/users/users.entity';\nimport { AuthController } from './auth.controller';\nimport { AuthService } from './auth.service';\nimport { PasswordEntity } from './passwords.entity';\nimport { SessionsEntity } from './sessions.entity';\n\n@Global()\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([\n      PasswordEntity,\n      SessionsEntity,\n      UserEntity,\n      PasswordEntity,\n    ]),\n  ],\n  controllers: [AuthController],\n  providers: [AuthService],\n  exports: [AuthService],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                PASSWORD_SALT_ROUNDS\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createNewSession\n                            \n                            \n                                    Async\n                                createPasswordForNewUser\n                            \n                            \n                                    Async\n                                getUserFromSessionToken\n                            \n                            \n                                    Private\n                                    Async\n                                matchPassHash\n                            \n                            \n                                    Private\n                                    Async\n                                passToHash\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepo: UsersRepository, passwordRepo: Repository, sessionRepo: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.service.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepo\n                                                  \n                                                        \n                                                                        UsersRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        passwordRepo\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        sessionRepo\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createNewSession\n                        \n                    \n                \n            \n            \n                \n                    \n                    createNewSession(username: string, password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:44\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createPasswordForNewUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    createPasswordForNewUser(userId: string, password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getUserFromSessionToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUserFromSessionToken(token: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:63\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    token\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Async\n                        matchPassHash\n                        \n                    \n                \n            \n            \n                \n                    \n                    matchPassHash(password: string, hash: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:79\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    hash\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Async\n                        passToHash\n                        \n                    \n                \n            \n            \n                \n                    \n                    passToHash(password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:75\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        PASSWORD_SALT_ROUNDS\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 10\n                    \n                \n                    \n                        \n                                Defined in src/auth/auth.service.ts:25\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import {\n  Injectable,\n  NotFoundException,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { compare, hash } from 'bcrypt';\nimport { UserEntity } from 'src/users/users.entity';\nimport { UsersRepository } from 'src/users/users.repository';\nimport { Repository } from 'typeorm';\nimport { PasswordEntity } from './passwords.entity';\nimport { SessionsEntity } from './sessions.entity';\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    @InjectRepository(UserEntity)\n    private userRepo: UsersRepository,\n    @InjectRepository(PasswordEntity)\n    private passwordRepo: Repository,\n    @InjectRepository(SessionsEntity)\n    private sessionRepo: Repository,\n  ) {}\n\n  public static PASSWORD_SALT_ROUNDS = 10;\n\n  async createPasswordForNewUser(\n    userId: string,\n    password: string,\n  ): Promise {\n    const existing = await this.passwordRepo.findOne({ where: { userId } });\n    if (existing) {\n      throw new UnauthorizedException(\n        'This user already has a password, cannot set new password',\n      );\n    }\n\n    const newPassword = new PasswordEntity();\n    newPassword.userId = userId;\n    newPassword.password = await this.passToHash(password);\n    return await this.passwordRepo.save(newPassword);\n  }\n\n  async createNewSession(username: string, password: string) {\n    const user = await this.userRepo.findOne({ where: { username } });\n\n    if (!user) {\n      throw new NotFoundException('Username does not exist');\n    }\n    const userPassword = await this.passwordRepo.findOne({\n      where: { userId: user.id },\n    });\n    const passMatch = await this.matchPassHash(password, userPassword.password);\n    if (!passMatch) {\n      throw new UnauthorizedException('Password is wrong');\n    }\n    const session = new SessionsEntity();\n    session.userId = userPassword.userId;\n    const savedSession = await this.sessionRepo.save(session);\n    return savedSession;\n  }\n\n  async getUserFromSessionToken(token: string): Promise {\n    const session = await this.sessionRepo.findOne({ where: { id: token } });\n    if (!session) {\n      throw new UnauthorizedException('Session not found');\n    }\n    const user = await session.user;\n    if (!user) {\n      throw new UnauthorizedException('User not found');\n    }\n    return user;\n  }\n\n  private async passToHash(password: string): Promise {\n    return hash(password, AuthService.PASSWORD_SALT_ROUNDS);\n  }\n\n  private async matchPassHash(\n    password: string,\n    hash: string,\n  ): Promise {\n    return (await compare(password, hash)) === true;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/HashtagsController.html":{"url":"controllers/HashtagsController.html","title":"controller - HashtagsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  HashtagsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/hashtags/hashtags.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                hashtags\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHashtags\n                            \n                            \n                                getPostsForHashtag\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHashtags\n                        \n                    \n                \n            \n            \n                \ngetHashtags()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/')\n                \n            \n\n            \n                \n                    Defined in src/hashtags/hashtags.controller.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getPostsForHashtag\n                        \n                    \n                \n            \n            \n                \ngetPostsForHashtag(tag)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:tag/posts')\n                \n            \n\n            \n                \n                    Defined in src/hashtags/hashtags.controller.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    tag\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Param } from '@nestjs/common';\nimport { Controller, Get } from '@nestjs/common';\nimport { ApiTags } from '@nestjs/swagger';\n\n@ApiTags('hashtags')\n@Controller('hashtags')\nexport class HashtagsController {\n  @Get('/')\n  getHashtags(): string {\n    // TODO: add actual logic\n    return 'all top hashtags';\n  }\n\n  @Get('/:tag/posts')\n  getPostsForHashtag(@Param('tag') tag): string {\n    // TODO: add actual logic\n    return `show all posts with hashtag ${tag}`;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/HashtagsModule.html":{"url":"modules/HashtagsModule.html","title":"module - HashtagsModule","body":"\n                   \n\n\n\n\n    Modules\n    HashtagsModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/hashtags/hashtags.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            HashtagsController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { HashtagsController } from './hashtags.controller';\n\n@Module({\n  controllers: [HashtagsController],\n})\nexport class HashtagsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/LikesController.html":{"url":"controllers/LikesController.html","title":"controller - LikesController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  LikesController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/likes/likes.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                likes\n            \n\n\n\n\n\n\n\n    \n\n\n    \n        import { Controller } from '@nestjs/common';\nimport { ApiTags } from '@nestjs/swagger';\nimport { LikesService } from './likes.service';\n\n@ApiTags('likes')\n@Controller('likes')\nexport class LikesController {\n  constructor(private readonly likesService: LikesService) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LikesEntity.html":{"url":"classes/LikesEntity.html","title":"class - LikesEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LikesEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/likes/likes.entity.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        YooBaseEntity\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                post\n                            \n                            \n                                user\n                            \n                            \n                                createdAt\n                            \n                            \n                                id\n                            \n                            \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        post\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PostEntity\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined)@JoinColumn({name: 'post_id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/likes/likes.entity.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserEntity\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined)@JoinColumn({name: 'user_id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/likes/likes.entity.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn({name: 'created_at'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         YooBaseEntity\n\n                            \n                        \n                    \n                        \n                                Defined in         YooBaseEntity:15\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                        \n                            \n                                Inherited from         YooBaseEntity\n\n                            \n                        \n                    \n                        \n                                Defined in         YooBaseEntity:12\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn({name: 'updated_at'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         YooBaseEntity\n\n                            \n                        \n                    \n                        \n                                Defined in         YooBaseEntity:18\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { YooBaseEntity } from 'src/commons/base.entity';\nimport { PostEntity } from 'src/posts/posts.entity';\nimport { UserEntity } from 'src/users/users.entity';\nimport { Entity, JoinColumn, ManyToOne } from 'typeorm';\n\n@Entity('likes')\nexport class LikesEntity extends YooBaseEntity {\n  @ManyToOne(() => PostEntity)\n  @JoinColumn({ name: 'post_id' })\n  post: PostEntity;\n\n  @ManyToOne(() => UserEntity)\n  @JoinColumn({ name: 'user_id' })\n  user: UserEntity;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/LikesModule.html":{"url":"modules/LikesModule.html","title":"module - LikesModule","body":"\n                   \n\n\n\n\n    Modules\n    LikesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_LikesModule\n\n\n\ncluster_LikesModule_providers\n\n\n\ncluster_LikesModule_exports\n\n\n\n\nLikesService \n\nLikesService \n\n\n\nLikesModule\n\nLikesModule\n\nLikesService  -->\n\nLikesModule->LikesService \n\n\n\n\n\nLikesService\n\nLikesService\n\nLikesModule -->\n\nLikesService->LikesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/likes/likes.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            LikesService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            LikesController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            LikesService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { LikesController } from './likes.controller';\nimport { LikesRepository } from './likes.repository';\nimport { LikesService } from './likes.service';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([LikesRepository])],\n  controllers: [LikesController],\n  providers: [LikesService],\n  exports: [LikesService],\n})\nexport class LikesModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LikesRepository.html":{"url":"classes/LikesRepository.html","title":"class - LikesRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LikesRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/likes/likes.repository.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    Repository\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { EntityRepository, Repository } from 'typeorm';\nimport { LikesEntity } from './likes.entity';\n\n@EntityRepository(LikesEntity)\nexport class LikesRepository extends Repository {}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LikesService.html":{"url":"injectables/LikesService.html","title":"injectable - LikesService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  LikesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/likes/likes.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Async\n                                getLikedPost\n                            \n                            \n                                    Async\n                                likePost\n                            \n                            \n                                    Async\n                                unlikePost\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(likesRepository: LikesRepository)\n                    \n                \n                        \n                            \n                                Defined in src/likes/likes.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        likesRepository\n                                                  \n                                                        \n                                                                        LikesRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Async\n                        getLikedPost\n                        \n                    \n                \n            \n            \n                \n                    \n                    getLikedPost(postId: string, userId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/likes/likes.service.ts:46\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    postId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        likePost\n                        \n                    \n                \n            \n            \n                \n                    \n                    likePost(post: PostEntity, user: UserEntity)\n                \n            \n\n\n            \n                \n                    Defined in src/likes/likes.service.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    post\n                                    \n                                                PostEntity\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                UserEntity\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        unlikePost\n                        \n                    \n                \n            \n            \n                \n                    \n                    unlikePost(postId: string, userId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/likes/likes.service.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    postId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { BadRequestException, Injectable } from '@nestjs/common';\nimport { PostEntity } from 'src/posts/posts.entity';\nimport { UserEntity } from 'src/users/users.entity';\nimport { LikesEntity } from './likes.entity';\nimport { LikesRepository } from './likes.repository';\n\n@Injectable()\nexport class LikesService {\n  constructor(private likesRepository: LikesRepository) {}\n\n  /**\n   * @description like a post\n   */\n  async likePost(post: PostEntity, user: UserEntity): Promise {\n    const alreadyLiked = await this.getLikedPost(post.id, user.id);\n\n    if (alreadyLiked) {\n      return false;\n    }\n\n    const newLike = new LikesEntity();\n    newLike.post = post;\n    newLike.user = user;\n\n    const savedLike = await this.likesRepository.save(newLike);\n    return savedLike !== null;\n  }\n\n  /**\n   * @description unlike a post\n   */\n  async unlikePost(postId: string, userId: string): Promise {\n    const likedPost = await this.getLikedPost(postId, userId);\n\n    if (!likedPost) {\n      return false;\n    }\n\n    const unlikePost = await this.likesRepository.delete(likedPost.id);\n    return unlikePost.affected === 1;\n  }\n\n  /**\n   * @description helper method to get a liked post\n   */\n  private async getLikedPost(\n    postId: string,\n    userId: string,\n  ): Promise {\n    if (!postId || !userId) {\n      throw new BadRequestException(\n        'Post can only be liked/unliked if both user id and post id is provided',\n      );\n    }\n\n    return await this.likesRepository\n      .createQueryBuilder('likes')\n      .leftJoinAndSelect('likes.post', 'post')\n      .leftJoinAndSelect('likes.user', 'user')\n      .where(`post.id = :postId`, { postId })\n      .where(`user.id = :userId`, { userId })\n      .getOne();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginRequestBody.html":{"url":"classes/LoginRequestBody.html","title":"class - LoginRequestBody","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginRequestBody\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                password\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/auth.controller.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/auth.controller.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Body, Controller, Get, Post } from '@nestjs/common';\nimport { ApiProperty, ApiResponse, ApiTags } from '@nestjs/swagger';\nimport { AuthService } from './auth.service';\n\nclass LoginRequestBody {\n  @ApiProperty() username: string;\n  @ApiProperty() password: string;\n}\n\nclass LoginResponseBody {\n  @ApiProperty() token: string;\n  constructor(token: string) {\n    this.token = token;\n  }\n}\n\n@ApiTags('auth')\n@Controller('auth')\nexport class AuthController {\n  constructor(private authService: AuthService) {}\n\n  @ApiResponse({ type: LoginResponseBody })\n  @Post('/login')\n  async login(@Body() body: LoginRequestBody) {\n    const session = await this.authService.createNewSession(\n      body.username,\n      body.password,\n    );\n    return new LoginResponseBody(session.id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginResponseBody.html":{"url":"classes/LoginResponseBody.html","title":"class - LoginResponseBody","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginResponseBody\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                token\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(token: string)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.controller.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        token\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        token\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/auth.controller.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Body, Controller, Get, Post } from '@nestjs/common';\nimport { ApiProperty, ApiResponse, ApiTags } from '@nestjs/swagger';\nimport { AuthService } from './auth.service';\n\nclass LoginRequestBody {\n  @ApiProperty() username: string;\n  @ApiProperty() password: string;\n}\n\nclass LoginResponseBody {\n  @ApiProperty() token: string;\n  constructor(token: string) {\n    this.token = token;\n  }\n}\n\n@ApiTags('auth')\n@Controller('auth')\nexport class AuthController {\n  constructor(private authService: AuthService) {}\n\n  @ApiResponse({ type: LoginResponseBody })\n  @Post('/login')\n  async login(@Body() body: LoginRequestBody) {\n    const session = await this.authService.createNewSession(\n      body.username,\n      body.password,\n    );\n    return new LoginResponseBody(session.id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Mention.html":{"url":"classes/Mention.html","title":"class - Mention","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Mention\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/posts.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                id\n                            \n                            \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/posts/posts.entity.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/posts/posts.entity.ts:39\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { YooBaseEntity } from 'src/commons/base.entity';\nimport { UserEntity } from 'src/users/users.entity';\nimport { Column, Entity, JoinColumn, ManyToOne, OneToOne } from 'typeorm';\n\n@Entity('posts')\nexport class PostEntity extends YooBaseEntity {\n  @Column({ length: 240, nullable: true })\n  text: string;\n\n  @Column('json', { nullable: true })\n  images: Array;\n\n  @ManyToOne(() => UserEntity)\n  @JoinColumn({ name: 'author_id' })\n  author: UserEntity;\n\n  @Column({ name: 'like_count', default: 0 })\n  likeCount: number;\n\n  @Column({ name: 'repost_count', default: 0 })\n  repostCount: number;\n\n  @Column('json', { nullable: true })\n  hashtags: Array;\n\n  @Column('json', { nullable: true })\n  mentions: Array;\n\n  @OneToOne(() => PostEntity)\n  @JoinColumn({ name: 'orig_post_id' })\n  origPost: PostEntity;\n\n  @OneToOne(() => PostEntity)\n  @JoinColumn({ name: 'reply_to_id' })\n  replyTo: PostEntity;\n}\n\nclass Mention {\n  name: string;\n  id: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/MockLikesModule.html":{"url":"modules/MockLikesModule.html","title":"module - MockLikesModule","body":"\n                   \n\n\n\n\n    Modules\n    MockLikesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_MockLikesModule\n\n\n\ncluster_MockLikesModule_exports\n\n\n\ncluster_MockLikesModule_providers\n\n\n\n\nLikesService \n\nLikesService \n\n\n\nMockLikesModule\n\nMockLikesModule\n\nLikesService  -->\n\nMockLikesModule->LikesService \n\n\n\n\n\nLikesService\n\nLikesService\n\nMockLikesModule -->\n\nLikesService->MockLikesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/likes/likes.module.mock.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            LikesService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            LikesService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MockLikesRepositoryProvider } from 'src/commons/mocks/mock.providers';\nimport { LikesService } from 'src/likes/likes.service';\n\n@Module({\n  providers: [MockLikesRepositoryProvider, LikesService],\n  exports: [MockLikesRepositoryProvider, LikesService],\n})\nexport class MockLikesModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/MockLikesRepository.html":{"url":"classes/MockLikesRepository.html","title":"class - MockLikesRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  MockLikesRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/commons/mocks/likes.repository.mock.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    Repository\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { LikesEntity } from 'src/likes/likes.entity';\nimport { Repository } from 'typeorm';\n\nexport class MockLikesRepository extends Repository {}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/MockPostsModule.html":{"url":"modules/MockPostsModule.html","title":"module - MockPostsModule","body":"\n                   \n\n\n\n\n    Modules\n    MockPostsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_MockPostsModule\n\n\n\ncluster_MockPostsModule_providers\n\n\n\ncluster_MockPostsModule_exports\n\n\n\n\nAuthService \n\nAuthService \n\n\n\nLikesService \n\nLikesService \n\n\n\nRequiredAuthGuard \n\nRequiredAuthGuard \n\n\n\nMockPostsModule\n\nMockPostsModule\n\nAuthService  -->\n\nMockPostsModule->AuthService \n\n\n\nLikesService  -->\n\nMockPostsModule->LikesService \n\n\n\nRequiredAuthGuard  -->\n\nMockPostsModule->RequiredAuthGuard \n\n\n\n\n\nAuthService\n\nAuthService\n\nMockPostsModule -->\n\nAuthService->MockPostsModule\n\n\n\n\n\nLikesService\n\nLikesService\n\nMockPostsModule -->\n\nLikesService->MockPostsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/posts/posts.module.mock.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            LikesService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                        \n                            LikesService\n                        \n                        \n                            RequiredAuthGuard\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { RequiredAuthGuard } from 'src/auth/auth.guard';\nimport { AuthService } from 'src/auth/auth.service';\nimport {\n  MockUsersRepositoryProvider,\n  MockPostsRepositoryProvider,\n  MockPasswordRepositoryProvider,\n  MockSessionRepositoryProvider,\n  MockLikesRepositoryProvider,\n} from 'src/commons/mocks/mock.providers';\nimport { LikesService } from 'src/likes/likes.service';\n\n@Module({\n  providers: [\n    MockUsersRepositoryProvider,\n    MockPostsRepositoryProvider,\n    MockLikesRepositoryProvider,\n    MockPasswordRepositoryProvider,\n    MockSessionRepositoryProvider,\n    RequiredAuthGuard,\n    LikesService,\n    AuthService,\n  ],\n  exports: [\n    MockUsersRepositoryProvider,\n    MockPostsRepositoryProvider,\n    MockLikesRepositoryProvider,\n    MockPasswordRepositoryProvider,\n    MockSessionRepositoryProvider,\n    RequiredAuthGuard,\n    LikesService,\n    AuthService,\n  ],\n})\nexport class MockPostsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/MockPostsRepository.html":{"url":"classes/MockPostsRepository.html","title":"class - MockPostsRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  MockPostsRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/commons/mocks/posts.repository.mock.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    Repository\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PostEntity } from 'src/posts/posts.entity';\nimport { Repository } from 'typeorm';\n\nexport class MockPostsRepository extends Repository {}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/MockUsersRepository.html":{"url":"classes/MockUsersRepository.html","title":"class - MockUsersRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  MockUsersRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/commons/mocks/users.repository.mock.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    Repository\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                findOne\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne()\n                \n            \n\n\n            \n                \n                    Defined in src/commons/mocks/users.repository.mock.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { PasswordEntity } from 'src/auth/passwords.entity';\nimport { UserEntity } from 'src/users/users.entity';\nimport { Repository } from 'typeorm';\n\nexport class MockUsersRepository extends Repository {\n  async findOne() {\n    const mockUser: UserEntity = {\n      id: 'test-uuid',\n      name: 'John Doe',\n      followeeCount: 1,\n      followerCount: 1,\n      updatedAt: new Date('2020-01-01'),\n      createdAt: new Date('2020-01-01'),\n      username: 'johndoe',\n      verified: true,\n      userPassword: new PasswordEntity(),\n    };\n    return mockUser;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/OptionalAuthGuard.html":{"url":"guards/OptionalAuthGuard.html","title":"guard - OptionalAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n    Guards\n    OptionalAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/auth/auth.guard.ts\n            \n\n\n\n                \n                Extends\n                \n                \n                            TokenAuthorizer\n                \n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                    \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.guard.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import {\n  CanActivate,\n  ExecutionContext,\n  Inject,\n  Injectable,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { AuthService } from './auth.service';\n\nclass TokenAuthorizer {\n  constructor(@Inject(AuthService) private readonly authService: AuthService) {}\n  protected async authorizeToken(context: ExecutionContext): Promise {\n    const request = context.switchToHttp().getRequest();\n    if (!request?.headers?.authorization) {\n      throw new UnauthorizedException('Missing authorization header');\n    }\n    if (!request.headers.authorization.startsWith('Bearer ')) {\n      throw new UnauthorizedException('Invalid authorization header');\n    }\n    const token = request.headers.authorization.split(' ')[1];\n    if (!token) {\n      throw new UnauthorizedException('Missing token');\n    }\n    const user = this.authService.getUserFromSessionToken(token);\n    request.user = user;\n    return true;\n  }\n}\n\n@Injectable()\nexport class OptionalAuthGuard extends TokenAuthorizer implements CanActivate {\n  async canActivate(context: ExecutionContext): Promise {\n    try {\n      return await this.authorizeToken(context);\n    } catch (e) {\n      return true;\n    }\n  }\n}\n\n@Injectable()\nexport class RequiredAuthGuard extends TokenAuthorizer implements CanActivate {\n  async canActivate(context: ExecutionContext): Promise {\n    return this.authorizeToken(context);\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PasswordEntity.html":{"url":"classes/PasswordEntity.html","title":"class - PasswordEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PasswordEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/passwords.entity.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        YooBaseEntity\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                password\n                            \n                            \n                                user\n                            \n                            \n                                userId\n                            \n                            \n                                createdAt\n                            \n                            \n                                id\n                            \n                            \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/passwords.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserEntity\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @JoinColumn({name: 'userId'})@OneToOne(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/passwords.entity.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/passwords.entity.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn({name: 'created_at'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         YooBaseEntity\n\n                            \n                        \n                    \n                        \n                                Defined in         YooBaseEntity:15\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                        \n                            \n                                Inherited from         YooBaseEntity\n\n                            \n                        \n                    \n                        \n                                Defined in         YooBaseEntity:12\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn({name: 'updated_at'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         YooBaseEntity\n\n                            \n                        \n                    \n                        \n                                Defined in         YooBaseEntity:18\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { YooBaseEntity } from 'src/commons/base.entity';\nimport { UserEntity } from 'src/users/users.entity';\nimport { Column, Entity, JoinColumn, OneToOne } from 'typeorm';\n\n@Entity('passwords')\nexport class PasswordEntity extends YooBaseEntity {\n  @Column()\n  userId: string;\n\n  @JoinColumn({ name: 'userId' })\n  @OneToOne(() => UserEntity)\n  user: UserEntity;\n\n  @Column({ nullable: false })\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PostCreateRequestBody.html":{"url":"classes/PostCreateRequestBody.html","title":"class - PostCreateRequestBody","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PostCreateRequestBody\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/posts.controller.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                originalPostId\n                            \n                            \n                                replyToPostId\n                            \n                            \n                                text\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        originalPostId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/posts.controller.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        replyToPostId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/posts.controller.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        text\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/posts.controller.ts:25\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  Body,\n  Delete,\n  Param,\n  Post,\n  Put,\n  Query,\n  Req,\n  UseGuards,\n} from '@nestjs/common';\nimport { Controller, Get } from '@nestjs/common';\nimport {\n  ApiBearerAuth,\n  ApiProperty,\n  ApiPropertyOptional,\n  ApiTags,\n} from '@nestjs/swagger';\nimport { User } from 'src/auth/auth.decorator';\nimport { RequiredAuthGuard } from 'src/auth/auth.guard';\nimport { UserEntity } from 'src/users/users.entity';\nimport { PostEntity } from './posts.entity';\nimport { PostsService } from './posts.service';\n\nclass PostCreateRequestBody {\n  @ApiProperty() text: string;\n  @ApiPropertyOptional() originalPostId: string;\n  @ApiPropertyOptional() replyToPostId: string;\n}\n\nclass PostDetailsQueryParams {\n  @ApiPropertyOptional() authorId: string;\n  @ApiPropertyOptional() hashtags: string[];\n}\n\n@ApiTags('posts')\n@Controller('posts')\nexport class PostsController {\n  constructor(private readonly postsService: PostsService) {}\n\n  @Get('/')\n  async getAllPosts(\n    @Query() query: PostDetailsQueryParams,\n  ): Promise {\n    return await this.postsService.getAllPosts(query.authorId);\n  }\n\n  @Get('/:postId')\n  async getPostDetails(@Param('postId') postId: string): Promise {\n    return await this.postsService.getPost(postId);\n  }\n\n  @ApiBearerAuth()\n  @UseGuards(RequiredAuthGuard)\n  @Post('/')\n  async createNewPost(\n    @User() author: UserEntity,\n    @Body() post: PostCreateRequestBody,\n  ): Promise {\n    const createdPost = await this.postsService.createPost(\n      post,\n      author,\n      post.originalPostId,\n      post.replyToPostId,\n    );\n    return createdPost;\n  }\n\n  @ApiBearerAuth()\n  @UseGuards(RequiredAuthGuard)\n  @Delete('/:postId')\n  async deletePost(@Param('postId') postId: string) {\n    const deletedPost = {\n      id: postId,\n      deleted: await this.postsService.deletePost(postId),\n    };\n\n    return deletedPost;\n  }\n\n  @ApiBearerAuth()\n  @UseGuards(RequiredAuthGuard)\n  @Put('/:postid/like')\n  async likePost(@Param('postid') postid: string, @Req() req) {\n    const token = (req.headers.authorization as string).replace('Bearer ', '');\n    const likedPost = {\n      postId: postid,\n      liked: await this.postsService.likePost(token, postid),\n    };\n\n    return likedPost;\n  }\n\n  @ApiBearerAuth()\n  @UseGuards(RequiredAuthGuard)\n  @Delete('/:postid/like')\n  async unlikePost(@Param('postid') postid: string, @Req() req) {\n    const token = (req.headers.authorization as string).replace('Bearer ', '');\n    const unlikedPost = {\n      postId: postid,\n      unliked: await this.postsService.unlikePost(token, postid),\n    };\n\n    return unlikedPost;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PostDetailsQueryParams.html":{"url":"classes/PostDetailsQueryParams.html","title":"class - PostDetailsQueryParams","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PostDetailsQueryParams\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/posts.controller.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                authorId\n                            \n                            \n                                hashtags\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        authorId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/posts.controller.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        hashtags\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/posts.controller.ts:32\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  Body,\n  Delete,\n  Param,\n  Post,\n  Put,\n  Query,\n  Req,\n  UseGuards,\n} from '@nestjs/common';\nimport { Controller, Get } from '@nestjs/common';\nimport {\n  ApiBearerAuth,\n  ApiProperty,\n  ApiPropertyOptional,\n  ApiTags,\n} from '@nestjs/swagger';\nimport { User } from 'src/auth/auth.decorator';\nimport { RequiredAuthGuard } from 'src/auth/auth.guard';\nimport { UserEntity } from 'src/users/users.entity';\nimport { PostEntity } from './posts.entity';\nimport { PostsService } from './posts.service';\n\nclass PostCreateRequestBody {\n  @ApiProperty() text: string;\n  @ApiPropertyOptional() originalPostId: string;\n  @ApiPropertyOptional() replyToPostId: string;\n}\n\nclass PostDetailsQueryParams {\n  @ApiPropertyOptional() authorId: string;\n  @ApiPropertyOptional() hashtags: string[];\n}\n\n@ApiTags('posts')\n@Controller('posts')\nexport class PostsController {\n  constructor(private readonly postsService: PostsService) {}\n\n  @Get('/')\n  async getAllPosts(\n    @Query() query: PostDetailsQueryParams,\n  ): Promise {\n    return await this.postsService.getAllPosts(query.authorId);\n  }\n\n  @Get('/:postId')\n  async getPostDetails(@Param('postId') postId: string): Promise {\n    return await this.postsService.getPost(postId);\n  }\n\n  @ApiBearerAuth()\n  @UseGuards(RequiredAuthGuard)\n  @Post('/')\n  async createNewPost(\n    @User() author: UserEntity,\n    @Body() post: PostCreateRequestBody,\n  ): Promise {\n    const createdPost = await this.postsService.createPost(\n      post,\n      author,\n      post.originalPostId,\n      post.replyToPostId,\n    );\n    return createdPost;\n  }\n\n  @ApiBearerAuth()\n  @UseGuards(RequiredAuthGuard)\n  @Delete('/:postId')\n  async deletePost(@Param('postId') postId: string) {\n    const deletedPost = {\n      id: postId,\n      deleted: await this.postsService.deletePost(postId),\n    };\n\n    return deletedPost;\n  }\n\n  @ApiBearerAuth()\n  @UseGuards(RequiredAuthGuard)\n  @Put('/:postid/like')\n  async likePost(@Param('postid') postid: string, @Req() req) {\n    const token = (req.headers.authorization as string).replace('Bearer ', '');\n    const likedPost = {\n      postId: postid,\n      liked: await this.postsService.likePost(token, postid),\n    };\n\n    return likedPost;\n  }\n\n  @ApiBearerAuth()\n  @UseGuards(RequiredAuthGuard)\n  @Delete('/:postid/like')\n  async unlikePost(@Param('postid') postid: string, @Req() req) {\n    const token = (req.headers.authorization as string).replace('Bearer ', '');\n    const unlikedPost = {\n      postId: postid,\n      unliked: await this.postsService.unlikePost(token, postid),\n    };\n\n    return unlikedPost;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PostEntity.html":{"url":"classes/PostEntity.html","title":"class - PostEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PostEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/posts.entity.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        YooBaseEntity\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                author\n                            \n                            \n                                hashtags\n                            \n                            \n                                images\n                            \n                            \n                                likeCount\n                            \n                            \n                                mentions\n                            \n                            \n                                origPost\n                            \n                            \n                                replyTo\n                            \n                            \n                                repostCount\n                            \n                            \n                                text\n                            \n                            \n                                createdAt\n                            \n                            \n                                id\n                            \n                            \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        author\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserEntity\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined)@JoinColumn({name: 'author_id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/posts.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        hashtags\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Array\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/posts.entity.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        images\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Array\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/posts.entity.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        likeCount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'like_count', default: 0})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/posts.entity.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        mentions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Array\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/posts.entity.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        origPost\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PostEntity\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToOne(undefined)@JoinColumn({name: 'orig_post_id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/posts.entity.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        replyTo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PostEntity\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToOne(undefined)@JoinColumn({name: 'reply_to_id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/posts.entity.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        repostCount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'repost_count', default: 0})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/posts.entity.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        text\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({length: 240, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/posts.entity.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn({name: 'created_at'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         YooBaseEntity\n\n                            \n                        \n                    \n                        \n                                Defined in         YooBaseEntity:15\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                        \n                            \n                                Inherited from         YooBaseEntity\n\n                            \n                        \n                    \n                        \n                                Defined in         YooBaseEntity:12\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn({name: 'updated_at'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         YooBaseEntity\n\n                            \n                        \n                    \n                        \n                                Defined in         YooBaseEntity:18\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { YooBaseEntity } from 'src/commons/base.entity';\nimport { UserEntity } from 'src/users/users.entity';\nimport { Column, Entity, JoinColumn, ManyToOne, OneToOne } from 'typeorm';\n\n@Entity('posts')\nexport class PostEntity extends YooBaseEntity {\n  @Column({ length: 240, nullable: true })\n  text: string;\n\n  @Column('json', { nullable: true })\n  images: Array;\n\n  @ManyToOne(() => UserEntity)\n  @JoinColumn({ name: 'author_id' })\n  author: UserEntity;\n\n  @Column({ name: 'like_count', default: 0 })\n  likeCount: number;\n\n  @Column({ name: 'repost_count', default: 0 })\n  repostCount: number;\n\n  @Column('json', { nullable: true })\n  hashtags: Array;\n\n  @Column('json', { nullable: true })\n  mentions: Array;\n\n  @OneToOne(() => PostEntity)\n  @JoinColumn({ name: 'orig_post_id' })\n  origPost: PostEntity;\n\n  @OneToOne(() => PostEntity)\n  @JoinColumn({ name: 'reply_to_id' })\n  replyTo: PostEntity;\n}\n\nclass Mention {\n  name: string;\n  id: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PostsController.html":{"url":"controllers/PostsController.html","title":"controller - PostsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PostsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/posts.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                posts\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createNewPost\n                            \n                            \n                                    Async\n                                deletePost\n                            \n                            \n                                    Async\n                                getAllPosts\n                            \n                            \n                                    Async\n                                getPostDetails\n                            \n                            \n                                    Async\n                                likePost\n                            \n                            \n                                    Async\n                                unlikePost\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createNewPost\n                        \n                    \n                \n            \n            \n                \n                    \n                    createNewPost(author: UserEntity, post: PostCreateRequestBody)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBearerAuth()@UseGuards(RequiredAuthGuard)@Post('/')\n                \n            \n\n            \n                \n                    Defined in src/posts/posts.controller.ts:55\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    author\n                                    \n                                                UserEntity\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    post\n                                    \n                                                PostCreateRequestBody\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deletePost\n                        \n                    \n                \n            \n            \n                \n                    \n                    deletePost(postId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBearerAuth()@UseGuards(RequiredAuthGuard)@Delete('/:postId')\n                \n            \n\n            \n                \n                    Defined in src/posts/posts.controller.ts:71\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    postId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAllPosts\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllPosts(query: PostDetailsQueryParams)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/')\n                \n            \n\n            \n                \n                    Defined in src/posts/posts.controller.ts:41\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    query\n                                    \n                                                PostDetailsQueryParams\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getPostDetails\n                        \n                    \n                \n            \n            \n                \n                    \n                    getPostDetails(postId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:postId')\n                \n            \n\n            \n                \n                    Defined in src/posts/posts.controller.ts:48\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    postId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        likePost\n                        \n                    \n                \n            \n            \n                \n                    \n                    likePost(postid: string, req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBearerAuth()@UseGuards(RequiredAuthGuard)@Put('/:postid/like')\n                \n            \n\n            \n                \n                    Defined in src/posts/posts.controller.ts:83\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    postid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        unlikePost\n                        \n                    \n                \n            \n            \n                \n                    \n                    unlikePost(postid: string, req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBearerAuth()@UseGuards(RequiredAuthGuard)@Delete('/:postid/like')\n                \n            \n\n            \n                \n                    Defined in src/posts/posts.controller.ts:96\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    postid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Delete,\n  Param,\n  Post,\n  Put,\n  Query,\n  Req,\n  UseGuards,\n} from '@nestjs/common';\nimport { Controller, Get } from '@nestjs/common';\nimport {\n  ApiBearerAuth,\n  ApiProperty,\n  ApiPropertyOptional,\n  ApiTags,\n} from '@nestjs/swagger';\nimport { User } from 'src/auth/auth.decorator';\nimport { RequiredAuthGuard } from 'src/auth/auth.guard';\nimport { UserEntity } from 'src/users/users.entity';\nimport { PostEntity } from './posts.entity';\nimport { PostsService } from './posts.service';\n\nclass PostCreateRequestBody {\n  @ApiProperty() text: string;\n  @ApiPropertyOptional() originalPostId: string;\n  @ApiPropertyOptional() replyToPostId: string;\n}\n\nclass PostDetailsQueryParams {\n  @ApiPropertyOptional() authorId: string;\n  @ApiPropertyOptional() hashtags: string[];\n}\n\n@ApiTags('posts')\n@Controller('posts')\nexport class PostsController {\n  constructor(private readonly postsService: PostsService) {}\n\n  @Get('/')\n  async getAllPosts(\n    @Query() query: PostDetailsQueryParams,\n  ): Promise {\n    return await this.postsService.getAllPosts(query.authorId);\n  }\n\n  @Get('/:postId')\n  async getPostDetails(@Param('postId') postId: string): Promise {\n    return await this.postsService.getPost(postId);\n  }\n\n  @ApiBearerAuth()\n  @UseGuards(RequiredAuthGuard)\n  @Post('/')\n  async createNewPost(\n    @User() author: UserEntity,\n    @Body() post: PostCreateRequestBody,\n  ): Promise {\n    const createdPost = await this.postsService.createPost(\n      post,\n      author,\n      post.originalPostId,\n      post.replyToPostId,\n    );\n    return createdPost;\n  }\n\n  @ApiBearerAuth()\n  @UseGuards(RequiredAuthGuard)\n  @Delete('/:postId')\n  async deletePost(@Param('postId') postId: string) {\n    const deletedPost = {\n      id: postId,\n      deleted: await this.postsService.deletePost(postId),\n    };\n\n    return deletedPost;\n  }\n\n  @ApiBearerAuth()\n  @UseGuards(RequiredAuthGuard)\n  @Put('/:postid/like')\n  async likePost(@Param('postid') postid: string, @Req() req) {\n    const token = (req.headers.authorization as string).replace('Bearer ', '');\n    const likedPost = {\n      postId: postid,\n      liked: await this.postsService.likePost(token, postid),\n    };\n\n    return likedPost;\n  }\n\n  @ApiBearerAuth()\n  @UseGuards(RequiredAuthGuard)\n  @Delete('/:postid/like')\n  async unlikePost(@Param('postid') postid: string, @Req() req) {\n    const token = (req.headers.authorization as string).replace('Bearer ', '');\n    const unlikedPost = {\n      postId: postid,\n      unliked: await this.postsService.unlikePost(token, postid),\n    };\n\n    return unlikedPost;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PostsModule.html":{"url":"modules/PostsModule.html","title":"module - PostsModule","body":"\n                   \n\n\n\n\n    Modules\n    PostsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_PostsModule\n\n\n\ncluster_PostsModule_imports\n\n\n\ncluster_PostsModule_providers\n\n\n\n\nLikesModule\n\nLikesModule\n\n\n\nPostsModule\n\nPostsModule\n\nPostsModule -->\n\nLikesModule->PostsModule\n\n\n\n\n\nPostsService\n\nPostsService\n\nPostsModule -->\n\nPostsService->PostsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/posts/posts.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PostsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            PostsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            LikesModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { LikesModule } from 'src/likes/likes.module';\nimport { PostsController } from './posts.controller';\nimport { PostEntity } from './posts.entity';\nimport { PostsService } from './posts.service';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([PostEntity]), LikesModule],\n  controllers: [PostsController],\n  providers: [PostsService],\n})\nexport class PostsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PostsRepository.html":{"url":"classes/PostsRepository.html","title":"class - PostsRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PostsRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/posts.repository.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    Repository\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { EntityRepository, Repository } from 'typeorm';\nimport { PostEntity } from './posts.entity';\n\n@EntityRepository(PostEntity)\nexport class PostsRepository extends Repository {}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PostsService.html":{"url":"injectables/PostsService.html","title":"injectable - PostsService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  PostsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/posts.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createPost\n                            \n                            \n                                    Async\n                                deletePost\n                            \n                            \n                                    Async\n                                getAllPosts\n                            \n                            \n                                    Async\n                                getPost\n                            \n                            \n                                    Async\n                                likePost\n                            \n                            \n                                    Private\n                                    Async\n                                likeUnlikePostHelper\n                            \n                            \n                                    Async\n                                unlikePost\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(likesService: LikesService, authService: AuthService, postsRepository: PostsRepository)\n                    \n                \n                        \n                            \n                                Defined in src/posts/posts.service.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        likesService\n                                                  \n                                                        \n                                                                        LikesService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        postsRepository\n                                                  \n                                                        \n                                                                        PostsRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createPost\n                        \n                    \n                \n            \n            \n                \n                    \n                    createPost(post: Partial, author: UserEntity, originalPostId: string, replyToPostId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/posts/posts.service.ts:82\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    post\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    author\n                                    \n                                                UserEntity\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    originalPostId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    replyToPostId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deletePost\n                        \n                    \n                \n            \n            \n                \n                    \n                    deletePost(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/posts/posts.service.ts:74\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAllPosts\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllPosts(authorId?: string, hashtags?: string[] | null)\n                \n            \n\n\n            \n                \n                    Defined in src/posts/posts.service.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    authorId\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    hashtags\n                                    \n                                            string[] | null\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getPost\n                        \n                    \n                \n            \n            \n                \n                    \n                    getPost(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/posts/posts.service.ts:59\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        likePost\n                        \n                    \n                \n            \n            \n                \n                    \n                    likePost(token: string, postId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/posts/posts.service.ts:125\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    token\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    postId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Async\n                        likeUnlikePostHelper\n                        \n                    \n                \n            \n            \n                \n                    \n                    likeUnlikePostHelper(token: string, postId: string, type: \"like\" | \"unlike\")\n                \n            \n\n\n            \n                \n                    Defined in src/posts/posts.service.ts:139\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    token\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    postId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    type\n                                    \n                                            \"like\" | \"unlike\"\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        unlikePost\n                        \n                    \n                \n            \n            \n                \n                    \n                    unlikePost(token: string, postId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/posts/posts.service.ts:132\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    token\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    postId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  Injectable,\n  NotFoundException,\n} from '@nestjs/common';\nimport { AuthService } from 'src/auth/auth.service';\nimport { LikesService } from 'src/likes/likes.service';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { UserEntity } from 'src/users/users.entity';\nimport { PostEntity } from './posts.entity';\nimport { PostsRepository } from './posts.repository';\n\n@Injectable()\nexport class PostsService {\n  constructor(\n    private readonly likesService: LikesService,\n    private readonly authService: AuthService,\n    @InjectRepository(PostEntity)\n    private postsRepository: PostsRepository,\n  ) {}\n\n  /**\n   * @description find all posts\n   */\n  async getAllPosts(\n    authorId?: string,\n    hashtags?: string[] | null,\n  ): Promise> {\n    // TODO: implementation pagination (size + limit)\n    // TODO: implement filter by hashtag\n    const queryBuilder = this.postsRepository\n      .createQueryBuilder('posts')\n      .leftJoinAndSelect('posts.author', 'author')\n      .leftJoinAndSelect('posts.origPost', 'origPost')\n      .addSelect('origPost.author')\n      .leftJoinAndSelect('origPost.author', 'origPostAuthor')\n      .leftJoinAndSelect('posts.replyTo', 'replyTo')\n      .addSelect('replyTo.author')\n      .leftJoinAndSelect('replyTo.author', 'replyToAuthor');\n\n    if (authorId) {\n      queryBuilder.where(`posts.author = :authorId`, { authorId });\n    }\n\n    if (hashtags && hashtags.length > 0) {\n      // TODO\n    }\n\n    return queryBuilder\n      .addSelect('posts.created_at')\n      .orderBy('posts.created_at', 'DESC')\n      .limit(100)\n      .getMany();\n  }\n\n  /**\n   * @description find post by id\n   */\n  async getPost(id: string): Promise {\n    return this.postsRepository.findOne(id, {\n      relations: [\n        'author',\n        'origPost',\n        'origPost.author',\n        'replyTo',\n        'replyTo.author',\n      ],\n    });\n  }\n\n  /**\n   * @description delete post by id\n   */\n  async deletePost(id: string): Promise {\n    const deleteResult = await this.postsRepository.delete({ id });\n    return deleteResult.affected === 1;\n  }\n\n  /**\n   * @description create post\n   */\n  async createPost(\n    post: Partial,\n    author: UserEntity,\n    originalPostId: string,\n    replyToPostId: string,\n  ): Promise {\n    // TODO: detect #hashtags in the post and create hashtag entities for them\n    // TODO: deletect @user mentions in the post\n    if (!post.text && !originalPostId) {\n      throw new BadRequestException('Post must contain text or be a repost');\n    }\n\n    if (originalPostId && replyToPostId) {\n      throw new BadRequestException('Post can either be a reply or a repost');\n    }\n\n    const newPost = new PostEntity();\n    newPost.text = post.text;\n    newPost.author = author;\n\n    if (originalPostId) {\n      const origPost = await this.postsRepository.findOne(originalPostId);\n      if (!origPost) {\n        throw new NotFoundException('Original post not found');\n      }\n      newPost.origPost = origPost;\n    }\n\n    if (replyToPostId) {\n      const replyTo = await this.postsRepository.findOne(replyToPostId);\n      if (!replyTo) {\n        throw new NotFoundException('Original post not found');\n      }\n      newPost.replyTo = replyTo;\n    }\n\n    const savedPost = await this.postsRepository.save(newPost);\n    return savedPost;\n  }\n\n  /**\n   * @description like post by id\n   */\n  async likePost(token: string, postId: string): Promise {\n    return await this.likeUnlikePostHelper(token, postId, 'like');\n  }\n\n  /**\n   * @description unlike post by id\n   */\n  async unlikePost(token: string, postId: string): Promise {\n    return await this.likeUnlikePostHelper(token, postId, 'unlike');\n  }\n\n  /**\n   * @description helper method for like/unlike post by id\n   */\n  private async likeUnlikePostHelper(\n    token: string,\n    postId: string,\n    type: 'like' | 'unlike',\n  ) {\n    const user = await this.authService.getUserFromSessionToken(token);\n\n    const post = await this.getPost(postId);\n    if (!post) {\n      throw new NotFoundException('Post not found');\n    }\n\n    return type === 'like'\n      ? await this.likesService.likePost(post, user)\n      : await this.likesService.unlikePost(postId, user.id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ProdDbModule.html":{"url":"modules/ProdDbModule.html","title":"module - ProdDbModule","body":"\n                   \n\n\n\n\n    Modules\n    ProdDbModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/commons/db.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            Database module for production\n\n        \n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { Global, Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { PasswordEntity } from 'src/auth/passwords.entity';\nimport { SessionsEntity } from 'src/auth/sessions.entity';\nimport { LikesEntity } from 'src/likes/likes.entity';\nimport { PostEntity } from 'src/posts/posts.entity';\nimport { UserFollowingEntity } from 'src/users/user-followings.entity';\nimport { UserEntity } from 'src/users/users.entity';\n\n/**\n * Database module for production\n */\n@Global()\n@Module({\n  imports: [\n    TypeOrmModule.forRoot({\n      type: 'mysql',\n      username: 'yooadmin',\n      password: 'yoopass',\n      database: 'yoodb',\n      synchronize: true,\n      logger: 'advanced-console',\n      logging: 'all',\n      entities: [\n        UserEntity,\n        PostEntity,\n        PasswordEntity,\n        SessionsEntity,\n        UserFollowingEntity,\n        LikesEntity,\n      ],\n    }),\n  ],\n})\nexport class ProdDbModule {}\n\n/**\n * Database module for testing purposes\n */\n@Global()\n@Module({\n  imports: [\n    TypeOrmModule.forRoot({\n      type: 'mysql',\n      username: 'yooadmin',\n      password: 'yoopass',\n      database: 'yoodb_test',\n      synchronize: true,\n      dropSchema: true,\n      logger: 'advanced-console',\n      logging: 'all',\n      entities: [\n        UserEntity,\n        PostEntity,\n        PasswordEntity,\n        SessionsEntity,\n        UserFollowingEntity,\n        LikesEntity,\n      ],\n    }),\n  ],\n})\nexport class TestDbModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/RequiredAuthGuard.html":{"url":"guards/RequiredAuthGuard.html","title":"guard - RequiredAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n    Guards\n    RequiredAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/auth/auth.guard.ts\n            \n\n\n\n                \n                Extends\n                \n                \n                            TokenAuthorizer\n                \n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                    \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.guard.ts:43\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import {\n  CanActivate,\n  ExecutionContext,\n  Inject,\n  Injectable,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { AuthService } from './auth.service';\n\nclass TokenAuthorizer {\n  constructor(@Inject(AuthService) private readonly authService: AuthService) {}\n  protected async authorizeToken(context: ExecutionContext): Promise {\n    const request = context.switchToHttp().getRequest();\n    if (!request?.headers?.authorization) {\n      throw new UnauthorizedException('Missing authorization header');\n    }\n    if (!request.headers.authorization.startsWith('Bearer ')) {\n      throw new UnauthorizedException('Invalid authorization header');\n    }\n    const token = request.headers.authorization.split(' ')[1];\n    if (!token) {\n      throw new UnauthorizedException('Missing token');\n    }\n    const user = this.authService.getUserFromSessionToken(token);\n    request.user = user;\n    return true;\n  }\n}\n\n@Injectable()\nexport class OptionalAuthGuard extends TokenAuthorizer implements CanActivate {\n  async canActivate(context: ExecutionContext): Promise {\n    try {\n      return await this.authorizeToken(context);\n    } catch (e) {\n      return true;\n    }\n  }\n}\n\n@Injectable()\nexport class RequiredAuthGuard extends TokenAuthorizer implements CanActivate {\n  async canActivate(context: ExecutionContext): Promise {\n    return this.authorizeToken(context);\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SessionsEntity.html":{"url":"classes/SessionsEntity.html","title":"class - SessionsEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SessionsEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/sessions.entity.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        YooBaseEntity\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                user\n                            \n                            \n                                userId\n                            \n                            \n                                createdAt\n                            \n                            \n                                id\n                            \n                            \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Promise\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @JoinColumn({name: 'userId'})@ManyToOne(undefined, {lazy: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/sessions.entity.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/sessions.entity.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn({name: 'created_at'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         YooBaseEntity\n\n                            \n                        \n                    \n                        \n                                Defined in         YooBaseEntity:15\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                        \n                            \n                                Inherited from         YooBaseEntity\n\n                            \n                        \n                    \n                        \n                                Defined in         YooBaseEntity:12\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn({name: 'updated_at'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         YooBaseEntity\n\n                            \n                        \n                    \n                        \n                                Defined in         YooBaseEntity:18\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { YooBaseEntity } from 'src/commons/base.entity';\nimport { UserEntity } from 'src/users/users.entity';\nimport { Column, Entity, JoinColumn, ManyToOne } from 'typeorm';\n\n@Entity('sessions')\nexport class SessionsEntity extends YooBaseEntity {\n  @Column()\n  userId: string;\n\n  @JoinColumn({ name: 'userId' })\n  @ManyToOne(() => UserEntity, { lazy: true })\n  user: Promise;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/TestDbModule.html":{"url":"modules/TestDbModule.html","title":"module - TestDbModule","body":"\n                   \n\n\n\n\n    Modules\n    TestDbModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/commons/db.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            Database module for testing purposes\n\n        \n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { Global, Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { PasswordEntity } from 'src/auth/passwords.entity';\nimport { SessionsEntity } from 'src/auth/sessions.entity';\nimport { LikesEntity } from 'src/likes/likes.entity';\nimport { PostEntity } from 'src/posts/posts.entity';\nimport { UserFollowingEntity } from 'src/users/user-followings.entity';\nimport { UserEntity } from 'src/users/users.entity';\n\n/**\n * Database module for production\n */\n@Global()\n@Module({\n  imports: [\n    TypeOrmModule.forRoot({\n      type: 'mysql',\n      username: 'yooadmin',\n      password: 'yoopass',\n      database: 'yoodb',\n      synchronize: true,\n      logger: 'advanced-console',\n      logging: 'all',\n      entities: [\n        UserEntity,\n        PostEntity,\n        PasswordEntity,\n        SessionsEntity,\n        UserFollowingEntity,\n        LikesEntity,\n      ],\n    }),\n  ],\n})\nexport class ProdDbModule {}\n\n/**\n * Database module for testing purposes\n */\n@Global()\n@Module({\n  imports: [\n    TypeOrmModule.forRoot({\n      type: 'mysql',\n      username: 'yooadmin',\n      password: 'yoopass',\n      database: 'yoodb_test',\n      synchronize: true,\n      dropSchema: true,\n      logger: 'advanced-console',\n      logging: 'all',\n      entities: [\n        UserEntity,\n        PostEntity,\n        PasswordEntity,\n        SessionsEntity,\n        UserFollowingEntity,\n        LikesEntity,\n      ],\n    }),\n  ],\n})\nexport class TestDbModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TokenAuthorizer.html":{"url":"classes/TokenAuthorizer.html","title":"class - TokenAuthorizer","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TokenAuthorizer\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.guard.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                    Async\n                                authorizeToken\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.guard.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        Async\n                        authorizeToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    authorizeToken(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.guard.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  CanActivate,\n  ExecutionContext,\n  Inject,\n  Injectable,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { AuthService } from './auth.service';\n\nclass TokenAuthorizer {\n  constructor(@Inject(AuthService) private readonly authService: AuthService) {}\n  protected async authorizeToken(context: ExecutionContext): Promise {\n    const request = context.switchToHttp().getRequest();\n    if (!request?.headers?.authorization) {\n      throw new UnauthorizedException('Missing authorization header');\n    }\n    if (!request.headers.authorization.startsWith('Bearer ')) {\n      throw new UnauthorizedException('Invalid authorization header');\n    }\n    const token = request.headers.authorization.split(' ')[1];\n    if (!token) {\n      throw new UnauthorizedException('Missing token');\n    }\n    const user = this.authService.getUserFromSessionToken(token);\n    request.user = user;\n    return true;\n  }\n}\n\n@Injectable()\nexport class OptionalAuthGuard extends TokenAuthorizer implements CanActivate {\n  async canActivate(context: ExecutionContext): Promise {\n    try {\n      return await this.authorizeToken(context);\n    } catch (e) {\n      return true;\n    }\n  }\n}\n\n@Injectable()\nexport class RequiredAuthGuard extends TokenAuthorizer implements CanActivate {\n  async canActivate(context: ExecutionContext): Promise {\n    return this.authorizeToken(context);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserCreateRequestBody.html":{"url":"classes/UserCreateRequestBody.html","title":"class - UserCreateRequestBody","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserCreateRequestBody\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.controller.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                avatar\n                            \n                            \n                                    Optional\n                                bio\n                            \n                            \n                                    Optional\n                                name\n                            \n                            \n                                password\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        avatar\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/users.controller.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        bio\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/users.controller.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/users.controller.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/users.controller.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/users.controller.ts:22\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  Body,\n  Delete,\n  ForbiddenException,\n  NotFoundException,\n  UseGuards,\n} from '@nestjs/common';\nimport { Controller, Get, Param, Patch, Post, Put } from '@nestjs/common';\nimport {\n  ApiBearerAuth,\n  ApiParam,\n  ApiProperty,\n  ApiPropertyOptional,\n  ApiTags,\n} from '@nestjs/swagger';\nimport { User } from 'src/auth/auth.decorator';\nimport { RequiredAuthGuard } from 'src/auth/auth.guard';\nimport { UserEntity } from './users.entity';\nimport { UsersService } from './users.service';\n\nclass UserCreateRequestBody {\n  @ApiProperty() username: string;\n  @ApiProperty() password: string;\n  @ApiPropertyOptional() name?: string;\n  @ApiPropertyOptional() avatar?: string;\n  @ApiPropertyOptional() bio?: string;\n}\n\nclass UserUpdateRequestBody {\n  @ApiPropertyOptional() password?: string;\n  @ApiPropertyOptional() name?: string;\n  @ApiPropertyOptional() avatar?: string;\n  @ApiPropertyOptional() bio?: string;\n}\n\n@ApiTags('users')\n@Controller('users')\nexport class UsersController {\n  constructor(private userService: UsersService) {}\n\n  @Get('/@:username')\n  async getUserByUsername(@Param('username') username: string): Promise {\n    const user = await this.userService.getUserByUsername(username);\n    if (!user) {\n      throw new NotFoundException('User not found');\n    }\n    return user;\n  }\n\n  @Get('/:userid')\n  async getUserByUserid(@Param('userid') userid: string): Promise {\n    const user = await this.userService.getUserByUserId(userid);\n\n    if (!user) {\n      throw new NotFoundException('User not found');\n    }\n\n    return user;\n  }\n\n  @Post('/')\n  async createNewUser(\n    @Body() createUserRequest: UserCreateRequestBody,\n  ): Promise {\n    const user = await this.userService.createUser(\n      createUserRequest,\n      createUserRequest.password,\n    );\n    return user;\n  }\n\n  @ApiBearerAuth()\n  @UseGuards(RequiredAuthGuard)\n  @Patch('/:userid')\n  async updateUserDetails(\n    @User() authdUser: UserEntity,\n    @Param('userid') userid: string,\n    @Body() updateUserRequest: UserUpdateRequestBody,\n  ): Promise {\n    if (authdUser.id !== userid) {\n      throw new ForbiddenException('You can only update your own user details');\n    }\n    const user = await this.userService.updateUser(userid, updateUserRequest);\n    return user;\n  }\n\n  @ApiBearerAuth()\n  @UseGuards(RequiredAuthGuard)\n  @Put('/:userid/follow')\n  async followUser(\n    @User() follower: UserEntity,\n    @Param('userid') followeeId: string,\n  ): Promise {\n    const followedUser = await this.userService.createUserFollowRelation(\n      follower,\n      followeeId,\n    );\n    return followedUser;\n  }\n\n  @ApiBearerAuth()\n  @UseGuards(RequiredAuthGuard)\n  @Delete('/:userid/follow')\n  async unfollowUser(\n    @User() follower: UserEntity,\n    @Param('userid') followeeId: string,\n  ): Promise {\n    const unfollowedUser = await this.userService.deleteUserFollowRelation(\n      follower,\n      followeeId,\n    );\n    return unfollowedUser;\n  }\n\n  @ApiBearerAuth()\n  @UseGuards(RequiredAuthGuard)\n  @Get('/:userid/followers')\n  async getFollowersOfUser(): Promise {\n    return [];\n  }\n\n  @ApiBearerAuth()\n  @UseGuards(RequiredAuthGuard)\n  @Put('/:userid/followees')\n  async getFolloweesOfUser(): Promise {\n    return [];\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserEntity.html":{"url":"classes/UserEntity.html","title":"class - UserEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.entity.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        YooBaseEntity\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                avatar\n                            \n                            \n                                    Optional\n                                bio\n                            \n                            \n                                followeeCount\n                            \n                            \n                                followerCount\n                            \n                            \n                                name\n                            \n                            \n                                username\n                            \n                            \n                                userPassword\n                            \n                            \n                                verified\n                            \n                            \n                                createdAt\n                            \n                            \n                                id\n                            \n                            \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        avatar\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/users.entity.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        bio\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true, length: 240})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/users.entity.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        followeeCount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'followee_count', default: 0})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/users.entity.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        followerCount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'follower_count', default: 0})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/users.entity.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true, length: 50})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/users.entity.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({length: 30, nullable: false, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/users.entity.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userPassword\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PasswordEntity\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToOne(undefined, undefined, {lazy: true, cascade: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/users.entity.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        verified\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('boolean', {default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/users.entity.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn({name: 'created_at'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         YooBaseEntity\n\n                            \n                        \n                    \n                        \n                                Defined in         YooBaseEntity:15\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                        \n                            \n                                Inherited from         YooBaseEntity\n\n                            \n                        \n                    \n                        \n                                Defined in         YooBaseEntity:12\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn({name: 'updated_at'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         YooBaseEntity\n\n                            \n                        \n                    \n                        \n                                Defined in         YooBaseEntity:18\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PasswordEntity } from 'src/auth/passwords.entity';\nimport { YooBaseEntity } from 'src/commons/base.entity';\nimport { Column, Entity, OneToOne } from 'typeorm';\n\n@Entity('users')\nexport class UserEntity extends YooBaseEntity {\n  @Column({ length: 30, nullable: false, unique: true })\n  username: string;\n\n  @Column({ nullable: true, length: 50 })\n  name: string;\n\n  @Column({ nullable: true })\n  avatar?: string;\n\n  @Column({ nullable: true, length: 240 })\n  bio?: string;\n\n  @Column({ name: 'follower_count', default: 0 })\n  followerCount: number;\n\n  @Column({ name: 'followee_count', default: 0 })\n  followeeCount: number;\n\n  @Column('boolean', { default: false })\n  verified: boolean;\n\n  @OneToOne((type) => PasswordEntity, (password) => password.user, {\n    lazy: true,\n    cascade: true,\n  })\n  userPassword: PasswordEntity;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserFollowingEntity.html":{"url":"classes/UserFollowingEntity.html","title":"class - UserFollowingEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserFollowingEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/user-followings.entity.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        YooBaseEntity\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                followee\n                            \n                            \n                                follower\n                            \n                            \n                                createdAt\n                            \n                            \n                                id\n                            \n                            \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        followee\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserEntity\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @JoinColumn({name: 'followee_id'})@ManyToOne(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user-followings.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        follower\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserEntity\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @JoinColumn({name: 'follower_id'})@ManyToOne(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user-followings.entity.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn({name: 'created_at'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         YooBaseEntity\n\n                            \n                        \n                    \n                        \n                                Defined in         YooBaseEntity:15\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                        \n                            \n                                Inherited from         YooBaseEntity\n\n                            \n                        \n                    \n                        \n                                Defined in         YooBaseEntity:12\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn({name: 'updated_at'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         YooBaseEntity\n\n                            \n                        \n                    \n                        \n                                Defined in         YooBaseEntity:18\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Entity, JoinColumn, ManyToOne, Unique } from 'typeorm';\nimport { YooBaseEntity } from 'src/commons/base.entity';\nimport { UserEntity } from './users.entity';\n\n// there can be only 1 row of same follower+followee\n@Unique('following_pair', ['follower', 'followee'])\n@Entity('user_followings')\nexport class UserFollowingEntity extends YooBaseEntity {\n  @JoinColumn({ name: 'follower_id' })\n  @ManyToOne(() => UserEntity)\n  follower: UserEntity;\n\n  @JoinColumn({ name: 'followee_id' })\n  @ManyToOne(() => UserEntity)\n  followee: UserEntity;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserUpdateRequestBody.html":{"url":"classes/UserUpdateRequestBody.html","title":"class - UserUpdateRequestBody","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserUpdateRequestBody\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.controller.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                avatar\n                            \n                            \n                                    Optional\n                                bio\n                            \n                            \n                                    Optional\n                                name\n                            \n                            \n                                    Optional\n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        avatar\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/users.controller.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        bio\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/users.controller.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/users.controller.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/users.controller.ts:30\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  Body,\n  Delete,\n  ForbiddenException,\n  NotFoundException,\n  UseGuards,\n} from '@nestjs/common';\nimport { Controller, Get, Param, Patch, Post, Put } from '@nestjs/common';\nimport {\n  ApiBearerAuth,\n  ApiParam,\n  ApiProperty,\n  ApiPropertyOptional,\n  ApiTags,\n} from '@nestjs/swagger';\nimport { User } from 'src/auth/auth.decorator';\nimport { RequiredAuthGuard } from 'src/auth/auth.guard';\nimport { UserEntity } from './users.entity';\nimport { UsersService } from './users.service';\n\nclass UserCreateRequestBody {\n  @ApiProperty() username: string;\n  @ApiProperty() password: string;\n  @ApiPropertyOptional() name?: string;\n  @ApiPropertyOptional() avatar?: string;\n  @ApiPropertyOptional() bio?: string;\n}\n\nclass UserUpdateRequestBody {\n  @ApiPropertyOptional() password?: string;\n  @ApiPropertyOptional() name?: string;\n  @ApiPropertyOptional() avatar?: string;\n  @ApiPropertyOptional() bio?: string;\n}\n\n@ApiTags('users')\n@Controller('users')\nexport class UsersController {\n  constructor(private userService: UsersService) {}\n\n  @Get('/@:username')\n  async getUserByUsername(@Param('username') username: string): Promise {\n    const user = await this.userService.getUserByUsername(username);\n    if (!user) {\n      throw new NotFoundException('User not found');\n    }\n    return user;\n  }\n\n  @Get('/:userid')\n  async getUserByUserid(@Param('userid') userid: string): Promise {\n    const user = await this.userService.getUserByUserId(userid);\n\n    if (!user) {\n      throw new NotFoundException('User not found');\n    }\n\n    return user;\n  }\n\n  @Post('/')\n  async createNewUser(\n    @Body() createUserRequest: UserCreateRequestBody,\n  ): Promise {\n    const user = await this.userService.createUser(\n      createUserRequest,\n      createUserRequest.password,\n    );\n    return user;\n  }\n\n  @ApiBearerAuth()\n  @UseGuards(RequiredAuthGuard)\n  @Patch('/:userid')\n  async updateUserDetails(\n    @User() authdUser: UserEntity,\n    @Param('userid') userid: string,\n    @Body() updateUserRequest: UserUpdateRequestBody,\n  ): Promise {\n    if (authdUser.id !== userid) {\n      throw new ForbiddenException('You can only update your own user details');\n    }\n    const user = await this.userService.updateUser(userid, updateUserRequest);\n    return user;\n  }\n\n  @ApiBearerAuth()\n  @UseGuards(RequiredAuthGuard)\n  @Put('/:userid/follow')\n  async followUser(\n    @User() follower: UserEntity,\n    @Param('userid') followeeId: string,\n  ): Promise {\n    const followedUser = await this.userService.createUserFollowRelation(\n      follower,\n      followeeId,\n    );\n    return followedUser;\n  }\n\n  @ApiBearerAuth()\n  @UseGuards(RequiredAuthGuard)\n  @Delete('/:userid/follow')\n  async unfollowUser(\n    @User() follower: UserEntity,\n    @Param('userid') followeeId: string,\n  ): Promise {\n    const unfollowedUser = await this.userService.deleteUserFollowRelation(\n      follower,\n      followeeId,\n    );\n    return unfollowedUser;\n  }\n\n  @ApiBearerAuth()\n  @UseGuards(RequiredAuthGuard)\n  @Get('/:userid/followers')\n  async getFollowersOfUser(): Promise {\n    return [];\n  }\n\n  @ApiBearerAuth()\n  @UseGuards(RequiredAuthGuard)\n  @Put('/:userid/followees')\n  async getFolloweesOfUser(): Promise {\n    return [];\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createNewUser\n                            \n                            \n                                    Async\n                                followUser\n                            \n                            \n                                    Async\n                                getFolloweesOfUser\n                            \n                            \n                                    Async\n                                getFollowersOfUser\n                            \n                            \n                                    Async\n                                getUserByUserid\n                            \n                            \n                                    Async\n                                getUserByUsername\n                            \n                            \n                                    Async\n                                unfollowUser\n                            \n                            \n                                    Async\n                                updateUserDetails\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createNewUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    createNewUser(createUserRequest: UserCreateRequestBody)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/')\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:62\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createUserRequest\n                                    \n                                                UserCreateRequestBody\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        followUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    followUser(follower: UserEntity, followeeId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBearerAuth()@UseGuards(RequiredAuthGuard)@Put('/:userid/follow')\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:90\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    follower\n                                    \n                                                UserEntity\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    followeeId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getFolloweesOfUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    getFolloweesOfUser()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBearerAuth()@UseGuards(RequiredAuthGuard)@Put('/:userid/followees')\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:125\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getFollowersOfUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    getFollowersOfUser()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBearerAuth()@UseGuards(RequiredAuthGuard)@Get('/:userid/followers')\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:118\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getUserByUserid\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUserByUserid(userid: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:userid')\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:51\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getUserByUsername\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUserByUsername(username: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/@:username')\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        unfollowUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    unfollowUser(follower: UserEntity, followeeId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBearerAuth()@UseGuards(RequiredAuthGuard)@Delete('/:userid/follow')\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:104\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    follower\n                                    \n                                                UserEntity\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    followeeId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateUserDetails\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateUserDetails(authdUser: UserEntity, userid: string, updateUserRequest: UserUpdateRequestBody)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBearerAuth()@UseGuards(RequiredAuthGuard)@Patch('/:userid')\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:75\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    authdUser\n                                    \n                                                UserEntity\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateUserRequest\n                                    \n                                                UserUpdateRequestBody\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Delete,\n  ForbiddenException,\n  NotFoundException,\n  UseGuards,\n} from '@nestjs/common';\nimport { Controller, Get, Param, Patch, Post, Put } from '@nestjs/common';\nimport {\n  ApiBearerAuth,\n  ApiParam,\n  ApiProperty,\n  ApiPropertyOptional,\n  ApiTags,\n} from '@nestjs/swagger';\nimport { User } from 'src/auth/auth.decorator';\nimport { RequiredAuthGuard } from 'src/auth/auth.guard';\nimport { UserEntity } from './users.entity';\nimport { UsersService } from './users.service';\n\nclass UserCreateRequestBody {\n  @ApiProperty() username: string;\n  @ApiProperty() password: string;\n  @ApiPropertyOptional() name?: string;\n  @ApiPropertyOptional() avatar?: string;\n  @ApiPropertyOptional() bio?: string;\n}\n\nclass UserUpdateRequestBody {\n  @ApiPropertyOptional() password?: string;\n  @ApiPropertyOptional() name?: string;\n  @ApiPropertyOptional() avatar?: string;\n  @ApiPropertyOptional() bio?: string;\n}\n\n@ApiTags('users')\n@Controller('users')\nexport class UsersController {\n  constructor(private userService: UsersService) {}\n\n  @Get('/@:username')\n  async getUserByUsername(@Param('username') username: string): Promise {\n    const user = await this.userService.getUserByUsername(username);\n    if (!user) {\n      throw new NotFoundException('User not found');\n    }\n    return user;\n  }\n\n  @Get('/:userid')\n  async getUserByUserid(@Param('userid') userid: string): Promise {\n    const user = await this.userService.getUserByUserId(userid);\n\n    if (!user) {\n      throw new NotFoundException('User not found');\n    }\n\n    return user;\n  }\n\n  @Post('/')\n  async createNewUser(\n    @Body() createUserRequest: UserCreateRequestBody,\n  ): Promise {\n    const user = await this.userService.createUser(\n      createUserRequest,\n      createUserRequest.password,\n    );\n    return user;\n  }\n\n  @ApiBearerAuth()\n  @UseGuards(RequiredAuthGuard)\n  @Patch('/:userid')\n  async updateUserDetails(\n    @User() authdUser: UserEntity,\n    @Param('userid') userid: string,\n    @Body() updateUserRequest: UserUpdateRequestBody,\n  ): Promise {\n    if (authdUser.id !== userid) {\n      throw new ForbiddenException('You can only update your own user details');\n    }\n    const user = await this.userService.updateUser(userid, updateUserRequest);\n    return user;\n  }\n\n  @ApiBearerAuth()\n  @UseGuards(RequiredAuthGuard)\n  @Put('/:userid/follow')\n  async followUser(\n    @User() follower: UserEntity,\n    @Param('userid') followeeId: string,\n  ): Promise {\n    const followedUser = await this.userService.createUserFollowRelation(\n      follower,\n      followeeId,\n    );\n    return followedUser;\n  }\n\n  @ApiBearerAuth()\n  @UseGuards(RequiredAuthGuard)\n  @Delete('/:userid/follow')\n  async unfollowUser(\n    @User() follower: UserEntity,\n    @Param('userid') followeeId: string,\n  ): Promise {\n    const unfollowedUser = await this.userService.deleteUserFollowRelation(\n      follower,\n      followeeId,\n    );\n    return unfollowedUser;\n  }\n\n  @ApiBearerAuth()\n  @UseGuards(RequiredAuthGuard)\n  @Get('/:userid/followers')\n  async getFollowersOfUser(): Promise {\n    return [];\n  }\n\n  @ApiBearerAuth()\n  @UseGuards(RequiredAuthGuard)\n  @Put('/:userid/followees')\n  async getFolloweesOfUser(): Promise {\n    return [];\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nUsersService\n\nUsersService\n\n\n\nUsersModule\n\nUsersModule\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { PasswordEntity } from 'src/auth/passwords.entity';\nimport { UserFollowingEntity } from './user-followings.entity';\nimport { UsersController } from './users.controller';\nimport { UserEntity } from './users.entity';\nimport { UsersService } from './users.service';\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([UserEntity, PasswordEntity, UserFollowingEntity]),\n  ],\n  controllers: [UsersController],\n  providers: [UsersService],\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UsersRepository.html":{"url":"classes/UsersRepository.html","title":"class - UsersRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UsersRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.repository.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    Repository\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { EntityRepository, Repository } from 'typeorm';\nimport { UserEntity } from './users.entity';\n\n@EntityRepository(UserEntity)\nexport class UsersRepository extends Repository {}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createUser\n                            \n                            \n                                    Public\n                                    Async\n                                createUserFollowRelation\n                            \n                            \n                                    Public\n                                    Async\n                                deleteUserFollowRelation\n                            \n                            \n                                    Public\n                                    Async\n                                getUserByUserId\n                            \n                            \n                                    Public\n                                    Async\n                                getUserByUsername\n                            \n                            \n                                    Public\n                                    Async\n                                updateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepo: UsersRepository, authService: AuthService, userFollowRepo: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/users/users.service.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepo\n                                                  \n                                                        \n                                                                        UsersRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userFollowRepo\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        createUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    createUser(user: Partial, password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        user if created\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        createUserFollowRelation\n                        \n                    \n                \n            \n            \n                \n                    \n                    createUserFollowRelation(follower: UserEntity, followeeId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:92\n                \n            \n\n\n            \n                \n                    create a user-user follow pairing\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    follower\n                                    \n                                                UserEntity\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    followeeId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        deleteUserFollowRelation\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteUserFollowRelation(follower: UserEntity, followeeId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:110\n                \n            \n\n\n            \n                \n                    delete a user-user follow pairing\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    follower\n                                    \n                                                UserEntity\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    followeeId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        getUserByUserId\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUserByUserId(userId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        user if found\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        getUserByUsername\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUserByUsername(username: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        user if found\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        updateUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateUser(userId: string, newUserDetails: Partial)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:72\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    newUserDetails\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        user if updated\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  ConflictException,\n  Injectable,\n  NotFoundException,\n} from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { AuthService } from 'src/auth/auth.service';\nimport { Repository } from 'typeorm';\nimport { UserFollowingEntity } from './user-followings.entity';\nimport { UserEntity } from './users.entity';\nimport { UsersRepository } from './users.repository';\n\n@Injectable()\nexport class UsersService {\n  constructor(\n    @InjectRepository(UserEntity) private userRepo: UsersRepository,\n    private authService: AuthService,\n    @InjectRepository(UserFollowingEntity)\n    private userFollowRepo: Repository,\n  ) {}\n  /**\n   * @description find a user with a given username\n   * @returns {Promise} user if found\n   */\n  public async getUserByUsername(username: string): Promise {\n    return await this.userRepo.findOne({ where: { username } });\n  }\n\n  /**\n   * @description find a user with a given userid\n   * @returns {Promise} user if found\n   */\n  public async getUserByUserId(userId: string): Promise {\n    return await this.userRepo.findOne({ where: { id: userId } });\n  }\n\n  /**\n   * @description create new user with given details\n   * @returns {Promise} user if created\n   */\n  public async createUser(\n    user: Partial,\n    password: string,\n  ): Promise {\n    if (user.username.length } user if updated\n   */\n  public async updateUser(\n    userId: string,\n    newUserDetails: Partial,\n  ): Promise {\n    const existingUser = await this.userRepo.findOne({\n      where: { id: userId },\n    });\n    if (!existingUser) {\n      return null;\n    }\n    if (newUserDetails.bio) existingUser.bio = newUserDetails.bio;\n    if (newUserDetails.avatar) existingUser.avatar = newUserDetails.avatar;\n    if (newUserDetails.name) existingUser.name = newUserDetails.name;\n\n    return await this.userRepo.save(existingUser);\n  }\n\n  /**\n   * create a user-user follow pairing\n   */\n  public async createUserFollowRelation(\n    follower: UserEntity,\n    followeeId: string,\n  ) {\n    const followee = await this.getUserByUserId(followeeId);\n    if (!followee) {\n      throw new NotFoundException('User not found');\n    }\n    const newFollow = await this.userFollowRepo.save({\n      follower,\n      followee,\n    });\n    return newFollow.followee;\n  }\n\n  /**\n   * delete a user-user follow pairing\n   */\n  public async deleteUserFollowRelation(\n    follower: UserEntity,\n    followeeId: string,\n  ) {\n    const followee = await this.getUserByUserId(followeeId);\n    if (!followee) {\n      throw new NotFoundException('User not found');\n    }\n    const follow = await this.userFollowRepo.findOne({\n      where: { follower, followee },\n    });\n    if (follow) {\n      await this.userFollowRepo.delete(follow.id);\n      // TODO: future: show show that I do not follow them anymore in the response\n      return followee;\n    } else {\n      throw new NotFoundException('No follow relationship found');\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/YooBaseEntity.html":{"url":"classes/YooBaseEntity.html","title":"class - YooBaseEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  YooBaseEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/commons/base.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Base entity which is extended by all entities in our application.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                createdAt\n                            \n                            \n                                id\n                            \n                            \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn({name: 'created_at'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/commons/base.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/commons/base.entity.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn({name: 'updated_at'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/commons/base.entity.ts:18\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  CreateDateColumn,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from 'typeorm';\n\n/**\n * Base entity which is extended by all entities in our application.\n */\nexport abstract class YooBaseEntity {\n  @PrimaryGeneratedColumn('uuid')\n  id: string;\n\n  @CreateDateColumn({ name: 'created_at' })\n  createdAt: Date;\n\n  @UpdateDateColumn({ name: 'updated_at' })\n  updatedAt: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            class\n            LoginRequestBody\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            class\n            LoginResponseBody\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/auth.decorator.ts\n            \n            variable\n            User\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/auth.guard.ts\n            \n            class\n            TokenAuthorizer\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/auth.guard.ts\n            \n            guard\n            OptionalAuthGuard\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.guard.ts\n            \n            guard\n            RequiredAuthGuard\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/auth/passwords.entity.ts\n            \n            class\n            PasswordEntity\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/auth/sessions.entity.ts\n            \n            class\n            SessionsEntity\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/commons/base.entity.ts\n            \n            class\n            YooBaseEntity\n            \n                25 %\n                (1/4)\n            \n        \n        \n            \n                \n                src/commons/mocks/likes.repository.mock.ts\n            \n            class\n            MockLikesRepository\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/commons/mocks/mock.providers.ts\n            \n            variable\n            MockLikesRepositoryProvider\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/commons/mocks/mock.providers.ts\n            \n            variable\n            MockPasswordRepositoryProvider\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/commons/mocks/mock.providers.ts\n            \n            variable\n            MockPostsRepositoryProvider\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/commons/mocks/mock.providers.ts\n            \n            variable\n            MockSessionRepositoryProvider\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/commons/mocks/mock.providers.ts\n            \n            variable\n            MockUserFollowingsRepositoryProvider\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/commons/mocks/mock.providers.ts\n            \n            variable\n            MockUsersRepositoryProvider\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/commons/mocks/posts.repository.mock.ts\n            \n            class\n            MockPostsRepository\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/commons/mocks/users.repository.mock.ts\n            \n            class\n            MockUsersRepository\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/hashtags/hashtags.controller.ts\n            \n            controller\n            HashtagsController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/likes/likes.controller.ts\n            \n            controller\n            LikesController\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/likes/likes.entity.ts\n            \n            class\n            LikesEntity\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/likes/likes.repository.ts\n            \n            class\n            LikesRepository\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/likes/likes.service.ts\n            \n            injectable\n            LikesService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/posts/posts.controller.ts\n            \n            controller\n            PostsController\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/posts/posts.controller.ts\n            \n            class\n            PostCreateRequestBody\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/posts/posts.controller.ts\n            \n            class\n            PostDetailsQueryParams\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/posts/posts.entity.ts\n            \n            class\n            Mention\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/posts/posts.entity.ts\n            \n            class\n            PostEntity\n            \n                0 %\n                (0/13)\n            \n        \n        \n            \n                \n                src/posts/posts.repository.ts\n            \n            class\n            PostsRepository\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/posts/posts.service.ts\n            \n            injectable\n            PostsService\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/users/user-followings.entity.ts\n            \n            class\n            UserFollowingEntity\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/users/users.controller.ts\n            \n            class\n            UserCreateRequestBody\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/users/users.controller.ts\n            \n            class\n            UserUpdateRequestBody\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/users/users.entity.ts\n            \n            class\n            UserEntity\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/users/users.repository.ts\n            \n            class\n            UsersRepository\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/users.service.ts\n            \n            injectable\n            UsersService\n            \n                25 %\n                (2/8)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^8.2.3\n        \n            @nestjs/core : ^8.2.3\n        \n            @nestjs/platform-fastify : ^8.2.3\n        \n            @nestjs/swagger : ^5.1.5\n        \n            @nestjs/typeorm : ^8.0.2\n        \n            bcrypt : ^5.0.1\n        \n            fastify-compress : ^3.6.0\n        \n            fastify-swagger : ^4.8.0\n        \n            mysql2 : ^3.14.1\n        \n            pg : ^8.6.0\n        \n            pg-hstore : ^2.3.4\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^7.4.0\n        \n            typeorm : ^0.2.34\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nYoo - A Twitter Clone\nBackend API for Yoo using Nest framework (NodeJS + TypeScript + PostgreSQL)\n\n\n\nAbout\nIdea\nYoo is a parody of Twitter. Further information about features and DB schema requirements can be found on this discussion board :\nhttps://github.com/scaleracademy/open-source-projects/discussions/81\nUI Design\nThe UI is being designed on Figma if you'd like to view\n\nFigma UI Prototype\nFigma Discussion Jam Board\n\nTutorials\nIf you'd like to see how the initial project was built please watch the following YouTube video\n\n\n\n▶️ Building Twitter Clone from Scratch | End-to-End Coding Project\n\nInstallation\n$ npm installRunning the app\n# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodTest\n# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covSetup Database\ncreate database yoodb;\ncreate user yooadmin with password 'yoopass';\ngrant all privileges on database yoodb to yooadmin;Progress\n\nauth\n\n POST /auth/login\n\n\nusers\n\n GET /users 📃\n GET /users/@{username}\n GET /users/{userid}\n POST /users\n PATCH /users/{userid} 🔒\n PUT /users/{userid}/follow 🔒\n DELETE /users/{userid}/follow 🔒\n GET /users/{userid}/followers 📃\n GET /users/{userid}/followees 📃\n\n\nposts\n\n GET /posts 📃\n filter by author\n filter by replyTo\n filter by origPosts\n full-text-search on post content\n\n\n GET /posts/{postid}\n POST /posts 🔒\n simple posts\n reply to a post\n repost / quote post\n #hashtags\n @mentions\n\n\n DELETE /posts/{postid} 🔒\n PUT /posts/{postid}/like 🔒\n DELETE /posts/{postid}/like 🔒\n\n\nhashtags\n\n GET /hashtags 📃\n GET /hashtags/{tag}/posts 📃\n\n\n\nLicense\nThis project is under the GNU AGPL v3.0 license\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nGNU Affero General Public License\nVersion 3, 19 November 2007\nCopyright © 2007 Free Software Foundation, Inc. http://fsf.org/>\nEveryone is permitted to copy and distribute verbatim copies\nof this license document, but changing it is not allowed.\nPreamble\nThe GNU Affero General Public License is a free, copyleft license for\nsoftware and other kinds of works, specifically designed to ensure\ncooperation with the community in the case of network server software.\nThe licenses for most software and other practical works are designed\nto take away your freedom to share and change the works.  By contrast,\nour General Public Licenses are intended to guarantee your freedom to\nshare and change all versions of a program--to make sure it remains free\nsoftware for all its users.\nWhen we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthem if you wish), that you receive source code or can get it if you\nwant it, that you can change the software or use pieces of it in new\nfree programs, and that you know you can do these things.\nDevelopers that use our General Public Licenses protect your rights\nwith two steps: (1) assert copyright on the software, and (2) offer\nyou this License which gives you legal permission to copy, distribute\nand/or modify the software.\nA secondary benefit of defending all users' freedom is that\nimprovements made in alternate versions of the program, if they\nreceive widespread use, become available for other developers to\nincorporate.  Many developers of free software are heartened and\nencouraged by the resulting cooperation.  However, in the case of\nsoftware used on network servers, this result may fail to come about.\nThe GNU General Public License permits making a modified version and\nletting the public access it on a server without ever releasing its\nsource code to the public.\nThe GNU Affero General Public License is designed specifically to\nensure that, in such cases, the modified source code becomes available\nto the community.  It requires the operator of a network server to\nprovide the source code of the modified version running there to the\nusers of that server.  Therefore, public use of a modified version, on\na publicly accessible server, gives the public access to the source\ncode of the modified version.\nAn older license, called the Affero General Public License and\npublished by Affero, was designed to accomplish similar goals.  This is\na different license, not a version of the Affero GPL, but Affero has\nreleased a new version of the Affero GPL which permits relicensing under\nthis license.\nThe precise terms and conditions for copying, distribution and\nmodification follow.\nTERMS AND CONDITIONS\n0. Definitions\n“This License” refers to version 3 of the GNU Affero General Public License.\n“Copyright” also means copyright-like laws that apply to other kinds of\nworks, such as semiconductor masks.\n“The Program” refers to any copyrightable work licensed under this\nLicense.  Each licensee is addressed as “you”.  “Licensees” and\n“recipients” may be individuals or organizations.\nTo “modify” a work means to copy from or adapt all or part of the work\nin a fashion requiring copyright permission, other than the making of an\nexact copy.  The resulting work is called a “modified version” of the\nearlier work or a work “based on” the earlier work.\nA “covered work” means either the unmodified Program or a work based\non the Program.\nTo “propagate” a work means to do anything with it that, without\npermission, would make you directly or secondarily liable for\ninfringement under applicable copyright law, except executing it on a\ncomputer or modifying a private copy.  Propagation includes copying,\ndistribution (with or without modification), making available to the\npublic, and in some countries other activities as well.\nTo “convey” a work means any kind of propagation that enables other\nparties to make or receive copies.  Mere interaction with a user through\na computer network, with no transfer of a copy, is not conveying.\nAn interactive user interface displays “Appropriate Legal Notices”\nto the extent that it includes a convenient and prominently visible\nfeature that (1) displays an appropriate copyright notice, and (2)\ntells the user that there is no warranty for the work (except to the\nextent that warranties are provided), that licensees may convey the\nwork under this License, and how to view a copy of this License.  If\nthe interface presents a list of user commands or options, such as a\nmenu, a prominent item in the list meets this criterion.\n1. Source Code\nThe “source code” for a work means the preferred form of the work\nfor making modifications to it.  “Object code” means any non-source\nform of a work.\nA “Standard Interface” means an interface that either is an official\nstandard defined by a recognized standards body, or, in the case of\ninterfaces specified for a particular programming language, one that\nis widely used among developers working in that language.\nThe “System Libraries” of an executable work include anything, other\nthan the work as a whole, that (a) is included in the normal form of\npackaging a Major Component, but which is not part of that Major\nComponent, and (b) serves only to enable use of the work with that\nMajor Component, or to implement a Standard Interface for which an\nimplementation is available to the public in source code form.  A\n“Major Component”, in this context, means a major essential component\n(kernel, window system, and so on) of the specific operating system\n(if any) on which the executable work runs, or a compiler used to\nproduce the work, or an object code interpreter used to run it.\nThe “Corresponding Source” for a work in object code form means all\nthe source code needed to generate, install, and (for an executable\nwork) run the object code and to modify the work, including scripts to\ncontrol those activities.  However, it does not include the work's\nSystem Libraries, or general-purpose tools or generally available free\nprograms which are used unmodified in performing those activities but\nwhich are not part of the work.  For example, Corresponding Source\nincludes interface definition files associated with source files for\nthe work, and the source code for shared libraries and dynamically\nlinked subprograms that the work is specifically designed to require,\nsuch as by intimate data communication or control flow between those\nsubprograms and other parts of the work.\nThe Corresponding Source need not include anything that users\ncan regenerate automatically from other parts of the Corresponding\nSource.\nThe Corresponding Source for a work in source code form is that\nsame work.\n2. Basic Permissions\nAll rights granted under this License are granted for the term of\ncopyright on the Program, and are irrevocable provided the stated\nconditions are met.  This License explicitly affirms your unlimited\npermission to run the unmodified Program.  The output from running a\ncovered work is covered by this License only if the output, given its\ncontent, constitutes a covered work.  This License acknowledges your\nrights of fair use or other equivalent, as provided by copyright law.\nYou may make, run and propagate covered works that you do not\nconvey, without conditions so long as your license otherwise remains\nin force.  You may convey covered works to others for the sole purpose\nof having them make modifications exclusively for you, or provide you\nwith facilities for running those works, provided that you comply with\nthe terms of this License in conveying all material for which you do\nnot control copyright.  Those thus making or running the covered works\nfor you must do so exclusively on your behalf, under your direction\nand control, on terms that prohibit them from making any copies of\nyour copyrighted material outside their relationship with you.\nConveying under any other circumstances is permitted solely under\nthe conditions stated below.  Sublicensing is not allowed; section 10\nmakes it unnecessary.\n3. Protecting Users' Legal Rights From Anti-Circumvention Law\nNo covered work shall be deemed part of an effective technological\nmeasure under any applicable law fulfilling obligations under article\n11 of the WIPO copyright treaty adopted on 20 December 1996, or\nsimilar laws prohibiting or restricting circumvention of such\nmeasures.\nWhen you convey a covered work, you waive any legal power to forbid\ncircumvention of technological measures to the extent such circumvention\nis effected by exercising rights under this License with respect to\nthe covered work, and you disclaim any intention to limit operation or\nmodification of the work as a means of enforcing, against the work's\nusers, your or third parties' legal rights to forbid circumvention of\ntechnological measures.\n4. Conveying Verbatim Copies\nYou may convey verbatim copies of the Program's source code as you\nreceive it, in any medium, provided that you conspicuously and\nappropriately publish on each copy an appropriate copyright notice;\nkeep intact all notices stating that this License and any\nnon-permissive terms added in accord with section 7 apply to the code;\nkeep intact all notices of the absence of any warranty; and give all\nrecipients a copy of this License along with the Program.\nYou may charge any price or no price for each copy that you convey,\nand you may offer support or warranty protection for a fee.\n5. Conveying Modified Source Versions\nYou may convey a work based on the Program, or the modifications to\nproduce it from the Program, in the form of source code under the\nterms of section 4, provided that you also meet all of these conditions:\n\na) The work must carry prominent notices stating that you modified\nit, and giving a relevant date.\nb) The work must carry prominent notices stating that it is\nreleased under this License and any conditions added under section 7.\nThis requirement modifies the requirement in section 4 to\n“keep intact all notices”.\nc) You must license the entire work, as a whole, under this\nLicense to anyone who comes into possession of a copy.  This\nLicense will therefore apply, along with any applicable section 7\nadditional terms, to the whole of the work, and all its parts,\nregardless of how they are packaged.  This License gives no\npermission to license the work in any other way, but it does not\ninvalidate such permission if you have separately received it.\nd) If the work has interactive user interfaces, each must display\nAppropriate Legal Notices; however, if the Program has interactive\ninterfaces that do not display Appropriate Legal Notices, your\nwork need not make them do so.\n\nA compilation of a covered work with other separate and independent\nworks, which are not by their nature extensions of the covered work,\nand which are not combined with it such as to form a larger program,\nin or on a volume of a storage or distribution medium, is called an\n“aggregate” if the compilation and its resulting copyright are not\nused to limit the access or legal rights of the compilation's users\nbeyond what the individual works permit.  Inclusion of a covered work\nin an aggregate does not cause this License to apply to the other\nparts of the aggregate.\n6. Conveying Non-Source Forms\nYou may convey a covered work in object code form under the terms\nof sections 4 and 5, provided that you also convey the\nmachine-readable Corresponding Source under the terms of this License,\nin one of these ways:\n\na) Convey the object code in, or embodied in, a physical product\n(including a physical distribution medium), accompanied by the\nCorresponding Source fixed on a durable physical medium\ncustomarily used for software interchange.\nb) Convey the object code in, or embodied in, a physical product\n(including a physical distribution medium), accompanied by a\nwritten offer, valid for at least three years and valid for as\nlong as you offer spare parts or customer support for that product\nmodel, to give anyone who possesses the object code either (1) a\ncopy of the Corresponding Source for all the software in the\nproduct that is covered by this License, on a durable physical\nmedium customarily used for software interchange, for a price no\nmore than your reasonable cost of physically performing this\nconveying of source, or (2) access to copy the\nCorresponding Source from a network server at no charge.\nc) Convey individual copies of the object code with a copy of the\nwritten offer to provide the Corresponding Source.  This\nalternative is allowed only occasionally and noncommercially, and\nonly if you received the object code with such an offer, in accord\nwith subsection 6b.\nd) Convey the object code by offering access from a designated\nplace (gratis or for a charge), and offer equivalent access to the\nCorresponding Source in the same way through the same place at no\nfurther charge.  You need not require recipients to copy the\nCorresponding Source along with the object code.  If the place to\ncopy the object code is a network server, the Corresponding Source\nmay be on a different server (operated by you or a third party)\nthat supports equivalent copying facilities, provided you maintain\nclear directions next to the object code saying where to find the\nCorresponding Source.  Regardless of what server hosts the\nCorresponding Source, you remain obligated to ensure that it is\navailable for as long as needed to satisfy these requirements.\ne) Convey the object code using peer-to-peer transmission, provided\nyou inform other peers where the object code and Corresponding\nSource of the work are being offered to the general public at no\ncharge under subsection 6d.\n\nA separable portion of the object code, whose source code is excluded\nfrom the Corresponding Source as a System Library, need not be\nincluded in conveying the object code work.\nA “User Product” is either (1) a “consumer product”, which means any\ntangible personal property which is normally used for personal, family,\nor household purposes, or (2) anything designed or sold for incorporation\ninto a dwelling.  In determining whether a product is a consumer product,\ndoubtful cases shall be resolved in favor of coverage.  For a particular\nproduct received by a particular user, “normally used” refers to a\ntypical or common use of that class of product, regardless of the status\nof the particular user or of the way in which the particular user\nactually uses, or expects or is expected to use, the product.  A product\nis a consumer product regardless of whether the product has substantial\ncommercial, industrial or non-consumer uses, unless such uses represent\nthe only significant mode of use of the product.\n“Installation Information” for a User Product means any methods,\nprocedures, authorization keys, or other information required to install\nand execute modified versions of a covered work in that User Product from\na modified version of its Corresponding Source.  The information must\nsuffice to ensure that the continued functioning of the modified object\ncode is in no case prevented or interfered with solely because\nmodification has been made.\nIf you convey an object code work under this section in, or with, or\nspecifically for use in, a User Product, and the conveying occurs as\npart of a transaction in which the right of possession and use of the\nUser Product is transferred to the recipient in perpetuity or for a\nfixed term (regardless of how the transaction is characterized), the\nCorresponding Source conveyed under this section must be accompanied\nby the Installation Information.  But this requirement does not apply\nif neither you nor any third party retains the ability to install\nmodified object code on the User Product (for example, the work has\nbeen installed in ROM).\nThe requirement to provide Installation Information does not include a\nrequirement to continue to provide support service, warranty, or updates\nfor a work that has been modified or installed by the recipient, or for\nthe User Product in which it has been modified or installed.  Access to a\nnetwork may be denied when the modification itself materially and\nadversely affects the operation of the network or violates the rules and\nprotocols for communication across the network.\nCorresponding Source conveyed, and Installation Information provided,\nin accord with this section must be in a format that is publicly\ndocumented (and with an implementation available to the public in\nsource code form), and must require no special password or key for\nunpacking, reading or copying.\n7. Additional Terms\n“Additional permissions” are terms that supplement the terms of this\nLicense by making exceptions from one or more of its conditions.\nAdditional permissions that are applicable to the entire Program shall\nbe treated as though they were included in this License, to the extent\nthat they are valid under applicable law.  If additional permissions\napply only to part of the Program, that part may be used separately\nunder those permissions, but the entire Program remains governed by\nthis License without regard to the additional permissions.\nWhen you convey a copy of a covered work, you may at your option\nremove any additional permissions from that copy, or from any part of\nit.  (Additional permissions may be written to require their own\nremoval in certain cases when you modify the work.)  You may place\nadditional permissions on material, added by you to a covered work,\nfor which you have or can give appropriate copyright permission.\nNotwithstanding any other provision of this License, for material you\nadd to a covered work, you may (if authorized by the copyright holders of\nthat material) supplement the terms of this License with terms:\n\na) Disclaiming warranty or limiting liability differently from the\nterms of sections 15 and 16 of this License; or\nb) Requiring preservation of specified reasonable legal notices or\nauthor attributions in that material or in the Appropriate Legal\nNotices displayed by works containing it; or\nc) Prohibiting misrepresentation of the origin of that material, or\nrequiring that modified versions of such material be marked in\nreasonable ways as different from the original version; or\nd) Limiting the use for publicity purposes of names of licensors or\nauthors of the material; or\ne) Declining to grant rights under trademark law for use of some\ntrade names, trademarks, or service marks; or\nf) Requiring indemnification of licensors and authors of that\nmaterial by anyone who conveys the material (or modified versions of\nit) with contractual assumptions of liability to the recipient, for\nany liability that these contractual assumptions directly impose on\nthose licensors and authors.\n\nAll other non-permissive additional terms are considered “further\nrestrictions” within the meaning of section 10.  If the Program as you\nreceived it, or any part of it, contains a notice stating that it is\ngoverned by this License along with a term that is a further\nrestriction, you may remove that term.  If a license document contains\na further restriction but permits relicensing or conveying under this\nLicense, you may add to a covered work material governed by the terms\nof that license document, provided that the further restriction does\nnot survive such relicensing or conveying.\nIf you add terms to a covered work in accord with this section, you\nmust place, in the relevant source files, a statement of the\nadditional terms that apply to those files, or a notice indicating\nwhere to find the applicable terms.\nAdditional terms, permissive or non-permissive, may be stated in the\nform of a separately written license, or stated as exceptions;\nthe above requirements apply either way.\n8. Termination\nYou may not propagate or modify a covered work except as expressly\nprovided under this License.  Any attempt otherwise to propagate or\nmodify it is void, and will automatically terminate your rights under\nthis License (including any patent licenses granted under the third\nparagraph of section 11).\nHowever, if you cease all violation of this License, then your\nlicense from a particular copyright holder is reinstated (a)\nprovisionally, unless and until the copyright holder explicitly and\nfinally terminates your license, and (b) permanently, if the copyright\nholder fails to notify you of the violation by some reasonable means\nprior to 60 days after the cessation.\nMoreover, your license from a particular copyright holder is\nreinstated permanently if the copyright holder notifies you of the\nviolation by some reasonable means, this is the first time you have\nreceived notice of violation of this License (for any work) from that\ncopyright holder, and you cure the violation prior to 30 days after\nyour receipt of the notice.\nTermination of your rights under this section does not terminate the\nlicenses of parties who have received copies or rights from you under\nthis License.  If your rights have been terminated and not permanently\nreinstated, you do not qualify to receive new licenses for the same\nmaterial under section 10.\n9. Acceptance Not Required for Having Copies\nYou are not required to accept this License in order to receive or\nrun a copy of the Program.  Ancillary propagation of a covered work\noccurring solely as a consequence of using peer-to-peer transmission\nto receive a copy likewise does not require acceptance.  However,\nnothing other than this License grants you permission to propagate or\nmodify any covered work.  These actions infringe copyright if you do\nnot accept this License.  Therefore, by modifying or propagating a\ncovered work, you indicate your acceptance of this License to do so.\n10. Automatic Licensing of Downstream Recipients\nEach time you convey a covered work, the recipient automatically\nreceives a license from the original licensors, to run, modify and\npropagate that work, subject to this License.  You are not responsible\nfor enforcing compliance by third parties with this License.\nAn “entity transaction” is a transaction transferring control of an\norganization, or substantially all assets of one, or subdividing an\norganization, or merging organizations.  If propagation of a covered\nwork results from an entity transaction, each party to that\ntransaction who receives a copy of the work also receives whatever\nlicenses to the work the party's predecessor in interest had or could\ngive under the previous paragraph, plus a right to possession of the\nCorresponding Source of the work from the predecessor in interest, if\nthe predecessor has it or can get it with reasonable efforts.\nYou may not impose any further restrictions on the exercise of the\nrights granted or affirmed under this License.  For example, you may\nnot impose a license fee, royalty, or other charge for exercise of\nrights granted under this License, and you may not initiate litigation\n(including a cross-claim or counterclaim in a lawsuit) alleging that\nany patent claim is infringed by making, using, selling, offering for\nsale, or importing the Program or any portion of it.\n11. Patents\nA “contributor” is a copyright holder who authorizes use under this\nLicense of the Program or a work on which the Program is based.  The\nwork thus licensed is called the contributor's “contributor version”.\nA contributor's “essential patent claims” are all patent claims\nowned or controlled by the contributor, whether already acquired or\nhereafter acquired, that would be infringed by some manner, permitted\nby this License, of making, using, or selling its contributor version,\nbut do not include claims that would be infringed only as a\nconsequence of further modification of the contributor version.  For\npurposes of this definition, “control” includes the right to grant\npatent sublicenses in a manner consistent with the requirements of\nthis License.\nEach contributor grants you a non-exclusive, worldwide, royalty-free\npatent license under the contributor's essential patent claims, to\nmake, use, sell, offer for sale, import and otherwise run, modify and\npropagate the contents of its contributor version.\nIn the following three paragraphs, a “patent license” is any express\nagreement or commitment, however denominated, not to enforce a patent\n(such as an express permission to practice a patent or covenant not to\nsue for patent infringement).  To “grant” such a patent license to a\nparty means to make such an agreement or commitment not to enforce a\npatent against the party.\nIf you convey a covered work, knowingly relying on a patent license,\nand the Corresponding Source of the work is not available for anyone\nto copy, free of charge and under the terms of this License, through a\npublicly available network server or other readily accessible means,\nthen you must either (1) cause the Corresponding Source to be so\navailable, or (2) arrange to deprive yourself of the benefit of the\npatent license for this particular work, or (3) arrange, in a manner\nconsistent with the requirements of this License, to extend the patent\nlicense to downstream recipients.  “Knowingly relying” means you have\nactual knowledge that, but for the patent license, your conveying the\ncovered work in a country, or your recipient's use of the covered work\nin a country, would infringe one or more identifiable patents in that\ncountry that you have reason to believe are valid.\nIf, pursuant to or in connection with a single transaction or\narrangement, you convey, or propagate by procuring conveyance of, a\ncovered work, and grant a patent license to some of the parties\nreceiving the covered work authorizing them to use, propagate, modify\nor convey a specific copy of the covered work, then the patent license\nyou grant is automatically extended to all recipients of the covered\nwork and works based on it.\nA patent license is “discriminatory” if it does not include within\nthe scope of its coverage, prohibits the exercise of, or is\nconditioned on the non-exercise of one or more of the rights that are\nspecifically granted under this License.  You may not convey a covered\nwork if you are a party to an arrangement with a third party that is\nin the business of distributing software, under which you make payment\nto the third party based on the extent of your activity of conveying\nthe work, and under which the third party grants, to any of the\nparties who would receive the covered work from you, a discriminatory\npatent license (a) in connection with copies of the covered work\nconveyed by you (or copies made from those copies), or (b) primarily\nfor and in connection with specific products or compilations that\ncontain the covered work, unless you entered into that arrangement,\nor that patent license was granted, prior to 28 March 2007.\nNothing in this License shall be construed as excluding or limiting\nany implied license or other defenses to infringement that may\notherwise be available to you under applicable patent law.\n12. No Surrender of Others' Freedom\nIf conditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot convey a\ncovered work so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you may\nnot convey it at all.  For example, if you agree to terms that obligate you\nto collect a royalty for further conveying from those to whom you convey\nthe Program, the only way you could satisfy both those terms and this\nLicense would be to refrain entirely from conveying the Program.\n13. Remote Network Interaction; Use with the GNU General Public License\nNotwithstanding any other provision of this License, if you modify the\nProgram, your modified version must prominently offer all users\ninteracting with it remotely through a computer network (if your version\nsupports such interaction) an opportunity to receive the Corresponding\nSource of your version by providing access to the Corresponding Source\nfrom a network server at no charge, through some standard or customary\nmeans of facilitating copying of software.  This Corresponding Source\nshall include the Corresponding Source for any work covered by version 3\nof the GNU General Public License that is incorporated pursuant to the\nfollowing paragraph.\nNotwithstanding any other provision of this License, you have\npermission to link or combine any covered work with a work licensed\nunder version 3 of the GNU General Public License into a single\ncombined work, and to convey the resulting work.  The terms of this\nLicense will continue to apply to the part which is the covered work,\nbut the work with which it is combined will remain governed by version\n3 of the GNU General Public License.\n14. Revised Versions of this License\nThe Free Software Foundation may publish revised and/or new versions of\nthe GNU Affero General Public License from time to time.  Such new versions\nwill be similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\nEach version is given a distinguishing version number.  If the\nProgram specifies that a certain numbered version of the GNU Affero General\nPublic License “or any later version” applies to it, you have the\noption of following the terms and conditions either of that numbered\nversion or of any later version published by the Free Software\nFoundation.  If the Program does not specify a version number of the\nGNU Affero General Public License, you may choose any version ever published\nby the Free Software Foundation.\nIf the Program specifies that a proxy can decide which future\nversions of the GNU Affero General Public License can be used, that proxy's\npublic statement of acceptance of a version permanently authorizes you\nto choose that version for the Program.\nLater license versions may give you additional or different\npermissions.  However, no additional obligations are imposed on any\nauthor or copyright holder as a result of your choosing to follow a\nlater version.\n15. Disclaimer of Warranty\nTHERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY\nAPPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT\nHOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM “AS IS” WITHOUT WARRANTY\nOF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,\nTHE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\nPURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM\nIS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF\nALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n16. Limitation of Liability\nIN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS\nTHE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY\nGENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE\nUSE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF\nDATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD\nPARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),\nEVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGES.\n17. Interpretation of Sections 15 and 16\nIf the disclaimer of warranty and limitation of liability provided\nabove cannot be given local legal effect according to their terms,\nreviewing courts shall apply local law that most closely approximates\nan absolute waiver of all civil liability in connection with the\nProgram, unless a warranty or assumption of liability accompanies a\ncopy of the Program in return for a fee.\nEND OF TERMS AND CONDITIONS\nHow to Apply These Terms to Your New Programs\nIf you develop a new program, and you want it to be of the greatest\npossible use to the public, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these terms.\nTo do so, attach the following notices to the program.  It is safest\nto attach them to the start of each source file to most effectively\nstate the exclusion of warranty; and each file should have at least\nthe “copyright” line and a pointer to where the full notice is found.\n\nCopyright (C)   \n\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU Affero General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Affero General Public License for more details.\n\nYou should have received a copy of the GNU Affero General Public License\nalong with this program.  If not, see .Also add information on how to contact you by electronic and paper mail.\nIf your software can interact with users remotely through a computer\nnetwork, you should also make sure that it provides a way for users to\nget its source.  For example, if your program is a web application, its\ninterface could display a “Source” link that leads users to an archive\nof the code.  There are many ways you could offer source, and different\nsolutions will be better for different programs; see section 13 for the\nspecific requirements.\nYou should also get your employer (if you work as a programmer) or school,\nif any, to sign a “copyright disclaimer” for the program, if necessary.\nFor more information on this, and how to apply and follow the GNU AGPL, see\nhttp://www.gnu.org/licenses/>.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        ApiModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        HashtagsModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        LikesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        MockLikesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        MockPostsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PostsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ProdDbModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        TestDbModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_ApiModule\n\n\n\ncluster_ApiModule_imports\n\n\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_LikesModule\n\n\n\ncluster_LikesModule_exports\n\n\n\ncluster_LikesModule_providers\n\n\n\ncluster_MockLikesModule\n\n\n\ncluster_MockPostsModule\n\n\n\ncluster_MockPostsModule_exports\n\n\n\ncluster_PostsModule\n\n\n\ncluster_PostsModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nApiModule\n\nApiModule\n\nApiModule -->\n\nAuthModule->ApiModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nHashtagsModule\n\nHashtagsModule\n\nApiModule -->\n\nHashtagsModule->ApiModule\n\n\n\n\n\nLikesModule\n\nLikesModule\n\n\n\nPostsModule\n\nPostsModule\n\nPostsModule -->\n\nLikesModule->PostsModule\n\n\n\nApiModule -->\n\nLikesModule->ApiModule\n\n\n\n\n\nLikesService \n\nLikesService \n\nLikesService  -->\n\nLikesModule->LikesService \n\n\n\nApiModule -->\n\nPostsModule->ApiModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nApiModule -->\n\nUsersModule->ApiModule\n\n\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nApiModule->AppModule\n\n\n\n\n\nProdDbModule\n\nProdDbModule\n\nAppModule -->\n\nProdDbModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nMockPostsModule\n\nMockPostsModule\n\nMockPostsModule -->\n\nAuthService->MockPostsModule\n\n\n\n\n\nLikesService\n\nLikesService\n\nLikesModule -->\n\nLikesService->LikesModule\n\n\n\n\n\nMockLikesModule\n\nMockLikesModule\n\nMockLikesModule -->\n\nLikesService->MockLikesModule\n\n\n\nMockPostsModule -->\n\nLikesService->MockPostsModule\n\n\n\nLikesService  -->\n\nMockLikesModule->LikesService \n\n\n\n\n\nRequiredAuthGuard \n\nRequiredAuthGuard \n\nAuthService  -->\n\nMockPostsModule->AuthService \n\n\n\nLikesService  -->\n\nMockPostsModule->LikesService \n\n\n\nRequiredAuthGuard  -->\n\nMockPostsModule->RequiredAuthGuard \n\n\n\n\n\nPostsService\n\nPostsService\n\nPostsModule -->\n\nPostsService->PostsModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        11 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    6 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    5 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    21 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    2 Guards\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            MockLikesRepositoryProvider   (src/.../mock.providers.ts)\n                        \n                        \n                            MockPasswordRepositoryProvider   (src/.../mock.providers.ts)\n                        \n                        \n                            MockPostsRepositoryProvider   (src/.../mock.providers.ts)\n                        \n                        \n                            MockSessionRepositoryProvider   (src/.../mock.providers.ts)\n                        \n                        \n                            MockUserFollowingsRepositoryProvider   (src/.../mock.providers.ts)\n                        \n                        \n                            MockUsersRepositoryProvider   (src/.../mock.providers.ts)\n                        \n                        \n                            User   (src/.../auth.decorator.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/commons/mocks/mock.providers.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        MockLikesRepositoryProvider\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  provide: getRepositoryToken(LikesEntity),\n  useClass: MockLikesRepository,\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        MockPasswordRepositoryProvider\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  provide: getRepositoryToken(PasswordEntity),\n  useValue: {},\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        MockPostsRepositoryProvider\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  provide: getRepositoryToken(PostEntity),\n  useValue: new MockPostsRepository(),\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        MockSessionRepositoryProvider\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  provide: getRepositoryToken(SessionsEntity),\n  useValue: {},\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        MockUserFollowingsRepositoryProvider\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  provide: getRepositoryToken(UserFollowingEntity),\n  useValue: {},\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        MockUsersRepositoryProvider\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  provide: getRepositoryToken(UserEntity),\n  useValue: new MockUsersRepository(),\n}\n                    \n                \n\n\n        \n    \n\n    src/auth/auth.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        User\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator(\n  (data: unknown, ctx: ExecutionContext): UserEntity => {\n    const request = ctx.switchToHttp().getRequest();\n    return request.user;\n  },\n)\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
