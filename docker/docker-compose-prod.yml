version: '3.8'

services:
  app:
    # image: ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPOSITORY}:${IMAGE_TAG}
    image: 672929528106.dkr.ecr.us-east-1.amazonaws.com/nestjs-app:latest
    container_name: yoo-app-prod
    restart: always
    ports:
      - '3000:3000'
    env_file:
      - .env
    depends_on:
      mysql:
        condition: service_healthy
      kafka:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:3000/health']
      interval: 10s
      retries: 5
      timeout: 5s

  mysql:
    image: mysql:8.3
    container_name: yoo-mysql-prod
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: yoodb
      MYSQL_USER: yooadmin
      MYSQL_PASSWORD: yoopass
    volumes:
      - mysql_data:/var/lib/mysql
    healthcheck:
      test: ['CMD', 'mysqladmin', 'ping', '-h', 'localhost']
      interval: 10s
      retries: 5
      timeout: 5s

  kafka:
    image: bitnami/kafka:latest
    container_name: yoo-kafka-prod
    restart: always
    environment:
      KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,INTERNAL://kafka:29092
      KAFKA_CFG_LISTENERS: PLAINTEXT://:9092,INTERNAL://:29092,CONTROLLER://:9093
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,INTERNAL:PLAINTEXT,CONTROLLER:PLAINTEXT
      KAFKA_CFG_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_KRAFT_MODE_ENABLED: 'yes'
      KAFKA_CFG_NODE_ID: '1'
      KAFKA_CFG_PROCESS_ROLES: controller,broker
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: 1@kafka:9093
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: CONTROLLER
      ALLOW_PLAINTEXT_LISTENER: 'yes'
    volumes:
      - kafka_data:/bitnami/kafka
    healthcheck:
      test:
        [
          'CMD',
          'kafka-topics.sh',
          '--bootstrap-server',
          'kafka:29092',
          '--list',
        ]
      interval: 10s
      retries: 5
      timeout: 5s

  redis:
    image: redis:7-alpine
    container_name: yoo-redis-prod
    restart: always
    volumes:
      - redis_data:/data
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 10s
      retries: 5
      timeout: 5s

volumes:
  mysql_data:
  redis_data:
  kafka_data:
